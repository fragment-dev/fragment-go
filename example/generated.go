// Code generated by github.com/Khan/genqlient, DO NOT EDIT.
package main

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/Khan/genqlient/graphql"
	"github.com/fragment-dev/fragment-go/auth"
	"github.com/fragment-dev/fragment-go/client"
)

// Check that context_type from genqlient.yaml implements context.Context.
var _ context.Context = (auth.AuthenticatedContext)(nil)

type CreateLedgerInput struct {
	// Use this field to specify a timezone for queries to your Ledger.
	//
	// When aggregating balances, all transactions within a 24 hour period starting at midnight UTC are included in each day.
	// You can specify a different starting hour for balances. For example, use "-08:00" to align balances with Pacific Standard Time.
	// Balance queries would then consider the start of each local day to be at 8am UTC the next day in UTC.
	// The default timezone is UTC.
	BalanceUTCOffset string      `json:"balanceUTCOffset"`
	Name             string      `json:"name"`
	Type             LedgerTypes `json:"type"`
}

// GetBalanceUTCOffset returns CreateLedgerInput.BalanceUTCOffset, and is useful for accessing the field via an interface.
func (v *CreateLedgerInput) GetBalanceUTCOffset() string { return v.BalanceUTCOffset }

// GetName returns CreateLedgerInput.Name, and is useful for accessing the field via an interface.
func (v *CreateLedgerInput) GetName() string { return v.Name }

// GetType returns CreateLedgerInput.Type, and is useful for accessing the field via an interface.
func (v *CreateLedgerInput) GetType() LedgerTypes { return v.Type }

type LedgerTypes string

const (
	LedgerTypesDouble LedgerTypes = "double"
)

// __createLedgerInput is used internally by genqlient
type __createLedgerInput struct {
	Ik     string            `json:"ik"`
	Ledger CreateLedgerInput `json:"ledger"`
}

// GetIk returns __createLedgerInput.Ik, and is useful for accessing the field via an interface.
func (v *__createLedgerInput) GetIk() string { return v.Ik }

// GetLedger returns __createLedgerInput.Ledger, and is useful for accessing the field via an interface.
func (v *__createLedgerInput) GetLedger() CreateLedgerInput { return v.Ledger }

// createLedgerCreateLedgerBadRequestError includes the requested fields of the GraphQL type BadRequestError.
// The GraphQL type's documentation follows.
//
// Equivalent to an HTTP 400 - request either has missing or incorrect data
type createLedgerCreateLedgerBadRequestError struct {
	Typename string `json:"__typename"`
}

// GetTypename returns createLedgerCreateLedgerBadRequestError.Typename, and is useful for accessing the field via an interface.
func (v *createLedgerCreateLedgerBadRequestError) GetTypename() string { return v.Typename }

// createLedgerCreateLedgerCreateLedgerResponse includes the requested fields of the GraphQL interface CreateLedgerResponse.
//
// createLedgerCreateLedgerCreateLedgerResponse is implemented by the following types:
// createLedgerCreateLedgerBadRequestError
// createLedgerCreateLedgerCreateLedgerResult
// createLedgerCreateLedgerInternalError
type createLedgerCreateLedgerCreateLedgerResponse interface {
	implementsGraphQLInterfacecreateLedgerCreateLedgerCreateLedgerResponse()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
}

func (v *createLedgerCreateLedgerBadRequestError) implementsGraphQLInterfacecreateLedgerCreateLedgerCreateLedgerResponse() {
}
func (v *createLedgerCreateLedgerCreateLedgerResult) implementsGraphQLInterfacecreateLedgerCreateLedgerCreateLedgerResponse() {
}
func (v *createLedgerCreateLedgerInternalError) implementsGraphQLInterfacecreateLedgerCreateLedgerCreateLedgerResponse() {
}

func __unmarshalcreateLedgerCreateLedgerCreateLedgerResponse(b []byte, v *createLedgerCreateLedgerCreateLedgerResponse) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "BadRequestError":
		*v = new(createLedgerCreateLedgerBadRequestError)
		return json.Unmarshal(b, *v)
	case "CreateLedgerResult":
		*v = new(createLedgerCreateLedgerCreateLedgerResult)
		return json.Unmarshal(b, *v)
	case "InternalError":
		*v = new(createLedgerCreateLedgerInternalError)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing CreateLedgerResponse.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for createLedgerCreateLedgerCreateLedgerResponse: "%v"`, tn.TypeName)
	}
}

func __marshalcreateLedgerCreateLedgerCreateLedgerResponse(v *createLedgerCreateLedgerCreateLedgerResponse) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *createLedgerCreateLedgerBadRequestError:
		typename = "BadRequestError"

		result := struct {
			TypeName string `json:"__typename"`
			*createLedgerCreateLedgerBadRequestError
		}{typename, v}
		return json.Marshal(result)
	case *createLedgerCreateLedgerCreateLedgerResult:
		typename = "CreateLedgerResult"

		result := struct {
			TypeName string `json:"__typename"`
			*createLedgerCreateLedgerCreateLedgerResult
		}{typename, v}
		return json.Marshal(result)
	case *createLedgerCreateLedgerInternalError:
		typename = "InternalError"

		result := struct {
			TypeName string `json:"__typename"`
			*createLedgerCreateLedgerInternalError
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for createLedgerCreateLedgerCreateLedgerResponse: "%T"`, v)
	}
}

// createLedgerCreateLedgerCreateLedgerResult includes the requested fields of the GraphQL type CreateLedgerResult.
type createLedgerCreateLedgerCreateLedgerResult struct {
	Typename string `json:"__typename"`
	// The Ledger that was created
	Ledger createLedgerCreateLedgerCreateLedgerResultLedger `json:"ledger"`
}

// GetTypename returns createLedgerCreateLedgerCreateLedgerResult.Typename, and is useful for accessing the field via an interface.
func (v *createLedgerCreateLedgerCreateLedgerResult) GetTypename() string { return v.Typename }

// GetLedger returns createLedgerCreateLedgerCreateLedgerResult.Ledger, and is useful for accessing the field via an interface.
func (v *createLedgerCreateLedgerCreateLedgerResult) GetLedger() createLedgerCreateLedgerCreateLedgerResultLedger {
	return v.Ledger
}

// createLedgerCreateLedgerCreateLedgerResultLedger includes the requested fields of the GraphQL type Ledger.
// The GraphQL type's documentation follows.
//
// Ledgers are databases designed for managing money
type createLedgerCreateLedgerCreateLedgerResultLedger struct {
	Id string `json:"id"`
	// The name of the ledger. Can be updated with the [updateLedger](/api-reference#mutations-updateledger) mutation.
	Name string `json:"name"`
}

// GetId returns createLedgerCreateLedgerCreateLedgerResultLedger.Id, and is useful for accessing the field via an interface.
func (v *createLedgerCreateLedgerCreateLedgerResultLedger) GetId() string { return v.Id }

// GetName returns createLedgerCreateLedgerCreateLedgerResultLedger.Name, and is useful for accessing the field via an interface.
func (v *createLedgerCreateLedgerCreateLedgerResultLedger) GetName() string { return v.Name }

// createLedgerCreateLedgerInternalError includes the requested fields of the GraphQL type InternalError.
// The GraphQL type's documentation follows.
//
// Equivalent to an HTTP 5XX - something went wrong with our API.
type createLedgerCreateLedgerInternalError struct {
	Typename string `json:"__typename"`
}

// GetTypename returns createLedgerCreateLedgerInternalError.Typename, and is useful for accessing the field via an interface.
func (v *createLedgerCreateLedgerInternalError) GetTypename() string { return v.Typename }

// createLedgerResponse is returned by createLedger on success.
type createLedgerResponse struct {
	// Creates a Ledger.
	CreateLedger createLedgerCreateLedgerCreateLedgerResponse `json:"-"`
}

// GetCreateLedger returns createLedgerResponse.CreateLedger, and is useful for accessing the field via an interface.
func (v *createLedgerResponse) GetCreateLedger() createLedgerCreateLedgerCreateLedgerResponse {
	return v.CreateLedger
}

func (v *createLedgerResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*createLedgerResponse
		CreateLedger json.RawMessage `json:"createLedger"`
		graphql.NoUnmarshalJSON
	}
	firstPass.createLedgerResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.CreateLedger
		src := firstPass.CreateLedger
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalcreateLedgerCreateLedgerCreateLedgerResponse(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal createLedgerResponse.CreateLedger: %w", err)
			}
		}
	}
	return nil
}

type __premarshalcreateLedgerResponse struct {
	CreateLedger json.RawMessage `json:"createLedger"`
}

func (v *createLedgerResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *createLedgerResponse) __premarshalJSON() (*__premarshalcreateLedgerResponse, error) {
	var retval __premarshalcreateLedgerResponse

	{

		dst := &retval.CreateLedger
		src := v.CreateLedger
		var err error
		*dst, err = __marshalcreateLedgerCreateLedgerCreateLedgerResponse(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal createLedgerResponse.CreateLedger: %w", err)
		}
	}
	return &retval, nil
}

// The query or mutation executed by createLedger.
const createLedger_Operation = `
mutation createLedger ($ik: SafeString!, $ledger: CreateLedgerInput!) {
	createLedger(ik: $ik, ledger: $ledger) {
		__typename
		... on CreateLedgerResult {
			ledger {
				id
				name
			}
		}
	}
}
`

func createLedger(
	ctx_ auth.AuthenticatedContext,
	ik string,
	ledger CreateLedgerInput,
) (*createLedgerResponse, error) {
	req_ := &graphql.Request{
		OpName: "createLedger",
		Query:  createLedger_Operation,
		Variables: &__createLedgerInput{
			Ik:     ik,
			Ledger: ledger,
		},
	}
	var err_ error
	var client_ graphql.Client

	client_, err_ = client.NewClient(ctx_)
	if err_ != nil {
		return nil, err_
	}

	var data_ createLedgerResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}
