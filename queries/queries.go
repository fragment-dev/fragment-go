// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package queries

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/Khan/genqlient/graphql"
	"github.com/fragment-dev/fragment-go/auth"
	"github.com/fragment-dev/fragment-go/client"
)

// Check that context_type from genqlient.yaml implements context.Context.
var _ context.Context = (auth.AuthenticatedContext)(nil)

// AddLedgerEntryAddLedgerEntryAddLedgerEntryResponse includes the requested fields of the GraphQL interface AddLedgerEntryResponse.
//
// AddLedgerEntryAddLedgerEntryAddLedgerEntryResponse is implemented by the following types:
// AddLedgerEntryAddLedgerEntryAddLedgerEntryResult
// AddLedgerEntryAddLedgerEntryBadRequestError
// AddLedgerEntryAddLedgerEntryInternalError
type AddLedgerEntryAddLedgerEntryAddLedgerEntryResponse interface {
	implementsGraphQLInterfaceAddLedgerEntryAddLedgerEntryAddLedgerEntryResponse()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *AddLedgerEntryAddLedgerEntryAddLedgerEntryResult) implementsGraphQLInterfaceAddLedgerEntryAddLedgerEntryAddLedgerEntryResponse() {
}
func (v *AddLedgerEntryAddLedgerEntryBadRequestError) implementsGraphQLInterfaceAddLedgerEntryAddLedgerEntryAddLedgerEntryResponse() {
}
func (v *AddLedgerEntryAddLedgerEntryInternalError) implementsGraphQLInterfaceAddLedgerEntryAddLedgerEntryAddLedgerEntryResponse() {
}

func __unmarshalAddLedgerEntryAddLedgerEntryAddLedgerEntryResponse(b []byte, v *AddLedgerEntryAddLedgerEntryAddLedgerEntryResponse) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "AddLedgerEntryResult":
		*v = new(AddLedgerEntryAddLedgerEntryAddLedgerEntryResult)
		return json.Unmarshal(b, *v)
	case "BadRequestError":
		*v = new(AddLedgerEntryAddLedgerEntryBadRequestError)
		return json.Unmarshal(b, *v)
	case "InternalError":
		*v = new(AddLedgerEntryAddLedgerEntryInternalError)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing AddLedgerEntryResponse.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for AddLedgerEntryAddLedgerEntryAddLedgerEntryResponse: "%v"`, tn.TypeName)
	}
}

func __marshalAddLedgerEntryAddLedgerEntryAddLedgerEntryResponse(v *AddLedgerEntryAddLedgerEntryAddLedgerEntryResponse) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *AddLedgerEntryAddLedgerEntryAddLedgerEntryResult:
		typename = "AddLedgerEntryResult"

		result := struct {
			TypeName string `json:"__typename"`
			*AddLedgerEntryAddLedgerEntryAddLedgerEntryResult
		}{typename, v}
		return json.Marshal(result)
	case *AddLedgerEntryAddLedgerEntryBadRequestError:
		typename = "BadRequestError"

		result := struct {
			TypeName string `json:"__typename"`
			*AddLedgerEntryAddLedgerEntryBadRequestError
		}{typename, v}
		return json.Marshal(result)
	case *AddLedgerEntryAddLedgerEntryInternalError:
		typename = "InternalError"

		result := struct {
			TypeName string `json:"__typename"`
			*AddLedgerEntryAddLedgerEntryInternalError
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for AddLedgerEntryAddLedgerEntryAddLedgerEntryResponse: "%T"`, v)
	}
}

// AddLedgerEntryAddLedgerEntryAddLedgerEntryResult includes the requested fields of the GraphQL type AddLedgerEntryResult.
type AddLedgerEntryAddLedgerEntryAddLedgerEntryResult struct {
	Typename *string `json:"__typename"`
	// True if this request successfully completed before and the previous response is being returned
	IsIkReplay bool `json:"isIkReplay"`
	// The ledger entry that was posted
	Entry AddLedgerEntryAddLedgerEntryAddLedgerEntryResultEntryLedgerEntry `json:"entry"`
	// The ledger lines that were created in that entry
	Lines []AddLedgerEntryAddLedgerEntryAddLedgerEntryResultLinesLedgerLine `json:"lines"`
}

// GetTypename returns AddLedgerEntryAddLedgerEntryAddLedgerEntryResult.Typename, and is useful for accessing the field via an interface.
func (v *AddLedgerEntryAddLedgerEntryAddLedgerEntryResult) GetTypename() *string { return v.Typename }

// GetIsIkReplay returns AddLedgerEntryAddLedgerEntryAddLedgerEntryResult.IsIkReplay, and is useful for accessing the field via an interface.
func (v *AddLedgerEntryAddLedgerEntryAddLedgerEntryResult) GetIsIkReplay() bool { return v.IsIkReplay }

// GetEntry returns AddLedgerEntryAddLedgerEntryAddLedgerEntryResult.Entry, and is useful for accessing the field via an interface.
func (v *AddLedgerEntryAddLedgerEntryAddLedgerEntryResult) GetEntry() AddLedgerEntryAddLedgerEntryAddLedgerEntryResultEntryLedgerEntry {
	return v.Entry
}

// GetLines returns AddLedgerEntryAddLedgerEntryAddLedgerEntryResult.Lines, and is useful for accessing the field via an interface.
func (v *AddLedgerEntryAddLedgerEntryAddLedgerEntryResult) GetLines() []AddLedgerEntryAddLedgerEntryAddLedgerEntryResultLinesLedgerLine {
	return v.Lines
}

// AddLedgerEntryAddLedgerEntryAddLedgerEntryResultEntryLedgerEntry includes the requested fields of the GraphQL type LedgerEntry.
type AddLedgerEntryAddLedgerEntryAddLedgerEntryResultEntryLedgerEntry struct {
	// The type of the Ledger Entry.
	Type *string `json:"type"`
	// The ID of this LedgerEntry.
	Id string `json:"id"`
	// The idempotency key used to post this ledger entry
	Ik string `json:"ik"`
	// ISO-8601 timestamp this LedgerEntry posted to its Ledger.
	Posted string `json:"posted"`
	// ISO-8601 timestamp this LedgerEntry was created in Fragment.
	Created string `json:"created"`
}

// GetType returns AddLedgerEntryAddLedgerEntryAddLedgerEntryResultEntryLedgerEntry.Type, and is useful for accessing the field via an interface.
func (v *AddLedgerEntryAddLedgerEntryAddLedgerEntryResultEntryLedgerEntry) GetType() *string {
	return v.Type
}

// GetId returns AddLedgerEntryAddLedgerEntryAddLedgerEntryResultEntryLedgerEntry.Id, and is useful for accessing the field via an interface.
func (v *AddLedgerEntryAddLedgerEntryAddLedgerEntryResultEntryLedgerEntry) GetId() string {
	return v.Id
}

// GetIk returns AddLedgerEntryAddLedgerEntryAddLedgerEntryResultEntryLedgerEntry.Ik, and is useful for accessing the field via an interface.
func (v *AddLedgerEntryAddLedgerEntryAddLedgerEntryResultEntryLedgerEntry) GetIk() string {
	return v.Ik
}

// GetPosted returns AddLedgerEntryAddLedgerEntryAddLedgerEntryResultEntryLedgerEntry.Posted, and is useful for accessing the field via an interface.
func (v *AddLedgerEntryAddLedgerEntryAddLedgerEntryResultEntryLedgerEntry) GetPosted() string {
	return v.Posted
}

// GetCreated returns AddLedgerEntryAddLedgerEntryAddLedgerEntryResultEntryLedgerEntry.Created, and is useful for accessing the field via an interface.
func (v *AddLedgerEntryAddLedgerEntryAddLedgerEntryResultEntryLedgerEntry) GetCreated() string {
	return v.Created
}

// AddLedgerEntryAddLedgerEntryAddLedgerEntryResultLinesLedgerLine includes the requested fields of the GraphQL type LedgerLine.
type AddLedgerEntryAddLedgerEntryAddLedgerEntryResultLinesLedgerLine struct {
	Id string `json:"id"`
	// How much this line's LedgerAccount's balance changed in integer cents  (i.e. in USD 100 is 1 dollar, 100 cents)
	Amount string `json:"amount"`
	// LedgerAccount that contains this line
	Account AddLedgerEntryAddLedgerEntryAddLedgerEntryResultLinesLedgerLineAccountLedgerAccount `json:"account"`
}

// GetId returns AddLedgerEntryAddLedgerEntryAddLedgerEntryResultLinesLedgerLine.Id, and is useful for accessing the field via an interface.
func (v *AddLedgerEntryAddLedgerEntryAddLedgerEntryResultLinesLedgerLine) GetId() string { return v.Id }

// GetAmount returns AddLedgerEntryAddLedgerEntryAddLedgerEntryResultLinesLedgerLine.Amount, and is useful for accessing the field via an interface.
func (v *AddLedgerEntryAddLedgerEntryAddLedgerEntryResultLinesLedgerLine) GetAmount() string {
	return v.Amount
}

// GetAccount returns AddLedgerEntryAddLedgerEntryAddLedgerEntryResultLinesLedgerLine.Account, and is useful for accessing the field via an interface.
func (v *AddLedgerEntryAddLedgerEntryAddLedgerEntryResultLinesLedgerLine) GetAccount() AddLedgerEntryAddLedgerEntryAddLedgerEntryResultLinesLedgerLineAccountLedgerAccount {
	return v.Account
}

// AddLedgerEntryAddLedgerEntryAddLedgerEntryResultLinesLedgerLineAccountLedgerAccount includes the requested fields of the GraphQL type LedgerAccount.
// The GraphQL type's documentation follows.
//
// A ledger account is a container for money
type AddLedgerEntryAddLedgerEntryAddLedgerEntryResultLinesLedgerLineAccountLedgerAccount struct {
	// The unique Path of the ledger account. This is a slash-delimited string containing the location of an account in its chart of accounts.
	// For accounts created with a schema, this will be composed of account keys. Else, for accounts created with the createLedgerAccounts API,
	// this will be composed of the IKs of an account and its ancestors.
	Path string `json:"path"`
}

// GetPath returns AddLedgerEntryAddLedgerEntryAddLedgerEntryResultLinesLedgerLineAccountLedgerAccount.Path, and is useful for accessing the field via an interface.
func (v *AddLedgerEntryAddLedgerEntryAddLedgerEntryResultLinesLedgerLineAccountLedgerAccount) GetPath() string {
	return v.Path
}

// AddLedgerEntryAddLedgerEntryBadRequestError includes the requested fields of the GraphQL type BadRequestError.
// The GraphQL type's documentation follows.
//
// Equivalent to an HTTP 400 - request either has missing or incorrect data
type AddLedgerEntryAddLedgerEntryBadRequestError struct {
	Typename *string `json:"__typename"`
	// The HTTP status code corresponding to the error
	Code string `json:"code"`
	// The error message
	Message string `json:"message"`
}

// GetTypename returns AddLedgerEntryAddLedgerEntryBadRequestError.Typename, and is useful for accessing the field via an interface.
func (v *AddLedgerEntryAddLedgerEntryBadRequestError) GetTypename() *string { return v.Typename }

// GetCode returns AddLedgerEntryAddLedgerEntryBadRequestError.Code, and is useful for accessing the field via an interface.
func (v *AddLedgerEntryAddLedgerEntryBadRequestError) GetCode() string { return v.Code }

// GetMessage returns AddLedgerEntryAddLedgerEntryBadRequestError.Message, and is useful for accessing the field via an interface.
func (v *AddLedgerEntryAddLedgerEntryBadRequestError) GetMessage() string { return v.Message }

// AddLedgerEntryAddLedgerEntryInternalError includes the requested fields of the GraphQL type InternalError.
// The GraphQL type's documentation follows.
//
// Equivalent to an HTTP 5XX - something went wrong with our API.
type AddLedgerEntryAddLedgerEntryInternalError struct {
	Typename *string `json:"__typename"`
	// The HTTP status code corresponding to the error
	Code string `json:"code"`
	// The error message
	Message string `json:"message"`
}

// GetTypename returns AddLedgerEntryAddLedgerEntryInternalError.Typename, and is useful for accessing the field via an interface.
func (v *AddLedgerEntryAddLedgerEntryInternalError) GetTypename() *string { return v.Typename }

// GetCode returns AddLedgerEntryAddLedgerEntryInternalError.Code, and is useful for accessing the field via an interface.
func (v *AddLedgerEntryAddLedgerEntryInternalError) GetCode() string { return v.Code }

// GetMessage returns AddLedgerEntryAddLedgerEntryInternalError.Message, and is useful for accessing the field via an interface.
func (v *AddLedgerEntryAddLedgerEntryInternalError) GetMessage() string { return v.Message }

// AddLedgerEntryResponse is returned by AddLedgerEntry on success.
type AddLedgerEntryResponse struct {
	// Adds a Ledger Entry to a Ledger. This Ledger Entry cannot be into a Linked Ledger Account. For that, use [reconcileTx](https://fragment.dev/api-reference#mutations-reconciletx)
	AddLedgerEntry AddLedgerEntryAddLedgerEntryAddLedgerEntryResponse `json:"-"`
}

// GetAddLedgerEntry returns AddLedgerEntryResponse.AddLedgerEntry, and is useful for accessing the field via an interface.
func (v *AddLedgerEntryResponse) GetAddLedgerEntry() AddLedgerEntryAddLedgerEntryAddLedgerEntryResponse {
	return v.AddLedgerEntry
}

func (v *AddLedgerEntryResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AddLedgerEntryResponse
		AddLedgerEntry json.RawMessage `json:"addLedgerEntry"`
		graphql.NoUnmarshalJSON
	}
	firstPass.AddLedgerEntryResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.AddLedgerEntry
		src := firstPass.AddLedgerEntry
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalAddLedgerEntryAddLedgerEntryAddLedgerEntryResponse(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal AddLedgerEntryResponse.AddLedgerEntry: %w", err)
			}
		}
	}
	return nil
}

type __premarshalAddLedgerEntryResponse struct {
	AddLedgerEntry json.RawMessage `json:"addLedgerEntry"`
}

func (v *AddLedgerEntryResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AddLedgerEntryResponse) __premarshalJSON() (*__premarshalAddLedgerEntryResponse, error) {
	var retval __premarshalAddLedgerEntryResponse

	{

		dst := &retval.AddLedgerEntry
		src := v.AddLedgerEntry
		var err error
		*dst, err = __marshalAddLedgerEntryAddLedgerEntryAddLedgerEntryResponse(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal AddLedgerEntryResponse.AddLedgerEntry: %w", err)
		}
	}
	return &retval, nil
}

// AddLedgerEntryRuntimeAddLedgerEntryAddLedgerEntryResponse includes the requested fields of the GraphQL interface AddLedgerEntryResponse.
//
// AddLedgerEntryRuntimeAddLedgerEntryAddLedgerEntryResponse is implemented by the following types:
// AddLedgerEntryRuntimeAddLedgerEntryAddLedgerEntryResult
// AddLedgerEntryRuntimeAddLedgerEntryBadRequestError
// AddLedgerEntryRuntimeAddLedgerEntryInternalError
type AddLedgerEntryRuntimeAddLedgerEntryAddLedgerEntryResponse interface {
	implementsGraphQLInterfaceAddLedgerEntryRuntimeAddLedgerEntryAddLedgerEntryResponse()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *AddLedgerEntryRuntimeAddLedgerEntryAddLedgerEntryResult) implementsGraphQLInterfaceAddLedgerEntryRuntimeAddLedgerEntryAddLedgerEntryResponse() {
}
func (v *AddLedgerEntryRuntimeAddLedgerEntryBadRequestError) implementsGraphQLInterfaceAddLedgerEntryRuntimeAddLedgerEntryAddLedgerEntryResponse() {
}
func (v *AddLedgerEntryRuntimeAddLedgerEntryInternalError) implementsGraphQLInterfaceAddLedgerEntryRuntimeAddLedgerEntryAddLedgerEntryResponse() {
}

func __unmarshalAddLedgerEntryRuntimeAddLedgerEntryAddLedgerEntryResponse(b []byte, v *AddLedgerEntryRuntimeAddLedgerEntryAddLedgerEntryResponse) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "AddLedgerEntryResult":
		*v = new(AddLedgerEntryRuntimeAddLedgerEntryAddLedgerEntryResult)
		return json.Unmarshal(b, *v)
	case "BadRequestError":
		*v = new(AddLedgerEntryRuntimeAddLedgerEntryBadRequestError)
		return json.Unmarshal(b, *v)
	case "InternalError":
		*v = new(AddLedgerEntryRuntimeAddLedgerEntryInternalError)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing AddLedgerEntryResponse.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for AddLedgerEntryRuntimeAddLedgerEntryAddLedgerEntryResponse: "%v"`, tn.TypeName)
	}
}

func __marshalAddLedgerEntryRuntimeAddLedgerEntryAddLedgerEntryResponse(v *AddLedgerEntryRuntimeAddLedgerEntryAddLedgerEntryResponse) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *AddLedgerEntryRuntimeAddLedgerEntryAddLedgerEntryResult:
		typename = "AddLedgerEntryResult"

		result := struct {
			TypeName string `json:"__typename"`
			*AddLedgerEntryRuntimeAddLedgerEntryAddLedgerEntryResult
		}{typename, v}
		return json.Marshal(result)
	case *AddLedgerEntryRuntimeAddLedgerEntryBadRequestError:
		typename = "BadRequestError"

		result := struct {
			TypeName string `json:"__typename"`
			*AddLedgerEntryRuntimeAddLedgerEntryBadRequestError
		}{typename, v}
		return json.Marshal(result)
	case *AddLedgerEntryRuntimeAddLedgerEntryInternalError:
		typename = "InternalError"

		result := struct {
			TypeName string `json:"__typename"`
			*AddLedgerEntryRuntimeAddLedgerEntryInternalError
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for AddLedgerEntryRuntimeAddLedgerEntryAddLedgerEntryResponse: "%T"`, v)
	}
}

// AddLedgerEntryRuntimeAddLedgerEntryAddLedgerEntryResult includes the requested fields of the GraphQL type AddLedgerEntryResult.
type AddLedgerEntryRuntimeAddLedgerEntryAddLedgerEntryResult struct {
	Typename *string `json:"__typename"`
	// True if this request successfully completed before and the previous response is being returned
	IsIkReplay bool `json:"isIkReplay"`
	// The ledger entry that was posted
	Entry AddLedgerEntryRuntimeAddLedgerEntryAddLedgerEntryResultEntryLedgerEntry `json:"entry"`
	// The ledger lines that were created in that entry
	Lines []AddLedgerEntryRuntimeAddLedgerEntryAddLedgerEntryResultLinesLedgerLine `json:"lines"`
}

// GetTypename returns AddLedgerEntryRuntimeAddLedgerEntryAddLedgerEntryResult.Typename, and is useful for accessing the field via an interface.
func (v *AddLedgerEntryRuntimeAddLedgerEntryAddLedgerEntryResult) GetTypename() *string {
	return v.Typename
}

// GetIsIkReplay returns AddLedgerEntryRuntimeAddLedgerEntryAddLedgerEntryResult.IsIkReplay, and is useful for accessing the field via an interface.
func (v *AddLedgerEntryRuntimeAddLedgerEntryAddLedgerEntryResult) GetIsIkReplay() bool {
	return v.IsIkReplay
}

// GetEntry returns AddLedgerEntryRuntimeAddLedgerEntryAddLedgerEntryResult.Entry, and is useful for accessing the field via an interface.
func (v *AddLedgerEntryRuntimeAddLedgerEntryAddLedgerEntryResult) GetEntry() AddLedgerEntryRuntimeAddLedgerEntryAddLedgerEntryResultEntryLedgerEntry {
	return v.Entry
}

// GetLines returns AddLedgerEntryRuntimeAddLedgerEntryAddLedgerEntryResult.Lines, and is useful for accessing the field via an interface.
func (v *AddLedgerEntryRuntimeAddLedgerEntryAddLedgerEntryResult) GetLines() []AddLedgerEntryRuntimeAddLedgerEntryAddLedgerEntryResultLinesLedgerLine {
	return v.Lines
}

// AddLedgerEntryRuntimeAddLedgerEntryAddLedgerEntryResultEntryLedgerEntry includes the requested fields of the GraphQL type LedgerEntry.
type AddLedgerEntryRuntimeAddLedgerEntryAddLedgerEntryResultEntryLedgerEntry struct {
	// The type of the Ledger Entry.
	Type *string `json:"type"`
	// The ID of this LedgerEntry.
	Id string `json:"id"`
	// The idempotency key used to post this ledger entry
	Ik string `json:"ik"`
	// ISO-8601 timestamp this LedgerEntry posted to its Ledger.
	Posted string `json:"posted"`
	// ISO-8601 timestamp this LedgerEntry was created in Fragment.
	Created string `json:"created"`
}

// GetType returns AddLedgerEntryRuntimeAddLedgerEntryAddLedgerEntryResultEntryLedgerEntry.Type, and is useful for accessing the field via an interface.
func (v *AddLedgerEntryRuntimeAddLedgerEntryAddLedgerEntryResultEntryLedgerEntry) GetType() *string {
	return v.Type
}

// GetId returns AddLedgerEntryRuntimeAddLedgerEntryAddLedgerEntryResultEntryLedgerEntry.Id, and is useful for accessing the field via an interface.
func (v *AddLedgerEntryRuntimeAddLedgerEntryAddLedgerEntryResultEntryLedgerEntry) GetId() string {
	return v.Id
}

// GetIk returns AddLedgerEntryRuntimeAddLedgerEntryAddLedgerEntryResultEntryLedgerEntry.Ik, and is useful for accessing the field via an interface.
func (v *AddLedgerEntryRuntimeAddLedgerEntryAddLedgerEntryResultEntryLedgerEntry) GetIk() string {
	return v.Ik
}

// GetPosted returns AddLedgerEntryRuntimeAddLedgerEntryAddLedgerEntryResultEntryLedgerEntry.Posted, and is useful for accessing the field via an interface.
func (v *AddLedgerEntryRuntimeAddLedgerEntryAddLedgerEntryResultEntryLedgerEntry) GetPosted() string {
	return v.Posted
}

// GetCreated returns AddLedgerEntryRuntimeAddLedgerEntryAddLedgerEntryResultEntryLedgerEntry.Created, and is useful for accessing the field via an interface.
func (v *AddLedgerEntryRuntimeAddLedgerEntryAddLedgerEntryResultEntryLedgerEntry) GetCreated() string {
	return v.Created
}

// AddLedgerEntryRuntimeAddLedgerEntryAddLedgerEntryResultLinesLedgerLine includes the requested fields of the GraphQL type LedgerLine.
type AddLedgerEntryRuntimeAddLedgerEntryAddLedgerEntryResultLinesLedgerLine struct {
	Id string `json:"id"`
	// How much this line's LedgerAccount's balance changed in integer cents  (i.e. in USD 100 is 1 dollar, 100 cents)
	Amount string `json:"amount"`
	// LedgerAccount that contains this line
	Account AddLedgerEntryRuntimeAddLedgerEntryAddLedgerEntryResultLinesLedgerLineAccountLedgerAccount `json:"account"`
}

// GetId returns AddLedgerEntryRuntimeAddLedgerEntryAddLedgerEntryResultLinesLedgerLine.Id, and is useful for accessing the field via an interface.
func (v *AddLedgerEntryRuntimeAddLedgerEntryAddLedgerEntryResultLinesLedgerLine) GetId() string {
	return v.Id
}

// GetAmount returns AddLedgerEntryRuntimeAddLedgerEntryAddLedgerEntryResultLinesLedgerLine.Amount, and is useful for accessing the field via an interface.
func (v *AddLedgerEntryRuntimeAddLedgerEntryAddLedgerEntryResultLinesLedgerLine) GetAmount() string {
	return v.Amount
}

// GetAccount returns AddLedgerEntryRuntimeAddLedgerEntryAddLedgerEntryResultLinesLedgerLine.Account, and is useful for accessing the field via an interface.
func (v *AddLedgerEntryRuntimeAddLedgerEntryAddLedgerEntryResultLinesLedgerLine) GetAccount() AddLedgerEntryRuntimeAddLedgerEntryAddLedgerEntryResultLinesLedgerLineAccountLedgerAccount {
	return v.Account
}

// AddLedgerEntryRuntimeAddLedgerEntryAddLedgerEntryResultLinesLedgerLineAccountLedgerAccount includes the requested fields of the GraphQL type LedgerAccount.
// The GraphQL type's documentation follows.
//
// A ledger account is a container for money
type AddLedgerEntryRuntimeAddLedgerEntryAddLedgerEntryResultLinesLedgerLineAccountLedgerAccount struct {
	// The unique Path of the ledger account. This is a slash-delimited string containing the location of an account in its chart of accounts.
	// For accounts created with a schema, this will be composed of account keys. Else, for accounts created with the createLedgerAccounts API,
	// this will be composed of the IKs of an account and its ancestors.
	Path string `json:"path"`
}

// GetPath returns AddLedgerEntryRuntimeAddLedgerEntryAddLedgerEntryResultLinesLedgerLineAccountLedgerAccount.Path, and is useful for accessing the field via an interface.
func (v *AddLedgerEntryRuntimeAddLedgerEntryAddLedgerEntryResultLinesLedgerLineAccountLedgerAccount) GetPath() string {
	return v.Path
}

// AddLedgerEntryRuntimeAddLedgerEntryBadRequestError includes the requested fields of the GraphQL type BadRequestError.
// The GraphQL type's documentation follows.
//
// Equivalent to an HTTP 400 - request either has missing or incorrect data
type AddLedgerEntryRuntimeAddLedgerEntryBadRequestError struct {
	Typename *string `json:"__typename"`
	// The HTTP status code corresponding to the error
	Code string `json:"code"`
	// The error message
	Message string `json:"message"`
}

// GetTypename returns AddLedgerEntryRuntimeAddLedgerEntryBadRequestError.Typename, and is useful for accessing the field via an interface.
func (v *AddLedgerEntryRuntimeAddLedgerEntryBadRequestError) GetTypename() *string { return v.Typename }

// GetCode returns AddLedgerEntryRuntimeAddLedgerEntryBadRequestError.Code, and is useful for accessing the field via an interface.
func (v *AddLedgerEntryRuntimeAddLedgerEntryBadRequestError) GetCode() string { return v.Code }

// GetMessage returns AddLedgerEntryRuntimeAddLedgerEntryBadRequestError.Message, and is useful for accessing the field via an interface.
func (v *AddLedgerEntryRuntimeAddLedgerEntryBadRequestError) GetMessage() string { return v.Message }

// AddLedgerEntryRuntimeAddLedgerEntryInternalError includes the requested fields of the GraphQL type InternalError.
// The GraphQL type's documentation follows.
//
// Equivalent to an HTTP 5XX - something went wrong with our API.
type AddLedgerEntryRuntimeAddLedgerEntryInternalError struct {
	Typename *string `json:"__typename"`
	// The HTTP status code corresponding to the error
	Code string `json:"code"`
	// The error message
	Message string `json:"message"`
}

// GetTypename returns AddLedgerEntryRuntimeAddLedgerEntryInternalError.Typename, and is useful for accessing the field via an interface.
func (v *AddLedgerEntryRuntimeAddLedgerEntryInternalError) GetTypename() *string { return v.Typename }

// GetCode returns AddLedgerEntryRuntimeAddLedgerEntryInternalError.Code, and is useful for accessing the field via an interface.
func (v *AddLedgerEntryRuntimeAddLedgerEntryInternalError) GetCode() string { return v.Code }

// GetMessage returns AddLedgerEntryRuntimeAddLedgerEntryInternalError.Message, and is useful for accessing the field via an interface.
func (v *AddLedgerEntryRuntimeAddLedgerEntryInternalError) GetMessage() string { return v.Message }

// AddLedgerEntryRuntimeResponse is returned by AddLedgerEntryRuntime on success.
type AddLedgerEntryRuntimeResponse struct {
	// Adds a Ledger Entry to a Ledger. This Ledger Entry cannot be into a Linked Ledger Account. For that, use [reconcileTx](https://fragment.dev/api-reference#mutations-reconciletx)
	AddLedgerEntry AddLedgerEntryRuntimeAddLedgerEntryAddLedgerEntryResponse `json:"-"`
}

// GetAddLedgerEntry returns AddLedgerEntryRuntimeResponse.AddLedgerEntry, and is useful for accessing the field via an interface.
func (v *AddLedgerEntryRuntimeResponse) GetAddLedgerEntry() AddLedgerEntryRuntimeAddLedgerEntryAddLedgerEntryResponse {
	return v.AddLedgerEntry
}

func (v *AddLedgerEntryRuntimeResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AddLedgerEntryRuntimeResponse
		AddLedgerEntry json.RawMessage `json:"addLedgerEntry"`
		graphql.NoUnmarshalJSON
	}
	firstPass.AddLedgerEntryRuntimeResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.AddLedgerEntry
		src := firstPass.AddLedgerEntry
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalAddLedgerEntryRuntimeAddLedgerEntryAddLedgerEntryResponse(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal AddLedgerEntryRuntimeResponse.AddLedgerEntry: %w", err)
			}
		}
	}
	return nil
}

type __premarshalAddLedgerEntryRuntimeResponse struct {
	AddLedgerEntry json.RawMessage `json:"addLedgerEntry"`
}

func (v *AddLedgerEntryRuntimeResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AddLedgerEntryRuntimeResponse) __premarshalJSON() (*__premarshalAddLedgerEntryRuntimeResponse, error) {
	var retval __premarshalAddLedgerEntryRuntimeResponse

	{

		dst := &retval.AddLedgerEntry
		src := v.AddLedgerEntry
		var err error
		*dst, err = __marshalAddLedgerEntryRuntimeAddLedgerEntryAddLedgerEntryResponse(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal AddLedgerEntryRuntimeResponse.AddLedgerEntry: %w", err)
		}
	}
	return &retval, nil
}

// Used to configure the write-consistency of a Ledger Account's balance.
// See [Configure consistency](https://fragment.dev/docs#configure-consistency).
type BalanceUpdateConsistencyMode string

const (
	// Eventually consistent balance updates.
	BalanceUpdateConsistencyModeEventual BalanceUpdateConsistencyMode = "eventual"
	// Strongly consistent balance updates.
	BalanceUpdateConsistencyModeStrong BalanceUpdateConsistencyMode = "strong"
)

// The input for your Chart of Accounts in a Schema.
type ChartOfAccountsInput struct {
	// The Ledger Accounts modeled by your Schema. Ledger Accounts may be nested up to a maximum depth of 10.
	Accounts []SchemaLedgerAccountInput `json:"accounts"`
	// The default consistency configuration for all Ledger Accounts in this Schema.
	// If a Ledger Account does not specify its own consistency configuration, it will use the default values provided here.
	//
	// See [Configure consistency](https://fragment.dev/docs#configure-consistency).
	DefaultConsistencyConfig *LedgerAccountConsistencyConfigInput `json:"defaultConsistencyConfig"`
	// The default currency of each Ledger Account in the Chart Of Accounts.
	// It must be provided if `defaultCurrencyMode` is set to `single`.
	// Additionally, `defaultCurrency` must be omitted if `defaultCurrencyMode` is set to `multi`.
	DefaultCurrency *CurrencyMatchInput `json:"defaultCurrency"`
	// The default currency mode of each Ledger Account in the Chart Of Accounts.
	DefaultCurrencyMode *CurrencyMode `json:"defaultCurrencyMode"`
}

// GetAccounts returns ChartOfAccountsInput.Accounts, and is useful for accessing the field via an interface.
func (v *ChartOfAccountsInput) GetAccounts() []SchemaLedgerAccountInput { return v.Accounts }

// GetDefaultConsistencyConfig returns ChartOfAccountsInput.DefaultConsistencyConfig, and is useful for accessing the field via an interface.
func (v *ChartOfAccountsInput) GetDefaultConsistencyConfig() *LedgerAccountConsistencyConfigInput {
	return v.DefaultConsistencyConfig
}

// GetDefaultCurrency returns ChartOfAccountsInput.DefaultCurrency, and is useful for accessing the field via an interface.
func (v *ChartOfAccountsInput) GetDefaultCurrency() *CurrencyMatchInput { return v.DefaultCurrency }

// GetDefaultCurrencyMode returns ChartOfAccountsInput.DefaultCurrencyMode, and is useful for accessing the field via an interface.
func (v *ChartOfAccountsInput) GetDefaultCurrencyMode() *CurrencyMode { return v.DefaultCurrencyMode }

// CreateCustomLinkCreateCustomLinkBadRequestError includes the requested fields of the GraphQL type BadRequestError.
// The GraphQL type's documentation follows.
//
// Equivalent to an HTTP 400 - request either has missing or incorrect data
type CreateCustomLinkCreateCustomLinkBadRequestError struct {
	Typename *string `json:"__typename"`
	// The HTTP status code corresponding to the error
	Code string `json:"code"`
	// The error message
	Message string `json:"message"`
}

// GetTypename returns CreateCustomLinkCreateCustomLinkBadRequestError.Typename, and is useful for accessing the field via an interface.
func (v *CreateCustomLinkCreateCustomLinkBadRequestError) GetTypename() *string { return v.Typename }

// GetCode returns CreateCustomLinkCreateCustomLinkBadRequestError.Code, and is useful for accessing the field via an interface.
func (v *CreateCustomLinkCreateCustomLinkBadRequestError) GetCode() string { return v.Code }

// GetMessage returns CreateCustomLinkCreateCustomLinkBadRequestError.Message, and is useful for accessing the field via an interface.
func (v *CreateCustomLinkCreateCustomLinkBadRequestError) GetMessage() string { return v.Message }

// CreateCustomLinkCreateCustomLinkCreateCustomLinkResponse includes the requested fields of the GraphQL interface CreateCustomLinkResponse.
//
// CreateCustomLinkCreateCustomLinkCreateCustomLinkResponse is implemented by the following types:
// CreateCustomLinkCreateCustomLinkBadRequestError
// CreateCustomLinkCreateCustomLinkCreateCustomLinkResult
// CreateCustomLinkCreateCustomLinkInternalError
type CreateCustomLinkCreateCustomLinkCreateCustomLinkResponse interface {
	implementsGraphQLInterfaceCreateCustomLinkCreateCustomLinkCreateCustomLinkResponse()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *CreateCustomLinkCreateCustomLinkBadRequestError) implementsGraphQLInterfaceCreateCustomLinkCreateCustomLinkCreateCustomLinkResponse() {
}
func (v *CreateCustomLinkCreateCustomLinkCreateCustomLinkResult) implementsGraphQLInterfaceCreateCustomLinkCreateCustomLinkCreateCustomLinkResponse() {
}
func (v *CreateCustomLinkCreateCustomLinkInternalError) implementsGraphQLInterfaceCreateCustomLinkCreateCustomLinkCreateCustomLinkResponse() {
}

func __unmarshalCreateCustomLinkCreateCustomLinkCreateCustomLinkResponse(b []byte, v *CreateCustomLinkCreateCustomLinkCreateCustomLinkResponse) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "BadRequestError":
		*v = new(CreateCustomLinkCreateCustomLinkBadRequestError)
		return json.Unmarshal(b, *v)
	case "CreateCustomLinkResult":
		*v = new(CreateCustomLinkCreateCustomLinkCreateCustomLinkResult)
		return json.Unmarshal(b, *v)
	case "InternalError":
		*v = new(CreateCustomLinkCreateCustomLinkInternalError)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing CreateCustomLinkResponse.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for CreateCustomLinkCreateCustomLinkCreateCustomLinkResponse: "%v"`, tn.TypeName)
	}
}

func __marshalCreateCustomLinkCreateCustomLinkCreateCustomLinkResponse(v *CreateCustomLinkCreateCustomLinkCreateCustomLinkResponse) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *CreateCustomLinkCreateCustomLinkBadRequestError:
		typename = "BadRequestError"

		result := struct {
			TypeName string `json:"__typename"`
			*CreateCustomLinkCreateCustomLinkBadRequestError
		}{typename, v}
		return json.Marshal(result)
	case *CreateCustomLinkCreateCustomLinkCreateCustomLinkResult:
		typename = "CreateCustomLinkResult"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalCreateCustomLinkCreateCustomLinkCreateCustomLinkResult
		}{typename, premarshaled}
		return json.Marshal(result)
	case *CreateCustomLinkCreateCustomLinkInternalError:
		typename = "InternalError"

		result := struct {
			TypeName string `json:"__typename"`
			*CreateCustomLinkCreateCustomLinkInternalError
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for CreateCustomLinkCreateCustomLinkCreateCustomLinkResponse: "%T"`, v)
	}
}

// CreateCustomLinkCreateCustomLinkCreateCustomLinkResult includes the requested fields of the GraphQL type CreateCustomLinkResult.
type CreateCustomLinkCreateCustomLinkCreateCustomLinkResult struct {
	Typename *string `json:"__typename"`
	// The custom link that was created. Represents an instance of an external system.
	Link       CreateCustomLinkCreateCustomLinkCreateCustomLinkResultLink `json:"-"`
	IsIkReplay bool                                                       `json:"isIkReplay"`
}

// GetTypename returns CreateCustomLinkCreateCustomLinkCreateCustomLinkResult.Typename, and is useful for accessing the field via an interface.
func (v *CreateCustomLinkCreateCustomLinkCreateCustomLinkResult) GetTypename() *string {
	return v.Typename
}

// GetLink returns CreateCustomLinkCreateCustomLinkCreateCustomLinkResult.Link, and is useful for accessing the field via an interface.
func (v *CreateCustomLinkCreateCustomLinkCreateCustomLinkResult) GetLink() CreateCustomLinkCreateCustomLinkCreateCustomLinkResultLink {
	return v.Link
}

// GetIsIkReplay returns CreateCustomLinkCreateCustomLinkCreateCustomLinkResult.IsIkReplay, and is useful for accessing the field via an interface.
func (v *CreateCustomLinkCreateCustomLinkCreateCustomLinkResult) GetIsIkReplay() bool {
	return v.IsIkReplay
}

func (v *CreateCustomLinkCreateCustomLinkCreateCustomLinkResult) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateCustomLinkCreateCustomLinkCreateCustomLinkResult
		Link json.RawMessage `json:"link"`
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateCustomLinkCreateCustomLinkCreateCustomLinkResult = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Link
		src := firstPass.Link
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalCreateCustomLinkCreateCustomLinkCreateCustomLinkResultLink(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal CreateCustomLinkCreateCustomLinkCreateCustomLinkResult.Link: %w", err)
			}
		}
	}
	return nil
}

type __premarshalCreateCustomLinkCreateCustomLinkCreateCustomLinkResult struct {
	Typename *string `json:"__typename"`

	Link json.RawMessage `json:"link"`

	IsIkReplay bool `json:"isIkReplay"`
}

func (v *CreateCustomLinkCreateCustomLinkCreateCustomLinkResult) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateCustomLinkCreateCustomLinkCreateCustomLinkResult) __premarshalJSON() (*__premarshalCreateCustomLinkCreateCustomLinkCreateCustomLinkResult, error) {
	var retval __premarshalCreateCustomLinkCreateCustomLinkCreateCustomLinkResult

	retval.Typename = v.Typename
	{

		dst := &retval.Link
		src := v.Link
		var err error
		*dst, err = __marshalCreateCustomLinkCreateCustomLinkCreateCustomLinkResultLink(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal CreateCustomLinkCreateCustomLinkCreateCustomLinkResult.Link: %w", err)
		}
	}
	retval.IsIkReplay = v.IsIkReplay
	return &retval, nil
}

// CreateCustomLinkCreateCustomLinkCreateCustomLinkResultLink includes the requested fields of the GraphQL interface Link.
//
// CreateCustomLinkCreateCustomLinkCreateCustomLinkResultLink is implemented by the following types:
// CreateCustomLinkCreateCustomLinkCreateCustomLinkResultLinkCustomLink
// CreateCustomLinkCreateCustomLinkCreateCustomLinkResultLinkIncreaseLink
// CreateCustomLinkCreateCustomLinkCreateCustomLinkResultLinkStripeLink
// CreateCustomLinkCreateCustomLinkCreateCustomLinkResultLinkUnitLink
type CreateCustomLinkCreateCustomLinkCreateCustomLinkResultLink interface {
	implementsGraphQLInterfaceCreateCustomLinkCreateCustomLinkCreateCustomLinkResultLink()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
	// GetId returns the interface-field "id" from its implementation.
	// The GraphQL interface field's documentation follows.
	//
	// FRAGMENT ID of the Link.
	GetId() string
	// GetName returns the interface-field "name" from its implementation.
	// The GraphQL interface field's documentation follows.
	//
	// Name of the Link as it appears in the Dashboard.
	GetName() string
	// GetCreated returns the interface-field "created" from its implementation.
	// The GraphQL interface field's documentation follows.
	//
	// ISO-8601 timestamp when the Link was created.
	GetCreated() string
}

func (v *CreateCustomLinkCreateCustomLinkCreateCustomLinkResultLinkCustomLink) implementsGraphQLInterfaceCreateCustomLinkCreateCustomLinkCreateCustomLinkResultLink() {
}
func (v *CreateCustomLinkCreateCustomLinkCreateCustomLinkResultLinkIncreaseLink) implementsGraphQLInterfaceCreateCustomLinkCreateCustomLinkCreateCustomLinkResultLink() {
}
func (v *CreateCustomLinkCreateCustomLinkCreateCustomLinkResultLinkStripeLink) implementsGraphQLInterfaceCreateCustomLinkCreateCustomLinkCreateCustomLinkResultLink() {
}
func (v *CreateCustomLinkCreateCustomLinkCreateCustomLinkResultLinkUnitLink) implementsGraphQLInterfaceCreateCustomLinkCreateCustomLinkCreateCustomLinkResultLink() {
}

func __unmarshalCreateCustomLinkCreateCustomLinkCreateCustomLinkResultLink(b []byte, v *CreateCustomLinkCreateCustomLinkCreateCustomLinkResultLink) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "CustomLink":
		*v = new(CreateCustomLinkCreateCustomLinkCreateCustomLinkResultLinkCustomLink)
		return json.Unmarshal(b, *v)
	case "IncreaseLink":
		*v = new(CreateCustomLinkCreateCustomLinkCreateCustomLinkResultLinkIncreaseLink)
		return json.Unmarshal(b, *v)
	case "StripeLink":
		*v = new(CreateCustomLinkCreateCustomLinkCreateCustomLinkResultLinkStripeLink)
		return json.Unmarshal(b, *v)
	case "UnitLink":
		*v = new(CreateCustomLinkCreateCustomLinkCreateCustomLinkResultLinkUnitLink)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Link.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for CreateCustomLinkCreateCustomLinkCreateCustomLinkResultLink: "%v"`, tn.TypeName)
	}
}

func __marshalCreateCustomLinkCreateCustomLinkCreateCustomLinkResultLink(v *CreateCustomLinkCreateCustomLinkCreateCustomLinkResultLink) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *CreateCustomLinkCreateCustomLinkCreateCustomLinkResultLinkCustomLink:
		typename = "CustomLink"

		result := struct {
			TypeName string `json:"__typename"`
			*CreateCustomLinkCreateCustomLinkCreateCustomLinkResultLinkCustomLink
		}{typename, v}
		return json.Marshal(result)
	case *CreateCustomLinkCreateCustomLinkCreateCustomLinkResultLinkIncreaseLink:
		typename = "IncreaseLink"

		result := struct {
			TypeName string `json:"__typename"`
			*CreateCustomLinkCreateCustomLinkCreateCustomLinkResultLinkIncreaseLink
		}{typename, v}
		return json.Marshal(result)
	case *CreateCustomLinkCreateCustomLinkCreateCustomLinkResultLinkStripeLink:
		typename = "StripeLink"

		result := struct {
			TypeName string `json:"__typename"`
			*CreateCustomLinkCreateCustomLinkCreateCustomLinkResultLinkStripeLink
		}{typename, v}
		return json.Marshal(result)
	case *CreateCustomLinkCreateCustomLinkCreateCustomLinkResultLinkUnitLink:
		typename = "UnitLink"

		result := struct {
			TypeName string `json:"__typename"`
			*CreateCustomLinkCreateCustomLinkCreateCustomLinkResultLinkUnitLink
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for CreateCustomLinkCreateCustomLinkCreateCustomLinkResultLink: "%T"`, v)
	}
}

// CreateCustomLinkCreateCustomLinkCreateCustomLinkResultLinkCustomLink includes the requested fields of the GraphQL type CustomLink.
type CreateCustomLinkCreateCustomLinkCreateCustomLinkResultLinkCustomLink struct {
	Typename *string `json:"__typename"`
	// FRAGMENT ID of the Link.
	Id string `json:"id"`
	// Name of the Link as it appears in the Dashboard.
	Name string `json:"name"`
	// ISO-8601 timestamp when the Link was created.
	Created string `json:"created"`
}

// GetTypename returns CreateCustomLinkCreateCustomLinkCreateCustomLinkResultLinkCustomLink.Typename, and is useful for accessing the field via an interface.
func (v *CreateCustomLinkCreateCustomLinkCreateCustomLinkResultLinkCustomLink) GetTypename() *string {
	return v.Typename
}

// GetId returns CreateCustomLinkCreateCustomLinkCreateCustomLinkResultLinkCustomLink.Id, and is useful for accessing the field via an interface.
func (v *CreateCustomLinkCreateCustomLinkCreateCustomLinkResultLinkCustomLink) GetId() string {
	return v.Id
}

// GetName returns CreateCustomLinkCreateCustomLinkCreateCustomLinkResultLinkCustomLink.Name, and is useful for accessing the field via an interface.
func (v *CreateCustomLinkCreateCustomLinkCreateCustomLinkResultLinkCustomLink) GetName() string {
	return v.Name
}

// GetCreated returns CreateCustomLinkCreateCustomLinkCreateCustomLinkResultLinkCustomLink.Created, and is useful for accessing the field via an interface.
func (v *CreateCustomLinkCreateCustomLinkCreateCustomLinkResultLinkCustomLink) GetCreated() string {
	return v.Created
}

// CreateCustomLinkCreateCustomLinkCreateCustomLinkResultLinkIncreaseLink includes the requested fields of the GraphQL type IncreaseLink.
type CreateCustomLinkCreateCustomLinkCreateCustomLinkResultLinkIncreaseLink struct {
	Typename *string `json:"__typename"`
	// FRAGMENT ID of the Link.
	Id string `json:"id"`
	// Name of the Link as it appears in the Dashboard.
	Name string `json:"name"`
	// ISO-8601 timestamp when the Link was created.
	Created string `json:"created"`
}

// GetTypename returns CreateCustomLinkCreateCustomLinkCreateCustomLinkResultLinkIncreaseLink.Typename, and is useful for accessing the field via an interface.
func (v *CreateCustomLinkCreateCustomLinkCreateCustomLinkResultLinkIncreaseLink) GetTypename() *string {
	return v.Typename
}

// GetId returns CreateCustomLinkCreateCustomLinkCreateCustomLinkResultLinkIncreaseLink.Id, and is useful for accessing the field via an interface.
func (v *CreateCustomLinkCreateCustomLinkCreateCustomLinkResultLinkIncreaseLink) GetId() string {
	return v.Id
}

// GetName returns CreateCustomLinkCreateCustomLinkCreateCustomLinkResultLinkIncreaseLink.Name, and is useful for accessing the field via an interface.
func (v *CreateCustomLinkCreateCustomLinkCreateCustomLinkResultLinkIncreaseLink) GetName() string {
	return v.Name
}

// GetCreated returns CreateCustomLinkCreateCustomLinkCreateCustomLinkResultLinkIncreaseLink.Created, and is useful for accessing the field via an interface.
func (v *CreateCustomLinkCreateCustomLinkCreateCustomLinkResultLinkIncreaseLink) GetCreated() string {
	return v.Created
}

// CreateCustomLinkCreateCustomLinkCreateCustomLinkResultLinkStripeLink includes the requested fields of the GraphQL type StripeLink.
type CreateCustomLinkCreateCustomLinkCreateCustomLinkResultLinkStripeLink struct {
	Typename *string `json:"__typename"`
	// FRAGMENT ID of the Link.
	Id string `json:"id"`
	// Name of the Link as it appears in the Dashboard.
	Name string `json:"name"`
	// ISO-8601 timestamp when the Link was created.
	Created string `json:"created"`
}

// GetTypename returns CreateCustomLinkCreateCustomLinkCreateCustomLinkResultLinkStripeLink.Typename, and is useful for accessing the field via an interface.
func (v *CreateCustomLinkCreateCustomLinkCreateCustomLinkResultLinkStripeLink) GetTypename() *string {
	return v.Typename
}

// GetId returns CreateCustomLinkCreateCustomLinkCreateCustomLinkResultLinkStripeLink.Id, and is useful for accessing the field via an interface.
func (v *CreateCustomLinkCreateCustomLinkCreateCustomLinkResultLinkStripeLink) GetId() string {
	return v.Id
}

// GetName returns CreateCustomLinkCreateCustomLinkCreateCustomLinkResultLinkStripeLink.Name, and is useful for accessing the field via an interface.
func (v *CreateCustomLinkCreateCustomLinkCreateCustomLinkResultLinkStripeLink) GetName() string {
	return v.Name
}

// GetCreated returns CreateCustomLinkCreateCustomLinkCreateCustomLinkResultLinkStripeLink.Created, and is useful for accessing the field via an interface.
func (v *CreateCustomLinkCreateCustomLinkCreateCustomLinkResultLinkStripeLink) GetCreated() string {
	return v.Created
}

// CreateCustomLinkCreateCustomLinkCreateCustomLinkResultLinkUnitLink includes the requested fields of the GraphQL type UnitLink.
type CreateCustomLinkCreateCustomLinkCreateCustomLinkResultLinkUnitLink struct {
	Typename *string `json:"__typename"`
	// FRAGMENT ID of the Link.
	Id string `json:"id"`
	// Name of the Link as it appears in the Dashboard.
	Name string `json:"name"`
	// ISO-8601 timestamp when the Link was created.
	Created string `json:"created"`
}

// GetTypename returns CreateCustomLinkCreateCustomLinkCreateCustomLinkResultLinkUnitLink.Typename, and is useful for accessing the field via an interface.
func (v *CreateCustomLinkCreateCustomLinkCreateCustomLinkResultLinkUnitLink) GetTypename() *string {
	return v.Typename
}

// GetId returns CreateCustomLinkCreateCustomLinkCreateCustomLinkResultLinkUnitLink.Id, and is useful for accessing the field via an interface.
func (v *CreateCustomLinkCreateCustomLinkCreateCustomLinkResultLinkUnitLink) GetId() string {
	return v.Id
}

// GetName returns CreateCustomLinkCreateCustomLinkCreateCustomLinkResultLinkUnitLink.Name, and is useful for accessing the field via an interface.
func (v *CreateCustomLinkCreateCustomLinkCreateCustomLinkResultLinkUnitLink) GetName() string {
	return v.Name
}

// GetCreated returns CreateCustomLinkCreateCustomLinkCreateCustomLinkResultLinkUnitLink.Created, and is useful for accessing the field via an interface.
func (v *CreateCustomLinkCreateCustomLinkCreateCustomLinkResultLinkUnitLink) GetCreated() string {
	return v.Created
}

// CreateCustomLinkCreateCustomLinkInternalError includes the requested fields of the GraphQL type InternalError.
// The GraphQL type's documentation follows.
//
// Equivalent to an HTTP 5XX - something went wrong with our API.
type CreateCustomLinkCreateCustomLinkInternalError struct {
	Typename *string `json:"__typename"`
	// The HTTP status code corresponding to the error
	Code string `json:"code"`
	// The error message
	Message string `json:"message"`
}

// GetTypename returns CreateCustomLinkCreateCustomLinkInternalError.Typename, and is useful for accessing the field via an interface.
func (v *CreateCustomLinkCreateCustomLinkInternalError) GetTypename() *string { return v.Typename }

// GetCode returns CreateCustomLinkCreateCustomLinkInternalError.Code, and is useful for accessing the field via an interface.
func (v *CreateCustomLinkCreateCustomLinkInternalError) GetCode() string { return v.Code }

// GetMessage returns CreateCustomLinkCreateCustomLinkInternalError.Message, and is useful for accessing the field via an interface.
func (v *CreateCustomLinkCreateCustomLinkInternalError) GetMessage() string { return v.Message }

// CreateCustomLinkResponse is returned by CreateCustomLink on success.
type CreateCustomLinkResponse struct {
	// Custom Links let you integrate external systems that don't have native support. See [Custom Links](https://fragment.dev/docs#reconcile-transactions-link-any-system)
	CreateCustomLink CreateCustomLinkCreateCustomLinkCreateCustomLinkResponse `json:"-"`
}

// GetCreateCustomLink returns CreateCustomLinkResponse.CreateCustomLink, and is useful for accessing the field via an interface.
func (v *CreateCustomLinkResponse) GetCreateCustomLink() CreateCustomLinkCreateCustomLinkCreateCustomLinkResponse {
	return v.CreateCustomLink
}

func (v *CreateCustomLinkResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateCustomLinkResponse
		CreateCustomLink json.RawMessage `json:"createCustomLink"`
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateCustomLinkResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.CreateCustomLink
		src := firstPass.CreateCustomLink
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalCreateCustomLinkCreateCustomLinkCreateCustomLinkResponse(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal CreateCustomLinkResponse.CreateCustomLink: %w", err)
			}
		}
	}
	return nil
}

type __premarshalCreateCustomLinkResponse struct {
	CreateCustomLink json.RawMessage `json:"createCustomLink"`
}

func (v *CreateCustomLinkResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateCustomLinkResponse) __premarshalJSON() (*__premarshalCreateCustomLinkResponse, error) {
	var retval __premarshalCreateCustomLinkResponse

	{

		dst := &retval.CreateCustomLink
		src := v.CreateCustomLink
		var err error
		*dst, err = __marshalCreateCustomLinkCreateCustomLinkCreateCustomLinkResponse(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal CreateCustomLinkResponse.CreateCustomLink: %w", err)
		}
	}
	return &retval, nil
}

// CreateLedgerCreateLedgerBadRequestError includes the requested fields of the GraphQL type BadRequestError.
// The GraphQL type's documentation follows.
//
// Equivalent to an HTTP 400 - request either has missing or incorrect data
type CreateLedgerCreateLedgerBadRequestError struct {
	Typename *string `json:"__typename"`
	// The HTTP status code corresponding to the error
	Code string `json:"code"`
	// The error message
	Message string `json:"message"`
}

// GetTypename returns CreateLedgerCreateLedgerBadRequestError.Typename, and is useful for accessing the field via an interface.
func (v *CreateLedgerCreateLedgerBadRequestError) GetTypename() *string { return v.Typename }

// GetCode returns CreateLedgerCreateLedgerBadRequestError.Code, and is useful for accessing the field via an interface.
func (v *CreateLedgerCreateLedgerBadRequestError) GetCode() string { return v.Code }

// GetMessage returns CreateLedgerCreateLedgerBadRequestError.Message, and is useful for accessing the field via an interface.
func (v *CreateLedgerCreateLedgerBadRequestError) GetMessage() string { return v.Message }

// CreateLedgerCreateLedgerCreateLedgerResponse includes the requested fields of the GraphQL interface CreateLedgerResponse.
//
// CreateLedgerCreateLedgerCreateLedgerResponse is implemented by the following types:
// CreateLedgerCreateLedgerBadRequestError
// CreateLedgerCreateLedgerCreateLedgerResult
// CreateLedgerCreateLedgerInternalError
type CreateLedgerCreateLedgerCreateLedgerResponse interface {
	implementsGraphQLInterfaceCreateLedgerCreateLedgerCreateLedgerResponse()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *CreateLedgerCreateLedgerBadRequestError) implementsGraphQLInterfaceCreateLedgerCreateLedgerCreateLedgerResponse() {
}
func (v *CreateLedgerCreateLedgerCreateLedgerResult) implementsGraphQLInterfaceCreateLedgerCreateLedgerCreateLedgerResponse() {
}
func (v *CreateLedgerCreateLedgerInternalError) implementsGraphQLInterfaceCreateLedgerCreateLedgerCreateLedgerResponse() {
}

func __unmarshalCreateLedgerCreateLedgerCreateLedgerResponse(b []byte, v *CreateLedgerCreateLedgerCreateLedgerResponse) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "BadRequestError":
		*v = new(CreateLedgerCreateLedgerBadRequestError)
		return json.Unmarshal(b, *v)
	case "CreateLedgerResult":
		*v = new(CreateLedgerCreateLedgerCreateLedgerResult)
		return json.Unmarshal(b, *v)
	case "InternalError":
		*v = new(CreateLedgerCreateLedgerInternalError)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing CreateLedgerResponse.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for CreateLedgerCreateLedgerCreateLedgerResponse: "%v"`, tn.TypeName)
	}
}

func __marshalCreateLedgerCreateLedgerCreateLedgerResponse(v *CreateLedgerCreateLedgerCreateLedgerResponse) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *CreateLedgerCreateLedgerBadRequestError:
		typename = "BadRequestError"

		result := struct {
			TypeName string `json:"__typename"`
			*CreateLedgerCreateLedgerBadRequestError
		}{typename, v}
		return json.Marshal(result)
	case *CreateLedgerCreateLedgerCreateLedgerResult:
		typename = "CreateLedgerResult"

		result := struct {
			TypeName string `json:"__typename"`
			*CreateLedgerCreateLedgerCreateLedgerResult
		}{typename, v}
		return json.Marshal(result)
	case *CreateLedgerCreateLedgerInternalError:
		typename = "InternalError"

		result := struct {
			TypeName string `json:"__typename"`
			*CreateLedgerCreateLedgerInternalError
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for CreateLedgerCreateLedgerCreateLedgerResponse: "%T"`, v)
	}
}

// CreateLedgerCreateLedgerCreateLedgerResult includes the requested fields of the GraphQL type CreateLedgerResult.
type CreateLedgerCreateLedgerCreateLedgerResult struct {
	Typename *string `json:"__typename"`
	// The Ledger that was created
	Ledger CreateLedgerCreateLedgerCreateLedgerResultLedger `json:"ledger"`
	// true if this request successfully completed before and the previous response is being returned
	IsIkReplay bool `json:"isIkReplay"`
}

// GetTypename returns CreateLedgerCreateLedgerCreateLedgerResult.Typename, and is useful for accessing the field via an interface.
func (v *CreateLedgerCreateLedgerCreateLedgerResult) GetTypename() *string { return v.Typename }

// GetLedger returns CreateLedgerCreateLedgerCreateLedgerResult.Ledger, and is useful for accessing the field via an interface.
func (v *CreateLedgerCreateLedgerCreateLedgerResult) GetLedger() CreateLedgerCreateLedgerCreateLedgerResultLedger {
	return v.Ledger
}

// GetIsIkReplay returns CreateLedgerCreateLedgerCreateLedgerResult.IsIkReplay, and is useful for accessing the field via an interface.
func (v *CreateLedgerCreateLedgerCreateLedgerResult) GetIsIkReplay() bool { return v.IsIkReplay }

// CreateLedgerCreateLedgerCreateLedgerResultLedger includes the requested fields of the GraphQL type Ledger.
// The GraphQL type's documentation follows.
//
// Ledgers are databases designed for managing money
type CreateLedgerCreateLedgerCreateLedgerResultLedger struct {
	Id string `json:"id"`
	// The IK passed into the [createLedger](/api-reference#mutations-createledger) mutation. This is treated as a unique identifier for this ledger.
	Ik string `json:"ik"`
	// The name of the ledger. Can be updated with the [updateLedger](/api-reference#mutations-updateledger) mutation.
	Name    string `json:"name"`
	Created string `json:"created"`
	// Schema key associated with this ledger.
	Schema *CreateLedgerCreateLedgerCreateLedgerResultLedgerSchema `json:"schema"`
}

// GetId returns CreateLedgerCreateLedgerCreateLedgerResultLedger.Id, and is useful for accessing the field via an interface.
func (v *CreateLedgerCreateLedgerCreateLedgerResultLedger) GetId() string { return v.Id }

// GetIk returns CreateLedgerCreateLedgerCreateLedgerResultLedger.Ik, and is useful for accessing the field via an interface.
func (v *CreateLedgerCreateLedgerCreateLedgerResultLedger) GetIk() string { return v.Ik }

// GetName returns CreateLedgerCreateLedgerCreateLedgerResultLedger.Name, and is useful for accessing the field via an interface.
func (v *CreateLedgerCreateLedgerCreateLedgerResultLedger) GetName() string { return v.Name }

// GetCreated returns CreateLedgerCreateLedgerCreateLedgerResultLedger.Created, and is useful for accessing the field via an interface.
func (v *CreateLedgerCreateLedgerCreateLedgerResultLedger) GetCreated() string { return v.Created }

// GetSchema returns CreateLedgerCreateLedgerCreateLedgerResultLedger.Schema, and is useful for accessing the field via an interface.
func (v *CreateLedgerCreateLedgerCreateLedgerResultLedger) GetSchema() *CreateLedgerCreateLedgerCreateLedgerResultLedgerSchema {
	return v.Schema
}

// CreateLedgerCreateLedgerCreateLedgerResultLedgerSchema includes the requested fields of the GraphQL type Schema.
type CreateLedgerCreateLedgerCreateLedgerResultLedgerSchema struct {
	// The identifier for a Schema.
	// `key` is unique to a Workspace.
	Key string `json:"key"`
}

// GetKey returns CreateLedgerCreateLedgerCreateLedgerResultLedgerSchema.Key, and is useful for accessing the field via an interface.
func (v *CreateLedgerCreateLedgerCreateLedgerResultLedgerSchema) GetKey() string { return v.Key }

// CreateLedgerCreateLedgerInternalError includes the requested fields of the GraphQL type InternalError.
// The GraphQL type's documentation follows.
//
// Equivalent to an HTTP 5XX - something went wrong with our API.
type CreateLedgerCreateLedgerInternalError struct {
	Typename *string `json:"__typename"`
	// The HTTP status code corresponding to the error
	Code string `json:"code"`
	// The error message
	Message string `json:"message"`
}

// GetTypename returns CreateLedgerCreateLedgerInternalError.Typename, and is useful for accessing the field via an interface.
func (v *CreateLedgerCreateLedgerInternalError) GetTypename() *string { return v.Typename }

// GetCode returns CreateLedgerCreateLedgerInternalError.Code, and is useful for accessing the field via an interface.
func (v *CreateLedgerCreateLedgerInternalError) GetCode() string { return v.Code }

// GetMessage returns CreateLedgerCreateLedgerInternalError.Message, and is useful for accessing the field via an interface.
func (v *CreateLedgerCreateLedgerInternalError) GetMessage() string { return v.Message }

type CreateLedgerInput struct {
	// Use this field to specify a timezone for queries to your Ledger.
	//
	// When aggregating balances, all transactions within a 24 hour period starting at midnight UTC are included in each day.
	// You can specify a different starting hour for balances. For example, use "-08:00" to align balances with Pacific Standard Time.
	// Balance queries would then consider the start of each local day to be at 8am UTC the next day in UTC.
	// The default timezone is UTC.
	BalanceUTCOffset *string      `json:"balanceUTCOffset"`
	Name             string       `json:"name"`
	Type             *LedgerTypes `json:"type"`
}

// GetBalanceUTCOffset returns CreateLedgerInput.BalanceUTCOffset, and is useful for accessing the field via an interface.
func (v *CreateLedgerInput) GetBalanceUTCOffset() *string { return v.BalanceUTCOffset }

// GetName returns CreateLedgerInput.Name, and is useful for accessing the field via an interface.
func (v *CreateLedgerInput) GetName() string { return v.Name }

// GetType returns CreateLedgerInput.Type, and is useful for accessing the field via an interface.
func (v *CreateLedgerInput) GetType() *LedgerTypes { return v.Type }

// CreateLedgerResponse is returned by CreateLedger on success.
type CreateLedgerResponse struct {
	// Creates a Ledger.
	CreateLedger CreateLedgerCreateLedgerCreateLedgerResponse `json:"-"`
}

// GetCreateLedger returns CreateLedgerResponse.CreateLedger, and is useful for accessing the field via an interface.
func (v *CreateLedgerResponse) GetCreateLedger() CreateLedgerCreateLedgerCreateLedgerResponse {
	return v.CreateLedger
}

func (v *CreateLedgerResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateLedgerResponse
		CreateLedger json.RawMessage `json:"createLedger"`
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateLedgerResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.CreateLedger
		src := firstPass.CreateLedger
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalCreateLedgerCreateLedgerCreateLedgerResponse(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal CreateLedgerResponse.CreateLedger: %w", err)
			}
		}
	}
	return nil
}

type __premarshalCreateLedgerResponse struct {
	CreateLedger json.RawMessage `json:"createLedger"`
}

func (v *CreateLedgerResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateLedgerResponse) __premarshalJSON() (*__premarshalCreateLedgerResponse, error) {
	var retval __premarshalCreateLedgerResponse

	{

		dst := &retval.CreateLedger
		src := v.CreateLedger
		var err error
		*dst, err = __marshalCreateLedgerCreateLedgerCreateLedgerResponse(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal CreateLedgerResponse.CreateLedger: %w", err)
		}
	}
	return &retval, nil
}

type CurrencyCode string

const (
	CurrencyCodeAave    CurrencyCode = "AAVE"
	CurrencyCodeAda     CurrencyCode = "ADA"
	CurrencyCodeAed     CurrencyCode = "AED"
	CurrencyCodeAfn     CurrencyCode = "AFN"
	CurrencyCodeAll     CurrencyCode = "ALL"
	CurrencyCodeAmd     CurrencyCode = "AMD"
	CurrencyCodeAng     CurrencyCode = "ANG"
	CurrencyCodeAoa     CurrencyCode = "AOA"
	CurrencyCodeArs     CurrencyCode = "ARS"
	CurrencyCodeAud     CurrencyCode = "AUD"
	CurrencyCodeAwg     CurrencyCode = "AWG"
	CurrencyCodeAzn     CurrencyCode = "AZN"
	CurrencyCodeBam     CurrencyCode = "BAM"
	CurrencyCodeBbd     CurrencyCode = "BBD"
	CurrencyCodeBch     CurrencyCode = "BCH"
	CurrencyCodeBdt     CurrencyCode = "BDT"
	CurrencyCodeBgn     CurrencyCode = "BGN"
	CurrencyCodeBhd     CurrencyCode = "BHD"
	CurrencyCodeBif     CurrencyCode = "BIF"
	CurrencyCodeBmd     CurrencyCode = "BMD"
	CurrencyCodeBnd     CurrencyCode = "BND"
	CurrencyCodeBob     CurrencyCode = "BOB"
	CurrencyCodeBrl     CurrencyCode = "BRL"
	CurrencyCodeBsd     CurrencyCode = "BSD"
	CurrencyCodeBtc     CurrencyCode = "BTC"
	CurrencyCodeBtn     CurrencyCode = "BTN"
	CurrencyCodeBwp     CurrencyCode = "BWP"
	CurrencyCodeByr     CurrencyCode = "BYR"
	CurrencyCodeBzd     CurrencyCode = "BZD"
	CurrencyCodeCad     CurrencyCode = "CAD"
	CurrencyCodeCdf     CurrencyCode = "CDF"
	CurrencyCodeChf     CurrencyCode = "CHF"
	CurrencyCodeClp     CurrencyCode = "CLP"
	CurrencyCodeCny     CurrencyCode = "CNY"
	CurrencyCodeCop     CurrencyCode = "COP"
	CurrencyCodeCrc     CurrencyCode = "CRC"
	CurrencyCodeCuc     CurrencyCode = "CUC"
	CurrencyCodeCup     CurrencyCode = "CUP"
	CurrencyCodeCustom  CurrencyCode = "CUSTOM"
	CurrencyCodeCve     CurrencyCode = "CVE"
	CurrencyCodeCzk     CurrencyCode = "CZK"
	CurrencyCodeDai     CurrencyCode = "DAI"
	CurrencyCodeDjf     CurrencyCode = "DJF"
	CurrencyCodeDkk     CurrencyCode = "DKK"
	CurrencyCodeDop     CurrencyCode = "DOP"
	CurrencyCodeDzd     CurrencyCode = "DZD"
	CurrencyCodeEgp     CurrencyCode = "EGP"
	CurrencyCodeErn     CurrencyCode = "ERN"
	CurrencyCodeEtb     CurrencyCode = "ETB"
	CurrencyCodeEth     CurrencyCode = "ETH"
	CurrencyCodeEur     CurrencyCode = "EUR"
	CurrencyCodeFjd     CurrencyCode = "FJD"
	CurrencyCodeFkp     CurrencyCode = "FKP"
	CurrencyCodeGbp     CurrencyCode = "GBP"
	CurrencyCodeGel     CurrencyCode = "GEL"
	CurrencyCodeGgp     CurrencyCode = "GGP"
	CurrencyCodeGhs     CurrencyCode = "GHS"
	CurrencyCodeGip     CurrencyCode = "GIP"
	CurrencyCodeGmd     CurrencyCode = "GMD"
	CurrencyCodeGnf     CurrencyCode = "GNF"
	CurrencyCodeGtq     CurrencyCode = "GTQ"
	CurrencyCodeGyd     CurrencyCode = "GYD"
	CurrencyCodeHkd     CurrencyCode = "HKD"
	CurrencyCodeHnl     CurrencyCode = "HNL"
	CurrencyCodeHrk     CurrencyCode = "HRK"
	CurrencyCodeHtg     CurrencyCode = "HTG"
	CurrencyCodeHuf     CurrencyCode = "HUF"
	CurrencyCodeIdr     CurrencyCode = "IDR"
	CurrencyCodeIls     CurrencyCode = "ILS"
	CurrencyCodeImp     CurrencyCode = "IMP"
	CurrencyCodeInr     CurrencyCode = "INR"
	CurrencyCodeIqd     CurrencyCode = "IQD"
	CurrencyCodeIrr     CurrencyCode = "IRR"
	CurrencyCodeIsk     CurrencyCode = "ISK"
	CurrencyCodeJmd     CurrencyCode = "JMD"
	CurrencyCodeJod     CurrencyCode = "JOD"
	CurrencyCodeJpy     CurrencyCode = "JPY"
	CurrencyCodeKes     CurrencyCode = "KES"
	CurrencyCodeKgs     CurrencyCode = "KGS"
	CurrencyCodeKhr     CurrencyCode = "KHR"
	CurrencyCodeKmf     CurrencyCode = "KMF"
	CurrencyCodeKpw     CurrencyCode = "KPW"
	CurrencyCodeKrw     CurrencyCode = "KRW"
	CurrencyCodeKwd     CurrencyCode = "KWD"
	CurrencyCodeKyd     CurrencyCode = "KYD"
	CurrencyCodeKzt     CurrencyCode = "KZT"
	CurrencyCodeLak     CurrencyCode = "LAK"
	CurrencyCodeLbp     CurrencyCode = "LBP"
	CurrencyCodeLink    CurrencyCode = "LINK"
	CurrencyCodeLkr     CurrencyCode = "LKR"
	CurrencyCodeLogical CurrencyCode = "LOGICAL"
	CurrencyCodeLrd     CurrencyCode = "LRD"
	CurrencyCodeLsl     CurrencyCode = "LSL"
	CurrencyCodeLtc     CurrencyCode = "LTC"
	CurrencyCodeLyd     CurrencyCode = "LYD"
	CurrencyCodeMad     CurrencyCode = "MAD"
	CurrencyCodeMatic   CurrencyCode = "MATIC"
	CurrencyCodeMdl     CurrencyCode = "MDL"
	CurrencyCodeMga     CurrencyCode = "MGA"
	CurrencyCodeMkd     CurrencyCode = "MKD"
	CurrencyCodeMmk     CurrencyCode = "MMK"
	CurrencyCodeMnt     CurrencyCode = "MNT"
	CurrencyCodeMop     CurrencyCode = "MOP"
	CurrencyCodeMur     CurrencyCode = "MUR"
	CurrencyCodeMvr     CurrencyCode = "MVR"
	CurrencyCodeMwk     CurrencyCode = "MWK"
	CurrencyCodeMxn     CurrencyCode = "MXN"
	CurrencyCodeMyr     CurrencyCode = "MYR"
	CurrencyCodeMzn     CurrencyCode = "MZN"
	CurrencyCodeNad     CurrencyCode = "NAD"
	CurrencyCodeNgn     CurrencyCode = "NGN"
	CurrencyCodeNio     CurrencyCode = "NIO"
	CurrencyCodeNok     CurrencyCode = "NOK"
	CurrencyCodeNpr     CurrencyCode = "NPR"
	CurrencyCodeNzd     CurrencyCode = "NZD"
	CurrencyCodeOmr     CurrencyCode = "OMR"
	CurrencyCodePab     CurrencyCode = "PAB"
	CurrencyCodePen     CurrencyCode = "PEN"
	CurrencyCodePgk     CurrencyCode = "PGK"
	CurrencyCodePhp     CurrencyCode = "PHP"
	CurrencyCodePkr     CurrencyCode = "PKR"
	CurrencyCodePln     CurrencyCode = "PLN"
	CurrencyCodePts     CurrencyCode = "PTS"
	CurrencyCodePyg     CurrencyCode = "PYG"
	CurrencyCodeQar     CurrencyCode = "QAR"
	CurrencyCodeRon     CurrencyCode = "RON"
	CurrencyCodeRsd     CurrencyCode = "RSD"
	CurrencyCodeRub     CurrencyCode = "RUB"
	CurrencyCodeRwf     CurrencyCode = "RWF"
	CurrencyCodeSar     CurrencyCode = "SAR"
	CurrencyCodeSbd     CurrencyCode = "SBD"
	CurrencyCodeScr     CurrencyCode = "SCR"
	CurrencyCodeSdg     CurrencyCode = "SDG"
	CurrencyCodeSek     CurrencyCode = "SEK"
	CurrencyCodeSgd     CurrencyCode = "SGD"
	CurrencyCodeShp     CurrencyCode = "SHP"
	CurrencyCodeSll     CurrencyCode = "SLL"
	CurrencyCodeSol     CurrencyCode = "SOL"
	CurrencyCodeSos     CurrencyCode = "SOS"
	CurrencyCodeSpl     CurrencyCode = "SPL"
	CurrencyCodeSrd     CurrencyCode = "SRD"
	CurrencyCodeStn     CurrencyCode = "STN"
	CurrencyCodeSvc     CurrencyCode = "SVC"
	CurrencyCodeSyp     CurrencyCode = "SYP"
	CurrencyCodeSzl     CurrencyCode = "SZL"
	CurrencyCodeThb     CurrencyCode = "THB"
	CurrencyCodeTjs     CurrencyCode = "TJS"
	CurrencyCodeTmt     CurrencyCode = "TMT"
	CurrencyCodeTnd     CurrencyCode = "TND"
	CurrencyCodeTop     CurrencyCode = "TOP"
	CurrencyCodeTry     CurrencyCode = "TRY"
	CurrencyCodeTtd     CurrencyCode = "TTD"
	CurrencyCodeTvd     CurrencyCode = "TVD"
	CurrencyCodeTwd     CurrencyCode = "TWD"
	CurrencyCodeTzs     CurrencyCode = "TZS"
	CurrencyCodeUah     CurrencyCode = "UAH"
	CurrencyCodeUgx     CurrencyCode = "UGX"
	CurrencyCodeUni     CurrencyCode = "UNI"
	CurrencyCodeUsd     CurrencyCode = "USD"
	CurrencyCodeUsdc    CurrencyCode = "USDC"
	CurrencyCodeUsdt    CurrencyCode = "USDT"
	CurrencyCodeUyu     CurrencyCode = "UYU"
	CurrencyCodeUzs     CurrencyCode = "UZS"
	CurrencyCodeVef     CurrencyCode = "VEF"
	CurrencyCodeVnd     CurrencyCode = "VND"
	CurrencyCodeVuv     CurrencyCode = "VUV"
	CurrencyCodeWst     CurrencyCode = "WST"
	CurrencyCodeXaf     CurrencyCode = "XAF"
	CurrencyCodeXcd     CurrencyCode = "XCD"
	CurrencyCodeXlm     CurrencyCode = "XLM"
	CurrencyCodeXof     CurrencyCode = "XOF"
	CurrencyCodeXpf     CurrencyCode = "XPF"
	CurrencyCodeYer     CurrencyCode = "YER"
	CurrencyCodeZar     CurrencyCode = "ZAR"
	CurrencyCodeZmw     CurrencyCode = "ZMW"
)

type CurrencyMatchInput struct {
	// The currency code. This is an [enum type](https://fragment.dev/api-reference#types-scalars-and-enums-currencycode).
	Code CurrencyCode `json:"code"`
	// The ID for a custom currency. This is specified when creating the custom currency using the [createCustomCurrency](https://fragment.dev/api-reference#mutations-createcustomcurrency) mutation.
	CustomCurrencyId *string `json:"customCurrencyId"`
}

// GetCode returns CurrencyMatchInput.Code, and is useful for accessing the field via an interface.
func (v *CurrencyMatchInput) GetCode() CurrencyCode { return v.Code }

// GetCustomCurrencyId returns CurrencyMatchInput.CustomCurrencyId, and is useful for accessing the field via an interface.
func (v *CurrencyMatchInput) GetCustomCurrencyId() *string { return v.CustomCurrencyId }

// Defines the currency handling of a LedgerAccount, which can either be restricted to a single currency or allow multiple currencies.
type CurrencyMode string

const (
	CurrencyModeMulti  CurrencyMode = "multi"
	CurrencyModeSingle CurrencyMode = "single"
)

type CustomAccountInput struct {
	// The currency of this external account. If this is not set, the workspace level default is used. 'currency' cannot be set if 'currencyMode' is 'multi'.
	Currency *CurrencyMatchInput `json:"currency"`
	// The currency mode of this external account. If set to multi, creates a multi-currency account.
	CurrencyMode *CurrencyMode `json:"currencyMode"`
	// The ID of this account at the external system. This is used as the idempotency key, within the scope of its Custom Link.
	ExternalId string `json:"externalId"`
	// The name of the account at the external system.
	Name string `json:"name"`
}

// GetCurrency returns CustomAccountInput.Currency, and is useful for accessing the field via an interface.
func (v *CustomAccountInput) GetCurrency() *CurrencyMatchInput { return v.Currency }

// GetCurrencyMode returns CustomAccountInput.CurrencyMode, and is useful for accessing the field via an interface.
func (v *CustomAccountInput) GetCurrencyMode() *CurrencyMode { return v.CurrencyMode }

// GetExternalId returns CustomAccountInput.ExternalId, and is useful for accessing the field via an interface.
func (v *CustomAccountInput) GetExternalId() string { return v.ExternalId }

// GetName returns CustomAccountInput.Name, and is useful for accessing the field via an interface.
func (v *CustomAccountInput) GetName() string { return v.Name }

type CustomTxInput struct {
	Account ExternalAccountMatchInput `json:"account"`
	Amount  string                    `json:"amount"`
	// The currency of this tx. Should be set for multi-currency accounts.
	Currency    *CurrencyMatchInput `json:"currency"`
	Description string              `json:"description"`
	// The ID of this tx at the external system. This is used as the idempotency key, within the scope of its Custom Account.
	ExternalId string `json:"externalId"`
	Posted     string `json:"posted"`
}

// GetAccount returns CustomTxInput.Account, and is useful for accessing the field via an interface.
func (v *CustomTxInput) GetAccount() ExternalAccountMatchInput { return v.Account }

// GetAmount returns CustomTxInput.Amount, and is useful for accessing the field via an interface.
func (v *CustomTxInput) GetAmount() string { return v.Amount }

// GetCurrency returns CustomTxInput.Currency, and is useful for accessing the field via an interface.
func (v *CustomTxInput) GetCurrency() *CurrencyMatchInput { return v.Currency }

// GetDescription returns CustomTxInput.Description, and is useful for accessing the field via an interface.
func (v *CustomTxInput) GetDescription() string { return v.Description }

// GetExternalId returns CustomTxInput.ExternalId, and is useful for accessing the field via an interface.
func (v *CustomTxInput) GetExternalId() string { return v.ExternalId }

// GetPosted returns CustomTxInput.Posted, and is useful for accessing the field via an interface.
func (v *CustomTxInput) GetPosted() string { return v.Posted }

type DateFilter struct {
	EqualTo *string  `json:"equalTo"`
	In      []string `json:"in"`
}

// GetEqualTo returns DateFilter.EqualTo, and is useful for accessing the field via an interface.
func (v *DateFilter) GetEqualTo() *string { return v.EqualTo }

// GetIn returns DateFilter.In, and is useful for accessing the field via an interface.
func (v *DateFilter) GetIn() []string { return v.In }

// Filters a timestamp field between two moments in time
type DateTimeFilter struct {
	// The timestamp value must be after this moment. Specified in ISO 8601 format e.g "1968-01-01T16:45:00Z"
	After *string `json:"after"`
	// The timestamp value must be before this moment. Specified in ISO 8601 format e.g "1968-01-01T16:45:00Z"
	Before *string `json:"before"`
}

// GetAfter returns DateTimeFilter.After, and is useful for accessing the field via an interface.
func (v *DateTimeFilter) GetAfter() *string { return v.After }

// GetBefore returns DateTimeFilter.Before, and is useful for accessing the field via an interface.
func (v *DateTimeFilter) GetBefore() *string { return v.Before }

// Specify an External Account by using `id`, or  `linkId` and `externalId`.
type ExternalAccountMatchInput struct {
	// The external system's ID of the External Account. If this is specified, `linkId` is required. `id` is optional, but will be validated if provided.
	ExternalId *string `json:"externalId"`
	// The FRAGMENT ID of the External Account. If this is specified, both `linkId` and `externalId` are optional, but will be validated if provided.
	Id *string `json:"id"`
	// The FRAGMENT ID of the Link the External Account is in. If this is specified, `externalId` is required. `id` is optional, but will be validated if provided.
	LinkId *string `json:"linkId"`
}

// GetExternalId returns ExternalAccountMatchInput.ExternalId, and is useful for accessing the field via an interface.
func (v *ExternalAccountMatchInput) GetExternalId() *string { return v.ExternalId }

// GetId returns ExternalAccountMatchInput.Id, and is useful for accessing the field via an interface.
func (v *ExternalAccountMatchInput) GetId() *string { return v.Id }

// GetLinkId returns ExternalAccountMatchInput.LinkId, and is useful for accessing the field via an interface.
func (v *ExternalAccountMatchInput) GetLinkId() *string { return v.LinkId }

// GetLedgerAccountBalanceLedgerAccount includes the requested fields of the GraphQL type LedgerAccount.
// The GraphQL type's documentation follows.
//
// A ledger account is a container for money
type GetLedgerAccountBalanceLedgerAccount struct {
	Id string `json:"id"`
	// The unique Path of the ledger account. This is a slash-delimited string containing the location of an account in its chart of accounts.
	// For accounts created with a schema, this will be composed of account keys. Else, for accounts created with the createLedgerAccounts API,
	// this will be composed of the IKs of an account and its ancestors.
	Path string `json:"path"`
	// Total of all lines in this ledger account, excluding all child ledger accounts
	OwnBalance string `json:"ownBalance"`
}

// GetId returns GetLedgerAccountBalanceLedgerAccount.Id, and is useful for accessing the field via an interface.
func (v *GetLedgerAccountBalanceLedgerAccount) GetId() string { return v.Id }

// GetPath returns GetLedgerAccountBalanceLedgerAccount.Path, and is useful for accessing the field via an interface.
func (v *GetLedgerAccountBalanceLedgerAccount) GetPath() string { return v.Path }

// GetOwnBalance returns GetLedgerAccountBalanceLedgerAccount.OwnBalance, and is useful for accessing the field via an interface.
func (v *GetLedgerAccountBalanceLedgerAccount) GetOwnBalance() string { return v.OwnBalance }

// GetLedgerAccountBalanceResponse is returned by GetLedgerAccountBalance on success.
type GetLedgerAccountBalanceResponse struct {
	// Get a Ledger Account by ID
	LedgerAccount *GetLedgerAccountBalanceLedgerAccount `json:"ledgerAccount"`
}

// GetLedgerAccount returns GetLedgerAccountBalanceResponse.LedgerAccount, and is useful for accessing the field via an interface.
func (v *GetLedgerAccountBalanceResponse) GetLedgerAccount() *GetLedgerAccountBalanceLedgerAccount {
	return v.LedgerAccount
}

// GetLedgerAccountLinesLedgerAccount includes the requested fields of the GraphQL type LedgerAccount.
// The GraphQL type's documentation follows.
//
// A ledger account is a container for money
type GetLedgerAccountLinesLedgerAccount struct {
	Id string `json:"id"`
	// The unique Path of the ledger account. This is a slash-delimited string containing the location of an account in its chart of accounts.
	// For accounts created with a schema, this will be composed of account keys. Else, for accounts created with the createLedgerAccounts API,
	// this will be composed of the IKs of an account and its ancestors.
	Path string `json:"path"`
	// List Ledger Lines in this account, sorted by `posted` in reverse chronological order. Does not include Ledger Lines from child Ledger Accounts.
	Lines GetLedgerAccountLinesLedgerAccountLinesLedgerLinesConnection `json:"lines"`
}

// GetId returns GetLedgerAccountLinesLedgerAccount.Id, and is useful for accessing the field via an interface.
func (v *GetLedgerAccountLinesLedgerAccount) GetId() string { return v.Id }

// GetPath returns GetLedgerAccountLinesLedgerAccount.Path, and is useful for accessing the field via an interface.
func (v *GetLedgerAccountLinesLedgerAccount) GetPath() string { return v.Path }

// GetLines returns GetLedgerAccountLinesLedgerAccount.Lines, and is useful for accessing the field via an interface.
func (v *GetLedgerAccountLinesLedgerAccount) GetLines() GetLedgerAccountLinesLedgerAccountLinesLedgerLinesConnection {
	return v.Lines
}

// GetLedgerAccountLinesLedgerAccountLinesLedgerLinesConnection includes the requested fields of the GraphQL type LedgerLinesConnection.
// The GraphQL type's documentation follows.
//
// A paginated list of Ledger Lines
type GetLedgerAccountLinesLedgerAccountLinesLedgerLinesConnection struct {
	// The current page of results
	Nodes []GetLedgerAccountLinesLedgerAccountLinesLedgerLinesConnectionNodesLedgerLine `json:"nodes"`
	// The [pagination info](https://fragment.dev/api-reference#types-connection-types-pageinfo) for this list
	PageInfo GetLedgerAccountLinesLedgerAccountLinesLedgerLinesConnectionPageInfo `json:"pageInfo"`
}

// GetNodes returns GetLedgerAccountLinesLedgerAccountLinesLedgerLinesConnection.Nodes, and is useful for accessing the field via an interface.
func (v *GetLedgerAccountLinesLedgerAccountLinesLedgerLinesConnection) GetNodes() []GetLedgerAccountLinesLedgerAccountLinesLedgerLinesConnectionNodesLedgerLine {
	return v.Nodes
}

// GetPageInfo returns GetLedgerAccountLinesLedgerAccountLinesLedgerLinesConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *GetLedgerAccountLinesLedgerAccountLinesLedgerLinesConnection) GetPageInfo() GetLedgerAccountLinesLedgerAccountLinesLedgerLinesConnectionPageInfo {
	return v.PageInfo
}

// GetLedgerAccountLinesLedgerAccountLinesLedgerLinesConnectionNodesLedgerLine includes the requested fields of the GraphQL type LedgerLine.
type GetLedgerAccountLinesLedgerAccountLinesLedgerLinesConnectionNodesLedgerLine struct {
	Id string `json:"id"`
	// ISO-8601 timestamp this LedgerLine posted to its LedgerAccount
	Posted *string `json:"posted"`
	// ISO-8601 timestamp this LedgerLine was created in Fragment
	Created *string `json:"created"`
	// How much this line's LedgerAccount's balance changed in integer cents  (i.e. in USD 100 is 1 dollar, 100 cents)
	Amount string `json:"amount"`
	// Description of this LedgerLine
	Description *string `json:"description"`
}

// GetId returns GetLedgerAccountLinesLedgerAccountLinesLedgerLinesConnectionNodesLedgerLine.Id, and is useful for accessing the field via an interface.
func (v *GetLedgerAccountLinesLedgerAccountLinesLedgerLinesConnectionNodesLedgerLine) GetId() string {
	return v.Id
}

// GetPosted returns GetLedgerAccountLinesLedgerAccountLinesLedgerLinesConnectionNodesLedgerLine.Posted, and is useful for accessing the field via an interface.
func (v *GetLedgerAccountLinesLedgerAccountLinesLedgerLinesConnectionNodesLedgerLine) GetPosted() *string {
	return v.Posted
}

// GetCreated returns GetLedgerAccountLinesLedgerAccountLinesLedgerLinesConnectionNodesLedgerLine.Created, and is useful for accessing the field via an interface.
func (v *GetLedgerAccountLinesLedgerAccountLinesLedgerLinesConnectionNodesLedgerLine) GetCreated() *string {
	return v.Created
}

// GetAmount returns GetLedgerAccountLinesLedgerAccountLinesLedgerLinesConnectionNodesLedgerLine.Amount, and is useful for accessing the field via an interface.
func (v *GetLedgerAccountLinesLedgerAccountLinesLedgerLinesConnectionNodesLedgerLine) GetAmount() string {
	return v.Amount
}

// GetDescription returns GetLedgerAccountLinesLedgerAccountLinesLedgerLinesConnectionNodesLedgerLine.Description, and is useful for accessing the field via an interface.
func (v *GetLedgerAccountLinesLedgerAccountLinesLedgerLinesConnectionNodesLedgerLine) GetDescription() *string {
	return v.Description
}

// GetLedgerAccountLinesLedgerAccountLinesLedgerLinesConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// An object containing [pagination](https://fragment.dev/docs#query-data-basics-pagination) details.
type GetLedgerAccountLinesLedgerAccountLinesLedgerLinesConnectionPageInfo struct {
	HasNextPage     bool    `json:"hasNextPage"`
	EndCursor       *string `json:"endCursor"`
	HasPreviousPage bool    `json:"hasPreviousPage"`
	StartCursor     *string `json:"startCursor"`
}

// GetHasNextPage returns GetLedgerAccountLinesLedgerAccountLinesLedgerLinesConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *GetLedgerAccountLinesLedgerAccountLinesLedgerLinesConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// GetEndCursor returns GetLedgerAccountLinesLedgerAccountLinesLedgerLinesConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *GetLedgerAccountLinesLedgerAccountLinesLedgerLinesConnectionPageInfo) GetEndCursor() *string {
	return v.EndCursor
}

// GetHasPreviousPage returns GetLedgerAccountLinesLedgerAccountLinesLedgerLinesConnectionPageInfo.HasPreviousPage, and is useful for accessing the field via an interface.
func (v *GetLedgerAccountLinesLedgerAccountLinesLedgerLinesConnectionPageInfo) GetHasPreviousPage() bool {
	return v.HasPreviousPage
}

// GetStartCursor returns GetLedgerAccountLinesLedgerAccountLinesLedgerLinesConnectionPageInfo.StartCursor, and is useful for accessing the field via an interface.
func (v *GetLedgerAccountLinesLedgerAccountLinesLedgerLinesConnectionPageInfo) GetStartCursor() *string {
	return v.StartCursor
}

// GetLedgerAccountLinesResponse is returned by GetLedgerAccountLines on success.
type GetLedgerAccountLinesResponse struct {
	// Get a Ledger Account by ID
	LedgerAccount *GetLedgerAccountLinesLedgerAccount `json:"ledgerAccount"`
}

// GetLedgerAccount returns GetLedgerAccountLinesResponse.LedgerAccount, and is useful for accessing the field via an interface.
func (v *GetLedgerAccountLinesResponse) GetLedgerAccount() *GetLedgerAccountLinesLedgerAccount {
	return v.LedgerAccount
}

// GetLedgerEntryLedgerEntry includes the requested fields of the GraphQL type LedgerEntry.
type GetLedgerEntryLedgerEntry struct {
	// The ID of this LedgerEntry.
	Id string `json:"id"`
	// The idempotency key used to post this ledger entry
	Ik string `json:"ik"`
	// ISO-8601 timestamp this LedgerEntry posted to its Ledger.
	Posted string `json:"posted"`
	// ISO-8601 timestamp this LedgerEntry was created in Fragment.
	Created string `json:"created"`
	// Description posted for this Ledger Entry.
	Description *string `json:"description"`
	// Lines posted in this Ledger Entry.
	Lines GetLedgerEntryLedgerEntryLinesLedgerLinesConnection `json:"lines"`
}

// GetId returns GetLedgerEntryLedgerEntry.Id, and is useful for accessing the field via an interface.
func (v *GetLedgerEntryLedgerEntry) GetId() string { return v.Id }

// GetIk returns GetLedgerEntryLedgerEntry.Ik, and is useful for accessing the field via an interface.
func (v *GetLedgerEntryLedgerEntry) GetIk() string { return v.Ik }

// GetPosted returns GetLedgerEntryLedgerEntry.Posted, and is useful for accessing the field via an interface.
func (v *GetLedgerEntryLedgerEntry) GetPosted() string { return v.Posted }

// GetCreated returns GetLedgerEntryLedgerEntry.Created, and is useful for accessing the field via an interface.
func (v *GetLedgerEntryLedgerEntry) GetCreated() string { return v.Created }

// GetDescription returns GetLedgerEntryLedgerEntry.Description, and is useful for accessing the field via an interface.
func (v *GetLedgerEntryLedgerEntry) GetDescription() *string { return v.Description }

// GetLines returns GetLedgerEntryLedgerEntry.Lines, and is useful for accessing the field via an interface.
func (v *GetLedgerEntryLedgerEntry) GetLines() GetLedgerEntryLedgerEntryLinesLedgerLinesConnection {
	return v.Lines
}

// GetLedgerEntryLedgerEntryLinesLedgerLinesConnection includes the requested fields of the GraphQL type LedgerLinesConnection.
// The GraphQL type's documentation follows.
//
// A paginated list of Ledger Lines
type GetLedgerEntryLedgerEntryLinesLedgerLinesConnection struct {
	// The current page of results
	Nodes []GetLedgerEntryLedgerEntryLinesLedgerLinesConnectionNodesLedgerLine `json:"nodes"`
}

// GetNodes returns GetLedgerEntryLedgerEntryLinesLedgerLinesConnection.Nodes, and is useful for accessing the field via an interface.
func (v *GetLedgerEntryLedgerEntryLinesLedgerLinesConnection) GetNodes() []GetLedgerEntryLedgerEntryLinesLedgerLinesConnectionNodesLedgerLine {
	return v.Nodes
}

// GetLedgerEntryLedgerEntryLinesLedgerLinesConnectionNodesLedgerLine includes the requested fields of the GraphQL type LedgerLine.
type GetLedgerEntryLedgerEntryLinesLedgerLinesConnectionNodesLedgerLine struct {
	Id string `json:"id"`
	// How much this line's LedgerAccount's balance changed in integer cents  (i.e. in USD 100 is 1 dollar, 100 cents)
	Amount string `json:"amount"`
	// LedgerAccount that contains this line
	Account GetLedgerEntryLedgerEntryLinesLedgerLinesConnectionNodesLedgerLineAccountLedgerAccount `json:"account"`
}

// GetId returns GetLedgerEntryLedgerEntryLinesLedgerLinesConnectionNodesLedgerLine.Id, and is useful for accessing the field via an interface.
func (v *GetLedgerEntryLedgerEntryLinesLedgerLinesConnectionNodesLedgerLine) GetId() string {
	return v.Id
}

// GetAmount returns GetLedgerEntryLedgerEntryLinesLedgerLinesConnectionNodesLedgerLine.Amount, and is useful for accessing the field via an interface.
func (v *GetLedgerEntryLedgerEntryLinesLedgerLinesConnectionNodesLedgerLine) GetAmount() string {
	return v.Amount
}

// GetAccount returns GetLedgerEntryLedgerEntryLinesLedgerLinesConnectionNodesLedgerLine.Account, and is useful for accessing the field via an interface.
func (v *GetLedgerEntryLedgerEntryLinesLedgerLinesConnectionNodesLedgerLine) GetAccount() GetLedgerEntryLedgerEntryLinesLedgerLinesConnectionNodesLedgerLineAccountLedgerAccount {
	return v.Account
}

// GetLedgerEntryLedgerEntryLinesLedgerLinesConnectionNodesLedgerLineAccountLedgerAccount includes the requested fields of the GraphQL type LedgerAccount.
// The GraphQL type's documentation follows.
//
// A ledger account is a container for money
type GetLedgerEntryLedgerEntryLinesLedgerLinesConnectionNodesLedgerLineAccountLedgerAccount struct {
	// The unique Path of the ledger account. This is a slash-delimited string containing the location of an account in its chart of accounts.
	// For accounts created with a schema, this will be composed of account keys. Else, for accounts created with the createLedgerAccounts API,
	// this will be composed of the IKs of an account and its ancestors.
	Path string `json:"path"`
}

// GetPath returns GetLedgerEntryLedgerEntryLinesLedgerLinesConnectionNodesLedgerLineAccountLedgerAccount.Path, and is useful for accessing the field via an interface.
func (v *GetLedgerEntryLedgerEntryLinesLedgerLinesConnectionNodesLedgerLineAccountLedgerAccount) GetPath() string {
	return v.Path
}

// GetLedgerEntryResponse is returned by GetLedgerEntry on success.
type GetLedgerEntryResponse struct {
	// Get Ledger Entry by ID.
	LedgerEntry *GetLedgerEntryLedgerEntry `json:"ledgerEntry"`
}

// GetLedgerEntry returns GetLedgerEntryResponse.LedgerEntry, and is useful for accessing the field via an interface.
func (v *GetLedgerEntryResponse) GetLedgerEntry() *GetLedgerEntryLedgerEntry { return v.LedgerEntry }

// GetLedgerLedger includes the requested fields of the GraphQL type Ledger.
// The GraphQL type's documentation follows.
//
// Ledgers are databases designed for managing money
type GetLedgerLedger struct {
	Id string `json:"id"`
	// The IK passed into the [createLedger](/api-reference#mutations-createledger) mutation. This is treated as a unique identifier for this ledger.
	Ik string `json:"ik"`
	// The name of the ledger. Can be updated with the [updateLedger](/api-reference#mutations-updateledger) mutation.
	Name    string `json:"name"`
	Created string `json:"created"`
	// When aggregating balances, all transactions within a 24 hour period starting at midnight UTC plus this offset are included in each day.
	BalanceUTCOffset string `json:"balanceUTCOffset"`
}

// GetId returns GetLedgerLedger.Id, and is useful for accessing the field via an interface.
func (v *GetLedgerLedger) GetId() string { return v.Id }

// GetIk returns GetLedgerLedger.Ik, and is useful for accessing the field via an interface.
func (v *GetLedgerLedger) GetIk() string { return v.Ik }

// GetName returns GetLedgerLedger.Name, and is useful for accessing the field via an interface.
func (v *GetLedgerLedger) GetName() string { return v.Name }

// GetCreated returns GetLedgerLedger.Created, and is useful for accessing the field via an interface.
func (v *GetLedgerLedger) GetCreated() string { return v.Created }

// GetBalanceUTCOffset returns GetLedgerLedger.BalanceUTCOffset, and is useful for accessing the field via an interface.
func (v *GetLedgerLedger) GetBalanceUTCOffset() string { return v.BalanceUTCOffset }

// GetLedgerResponse is returned by GetLedger on success.
type GetLedgerResponse struct {
	// Get a Ledger by ID
	Ledger *GetLedgerLedger `json:"ledger"`
}

// GetLedger returns GetLedgerResponse.Ledger, and is useful for accessing the field via an interface.
func (v *GetLedgerResponse) GetLedger() *GetLedgerLedger { return v.Ledger }

// GetSchemaResponse is returned by GetSchema on success.
type GetSchemaResponse struct {
	// Get a Schema by key.
	Schema *GetSchemaSchema `json:"schema"`
}

// GetSchema returns GetSchemaResponse.Schema, and is useful for accessing the field via an interface.
func (v *GetSchemaResponse) GetSchema() *GetSchemaSchema { return v.Schema }

// GetSchemaSchema includes the requested fields of the GraphQL type Schema.
type GetSchemaSchema struct {
	// The identifier for a Schema.
	// `key` is unique to a Workspace.
	Key string `json:"key"`
	// The name of a Schema. It defaults to the `key` if not provided in your SchemaInput.
	Name string `json:"name"`
	// The metadata for a specific SchemaVersion.
	Version GetSchemaSchemaVersion `json:"version"`
}

// GetKey returns GetSchemaSchema.Key, and is useful for accessing the field via an interface.
func (v *GetSchemaSchema) GetKey() string { return v.Key }

// GetName returns GetSchemaSchema.Name, and is useful for accessing the field via an interface.
func (v *GetSchemaSchema) GetName() string { return v.Name }

// GetVersion returns GetSchemaSchema.Version, and is useful for accessing the field via an interface.
func (v *GetSchemaSchema) GetVersion() GetSchemaSchemaVersion { return v.Version }

// GetSchemaSchemaVersion includes the requested fields of the GraphQL type SchemaVersion.
// The GraphQL type's documentation follows.
//
// An instance of a Schema stored in a Workspace.
// A new SchemaVersion is created each time a Schema is stored.
// It stores the Chart of Accounts and list of Ledger Entries as well as a history of its Ledger migrations.
type GetSchemaSchemaVersion struct {
	Created string `json:"created"`
	// The version of the schema.
	Version int             `json:"version"`
	Json    json.RawMessage `json:"json"`
}

// GetCreated returns GetSchemaSchemaVersion.Created, and is useful for accessing the field via an interface.
func (v *GetSchemaSchemaVersion) GetCreated() string { return v.Created }

// GetVersion returns GetSchemaSchemaVersion.Version, and is useful for accessing the field via an interface.
func (v *GetSchemaSchemaVersion) GetVersion() int { return v.Version }

// GetJson returns GetSchemaSchemaVersion.Json, and is useful for accessing the field via an interface.
func (v *GetSchemaSchemaVersion) GetJson() json.RawMessage { return v.Json }

// The payload configuring the consistency for this Ledger Account.
// See [Configure consistency](https://fragment.dev/docs#configure-consistency).
type LedgerAccountConsistencyConfigInput struct {
	// If set to `strong`, then a Ledger Account's `lines` updates will be strongly consistent with
	// the API response. This Ledger Account's balance will be updated and
	// available for strongly consistent reads before you receive an API response.
	//
	// Otherwise if unset or set to `eventual`, `lines` updates are applied
	// asynchronously and may not be immediately reflected queries.
	//
	// See [Configure consistency](https://fragment.dev/docs#configure-consistency).
	Lines *LedgerLinesConsistencyMode `json:"lines"`
	// If set to `strong`, then a Ledger Account's `ownBalance` updates will be strongly consistent with
	// the API response. This Ledger Account's balance will be updated and
	// available for strongly consistent reads before you receive an API response.
	//
	// Otherwise if unset or set to `eventual`, `ownBalance` updates are applied
	// asynchronously and may not be immediately reflected queries.
	//
	// See [Configure consistency](https://fragment.dev/docs#configure-consistency).
	OwnBalanceUpdates *BalanceUpdateConsistencyMode `json:"ownBalanceUpdates"`
}

// GetLines returns LedgerAccountConsistencyConfigInput.Lines, and is useful for accessing the field via an interface.
func (v *LedgerAccountConsistencyConfigInput) GetLines() *LedgerLinesConsistencyMode { return v.Lines }

// GetOwnBalanceUpdates returns LedgerAccountConsistencyConfigInput.OwnBalanceUpdates, and is useful for accessing the field via an interface.
func (v *LedgerAccountConsistencyConfigInput) GetOwnBalanceUpdates() *BalanceUpdateConsistencyMode {
	return v.OwnBalanceUpdates
}

// Specify a Ledger Account by using `id` or `path`.
//
// When specifying a Ledger Account by `path`, you must provide `ledger`.
type LedgerAccountMatchInput struct {
	// The FRAGMENT ID of the ledger account
	Id *string `json:"id"`
	// The Ledger to which this Ledger Account belongs. This is required if you are specifying the Ledger Account by `path`.
	Ledger *LedgerMatchInput `json:"ledger"`
	// The unique path of the ledger account.
	//
	// This is a slash-delimited string containing the keys of an account and all its direct ancestors.
	Path *string `json:"path"`
}

// GetId returns LedgerAccountMatchInput.Id, and is useful for accessing the field via an interface.
func (v *LedgerAccountMatchInput) GetId() *string { return v.Id }

// GetLedger returns LedgerAccountMatchInput.Ledger, and is useful for accessing the field via an interface.
func (v *LedgerAccountMatchInput) GetLedger() *LedgerMatchInput { return v.Ledger }

// GetPath returns LedgerAccountMatchInput.Path, and is useful for accessing the field via an interface.
func (v *LedgerAccountMatchInput) GetPath() *string { return v.Path }

type LedgerAccountTypes string

const (
	LedgerAccountTypesAsset     LedgerAccountTypes = "asset"
	LedgerAccountTypesExpense   LedgerAccountTypes = "expense"
	LedgerAccountTypesIncome    LedgerAccountTypes = "income"
	LedgerAccountTypesLiability LedgerAccountTypes = "liability"
)

type LedgerEntriesFilterSet struct {
	Date *DateFilter `json:"date"`
	// Use to filter Ledger Entries by their IDs or IKs.
	LedgerEntry *LedgerEntryFilter `json:"ledgerEntry"`
	Posted      *DateTimeFilter    `json:"posted"`
	// Use this to filter Ledger Entries by tags. The response will include entries that contain tags matching the filter.
	Tag *TagFilter `json:"tag"`
	// Use this to filter Ledger Entries by type. Ledger Entry types are defined in Schemas.
	Type *StringFilter `json:"type"`
}

// GetDate returns LedgerEntriesFilterSet.Date, and is useful for accessing the field via an interface.
func (v *LedgerEntriesFilterSet) GetDate() *DateFilter { return v.Date }

// GetLedgerEntry returns LedgerEntriesFilterSet.LedgerEntry, and is useful for accessing the field via an interface.
func (v *LedgerEntriesFilterSet) GetLedgerEntry() *LedgerEntryFilter { return v.LedgerEntry }

// GetPosted returns LedgerEntriesFilterSet.Posted, and is useful for accessing the field via an interface.
func (v *LedgerEntriesFilterSet) GetPosted() *DateTimeFilter { return v.Posted }

// GetTag returns LedgerEntriesFilterSet.Tag, and is useful for accessing the field via an interface.
func (v *LedgerEntriesFilterSet) GetTag() *TagFilter { return v.Tag }

// GetType returns LedgerEntriesFilterSet.Type, and is useful for accessing the field via an interface.
func (v *LedgerEntriesFilterSet) GetType() *StringFilter { return v.Type }

type LedgerEntryFilter struct {
	// Result must be the specified Ledger Entry.
	EqualTo *LedgerEntryMatchInput `json:"equalTo"`
	// Result can be any of the specified Ledger Entries.
	In []LedgerEntryMatchInput `json:"in"`
}

// GetEqualTo returns LedgerEntryFilter.EqualTo, and is useful for accessing the field via an interface.
func (v *LedgerEntryFilter) GetEqualTo() *LedgerEntryMatchInput { return v.EqualTo }

// GetIn returns LedgerEntryFilter.In, and is useful for accessing the field via an interface.
func (v *LedgerEntryFilter) GetIn() []LedgerEntryMatchInput { return v.In }

type LedgerEntryGroupInput struct {
	// The key of this group. Can be up to 128 characters long.
	Key string `json:"key"`
	// The value associated with this group's key. Can be up to 128 characters long.
	Value string `json:"value"`
}

// GetKey returns LedgerEntryGroupInput.Key, and is useful for accessing the field via an interface.
func (v *LedgerEntryGroupInput) GetKey() string { return v.Key }

// GetValue returns LedgerEntryGroupInput.Value, and is useful for accessing the field via an interface.
func (v *LedgerEntryGroupInput) GetValue() string { return v.Value }

// Specify a Ledger Entry by using `id`.
type LedgerEntryMatchInput struct {
	// The FRAGMENT ID of the Ledger Entry
	Id *string `json:"id"`
	// The IK provided to the `addLedgerEntry` mutation or the `ik` field
	// returned from a `reconcileTx` mutation. This is required if you have not
	// provided `id`.
	Ik *string `json:"ik"`
	// The FRAGMENT ID of the Ledger to which this Ledger Entry belongs. This
	// is required if you have not provided `id`.
	Ledger *LedgerMatchInput `json:"ledger"`
}

// GetId returns LedgerEntryMatchInput.Id, and is useful for accessing the field via an interface.
func (v *LedgerEntryMatchInput) GetId() *string { return v.Id }

// GetIk returns LedgerEntryMatchInput.Ik, and is useful for accessing the field via an interface.
func (v *LedgerEntryMatchInput) GetIk() *string { return v.Ik }

// GetLedger returns LedgerEntryMatchInput.Ledger, and is useful for accessing the field via an interface.
func (v *LedgerEntryMatchInput) GetLedger() *LedgerMatchInput { return v.Ledger }

type LedgerEntryTagInput struct {
	// The key of this tag. Can be up to 128 characters long.
	Key string `json:"key"`
	// The value associated with this tag's key. Can be up to 128 characters long.
	Value string `json:"value"`
}

// GetKey returns LedgerEntryTagInput.Key, and is useful for accessing the field via an interface.
func (v *LedgerEntryTagInput) GetKey() string { return v.Key }

// GetValue returns LedgerEntryTagInput.Value, and is useful for accessing the field via an interface.
func (v *LedgerEntryTagInput) GetValue() string { return v.Value }

type LedgerLineInput struct {
	// The LedgerAccount this line is being added to
	Account LedgerAccountMatchInput `json:"account"`
	// A positive amount increases the balance of its LedgerAccount, a negative amount reduces the balance of its LedgerAccount
	Amount *string `json:"amount"`
	// The currency the ledger line is in
	Currency *CurrencyMatchInput `json:"currency"`
	// If not specified the description from the parent LedgerEntryInput will be used
	Description *string `json:"description"`
	// Optional identifier for Ledger Line. You can filter lines by key using [LedgerLinesFilterSet](https://fragment.dev/api-reference#types-filter-types-ledgerlinesfilterset).
	Key *string `json:"key"`
	// Required for reconcileTx to specify the transaction being reconciled, you can specify either the FRAGMENT ID or external ID of the transaction
	Tx *TxMatchInput `json:"tx"`
}

// GetAccount returns LedgerLineInput.Account, and is useful for accessing the field via an interface.
func (v *LedgerLineInput) GetAccount() LedgerAccountMatchInput { return v.Account }

// GetAmount returns LedgerLineInput.Amount, and is useful for accessing the field via an interface.
func (v *LedgerLineInput) GetAmount() *string { return v.Amount }

// GetCurrency returns LedgerLineInput.Currency, and is useful for accessing the field via an interface.
func (v *LedgerLineInput) GetCurrency() *CurrencyMatchInput { return v.Currency }

// GetDescription returns LedgerLineInput.Description, and is useful for accessing the field via an interface.
func (v *LedgerLineInput) GetDescription() *string { return v.Description }

// GetKey returns LedgerLineInput.Key, and is useful for accessing the field via an interface.
func (v *LedgerLineInput) GetKey() *string { return v.Key }

// GetTx returns LedgerLineInput.Tx, and is useful for accessing the field via an interface.
func (v *LedgerLineInput) GetTx() *TxMatchInput { return v.Tx }

type LedgerLinesConsistencyMode string

const (
	LedgerLinesConsistencyModeEventual LedgerLinesConsistencyMode = "eventual"
	LedgerLinesConsistencyModeStrong   LedgerLinesConsistencyMode = "strong"
)

type LedgerLinesFilterSet struct {
	Date *DateFilter `json:"date"`
	// Use this to filter Ledger Lines by key. Ledger Line keys are defined in Schemas.
	Key    *StringFilter   `json:"key"`
	Posted *DateTimeFilter `json:"posted"`
	Type   *TxTypeFilter   `json:"type"`
}

// GetDate returns LedgerLinesFilterSet.Date, and is useful for accessing the field via an interface.
func (v *LedgerLinesFilterSet) GetDate() *DateFilter { return v.Date }

// GetKey returns LedgerLinesFilterSet.Key, and is useful for accessing the field via an interface.
func (v *LedgerLinesFilterSet) GetKey() *StringFilter { return v.Key }

// GetPosted returns LedgerLinesFilterSet.Posted, and is useful for accessing the field via an interface.
func (v *LedgerLinesFilterSet) GetPosted() *DateTimeFilter { return v.Posted }

// GetType returns LedgerLinesFilterSet.Type, and is useful for accessing the field via an interface.
func (v *LedgerLinesFilterSet) GetType() *TxTypeFilter { return v.Type }

// Specify a Ledger by using `id` or `ik`.
type LedgerMatchInput struct {
	// The FRAGMENT ID of the ledger
	Id *string `json:"id"`
	// The IK passed into the [createLedger](/api-reference#mutations-createledger) mutation. This is treated as a second unique identifier for this ledger.
	Ik *string `json:"ik"`
}

// GetId returns LedgerMatchInput.Id, and is useful for accessing the field via an interface.
func (v *LedgerMatchInput) GetId() *string { return v.Id }

// GetIk returns LedgerMatchInput.Ik, and is useful for accessing the field via an interface.
func (v *LedgerMatchInput) GetIk() *string { return v.Ik }

type LedgerTypes string

const (
	LedgerTypesDouble LedgerTypes = "double"
)

// ListLedgerAccountBalancesLedger includes the requested fields of the GraphQL type Ledger.
// The GraphQL type's documentation follows.
//
// Ledgers are databases designed for managing money
type ListLedgerAccountBalancesLedger struct {
	Id string `json:"id"`
	// The IK passed into the [createLedger](/api-reference#mutations-createledger) mutation. This is treated as a unique identifier for this ledger.
	Ik string `json:"ik"`
	// The name of the ledger. Can be updated with the [updateLedger](/api-reference#mutations-updateledger) mutation.
	Name    string `json:"name"`
	Created string `json:"created"`
	// Query LedgerAccounts in Ledger. Ledger Accounts are paginated and returned in reverse-chronological order by their created date.
	LedgerAccounts *ListLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnection `json:"ledgerAccounts"`
}

// GetId returns ListLedgerAccountBalancesLedger.Id, and is useful for accessing the field via an interface.
func (v *ListLedgerAccountBalancesLedger) GetId() string { return v.Id }

// GetIk returns ListLedgerAccountBalancesLedger.Ik, and is useful for accessing the field via an interface.
func (v *ListLedgerAccountBalancesLedger) GetIk() string { return v.Ik }

// GetName returns ListLedgerAccountBalancesLedger.Name, and is useful for accessing the field via an interface.
func (v *ListLedgerAccountBalancesLedger) GetName() string { return v.Name }

// GetCreated returns ListLedgerAccountBalancesLedger.Created, and is useful for accessing the field via an interface.
func (v *ListLedgerAccountBalancesLedger) GetCreated() string { return v.Created }

// GetLedgerAccounts returns ListLedgerAccountBalancesLedger.LedgerAccounts, and is useful for accessing the field via an interface.
func (v *ListLedgerAccountBalancesLedger) GetLedgerAccounts() *ListLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnection {
	return v.LedgerAccounts
}

// ListLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnection includes the requested fields of the GraphQL type LedgerAccountsConnection.
// The GraphQL type's documentation follows.
//
// A paginated list of Ledger Accounts
type ListLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnection struct {
	// The current page of results
	Nodes []ListLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccount `json:"nodes"`
	// The [pagination info](https://fragment.dev/api-reference#types-connection-types-pageinfo) for this list
	PageInfo ListLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionPageInfo `json:"pageInfo"`
}

// GetNodes returns ListLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnection.Nodes, and is useful for accessing the field via an interface.
func (v *ListLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnection) GetNodes() []ListLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccount {
	return v.Nodes
}

// GetPageInfo returns ListLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *ListLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnection) GetPageInfo() ListLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionPageInfo {
	return v.PageInfo
}

// ListLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccount includes the requested fields of the GraphQL type LedgerAccount.
// The GraphQL type's documentation follows.
//
// A ledger account is a container for money
type ListLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccount struct {
	Id string `json:"id"`
	// The unique Path of the ledger account. This is a slash-delimited string containing the location of an account in its chart of accounts.
	// For accounts created with a schema, this will be composed of account keys. Else, for accounts created with the createLedgerAccounts API,
	// this will be composed of the IKs of an account and its ancestors.
	Path string `json:"path"`
	// The name of your Ledger Account
	Name    *string            `json:"name"`
	Type    LedgerAccountTypes `json:"type"`
	Created string             `json:"created"`
	// Total of all lines in this ledger account, excluding all child ledger accounts
	OwnBalance string `json:"ownBalance"`
	// Total of all lines in child ledger accounts of the same currency as this ledger account
	ChildBalance string `json:"childBalance"`
	// Total of all lines in this ledger account and child ledger accounts of the same currency as this ledger account
	Balance string `json:"balance"`
}

// GetId returns ListLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccount.Id, and is useful for accessing the field via an interface.
func (v *ListLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccount) GetId() string {
	return v.Id
}

// GetPath returns ListLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccount.Path, and is useful for accessing the field via an interface.
func (v *ListLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccount) GetPath() string {
	return v.Path
}

// GetName returns ListLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccount.Name, and is useful for accessing the field via an interface.
func (v *ListLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccount) GetName() *string {
	return v.Name
}

// GetType returns ListLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccount.Type, and is useful for accessing the field via an interface.
func (v *ListLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccount) GetType() LedgerAccountTypes {
	return v.Type
}

// GetCreated returns ListLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccount.Created, and is useful for accessing the field via an interface.
func (v *ListLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccount) GetCreated() string {
	return v.Created
}

// GetOwnBalance returns ListLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccount.OwnBalance, and is useful for accessing the field via an interface.
func (v *ListLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccount) GetOwnBalance() string {
	return v.OwnBalance
}

// GetChildBalance returns ListLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccount.ChildBalance, and is useful for accessing the field via an interface.
func (v *ListLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccount) GetChildBalance() string {
	return v.ChildBalance
}

// GetBalance returns ListLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccount.Balance, and is useful for accessing the field via an interface.
func (v *ListLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccount) GetBalance() string {
	return v.Balance
}

// ListLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// An object containing [pagination](https://fragment.dev/docs#query-data-basics-pagination) details.
type ListLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionPageInfo struct {
	HasNextPage     bool    `json:"hasNextPage"`
	EndCursor       *string `json:"endCursor"`
	HasPreviousPage bool    `json:"hasPreviousPage"`
	StartCursor     *string `json:"startCursor"`
}

// GetHasNextPage returns ListLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *ListLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// GetEndCursor returns ListLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *ListLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionPageInfo) GetEndCursor() *string {
	return v.EndCursor
}

// GetHasPreviousPage returns ListLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionPageInfo.HasPreviousPage, and is useful for accessing the field via an interface.
func (v *ListLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionPageInfo) GetHasPreviousPage() bool {
	return v.HasPreviousPage
}

// GetStartCursor returns ListLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionPageInfo.StartCursor, and is useful for accessing the field via an interface.
func (v *ListLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionPageInfo) GetStartCursor() *string {
	return v.StartCursor
}

// ListLedgerAccountBalancesResponse is returned by ListLedgerAccountBalances on success.
type ListLedgerAccountBalancesResponse struct {
	// Get a Ledger by ID
	Ledger *ListLedgerAccountBalancesLedger `json:"ledger"`
}

// GetLedger returns ListLedgerAccountBalancesResponse.Ledger, and is useful for accessing the field via an interface.
func (v *ListLedgerAccountBalancesResponse) GetLedger() *ListLedgerAccountBalancesLedger {
	return v.Ledger
}

// ListLedgerAccountsLedger includes the requested fields of the GraphQL type Ledger.
// The GraphQL type's documentation follows.
//
// Ledgers are databases designed for managing money
type ListLedgerAccountsLedger struct {
	Id string `json:"id"`
	// The IK passed into the [createLedger](/api-reference#mutations-createledger) mutation. This is treated as a unique identifier for this ledger.
	Ik string `json:"ik"`
	// The name of the ledger. Can be updated with the [updateLedger](/api-reference#mutations-updateledger) mutation.
	Name    string `json:"name"`
	Created string `json:"created"`
	// Query LedgerAccounts in Ledger. Ledger Accounts are paginated and returned in reverse-chronological order by their created date.
	LedgerAccounts *ListLedgerAccountsLedgerLedgerAccountsLedgerAccountsConnection `json:"ledgerAccounts"`
}

// GetId returns ListLedgerAccountsLedger.Id, and is useful for accessing the field via an interface.
func (v *ListLedgerAccountsLedger) GetId() string { return v.Id }

// GetIk returns ListLedgerAccountsLedger.Ik, and is useful for accessing the field via an interface.
func (v *ListLedgerAccountsLedger) GetIk() string { return v.Ik }

// GetName returns ListLedgerAccountsLedger.Name, and is useful for accessing the field via an interface.
func (v *ListLedgerAccountsLedger) GetName() string { return v.Name }

// GetCreated returns ListLedgerAccountsLedger.Created, and is useful for accessing the field via an interface.
func (v *ListLedgerAccountsLedger) GetCreated() string { return v.Created }

// GetLedgerAccounts returns ListLedgerAccountsLedger.LedgerAccounts, and is useful for accessing the field via an interface.
func (v *ListLedgerAccountsLedger) GetLedgerAccounts() *ListLedgerAccountsLedgerLedgerAccountsLedgerAccountsConnection {
	return v.LedgerAccounts
}

// ListLedgerAccountsLedgerLedgerAccountsLedgerAccountsConnection includes the requested fields of the GraphQL type LedgerAccountsConnection.
// The GraphQL type's documentation follows.
//
// A paginated list of Ledger Accounts
type ListLedgerAccountsLedgerLedgerAccountsLedgerAccountsConnection struct {
	// The current page of results
	Nodes []ListLedgerAccountsLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccount `json:"nodes"`
	// The [pagination info](https://fragment.dev/api-reference#types-connection-types-pageinfo) for this list
	PageInfo ListLedgerAccountsLedgerLedgerAccountsLedgerAccountsConnectionPageInfo `json:"pageInfo"`
}

// GetNodes returns ListLedgerAccountsLedgerLedgerAccountsLedgerAccountsConnection.Nodes, and is useful for accessing the field via an interface.
func (v *ListLedgerAccountsLedgerLedgerAccountsLedgerAccountsConnection) GetNodes() []ListLedgerAccountsLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccount {
	return v.Nodes
}

// GetPageInfo returns ListLedgerAccountsLedgerLedgerAccountsLedgerAccountsConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *ListLedgerAccountsLedgerLedgerAccountsLedgerAccountsConnection) GetPageInfo() ListLedgerAccountsLedgerLedgerAccountsLedgerAccountsConnectionPageInfo {
	return v.PageInfo
}

// ListLedgerAccountsLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccount includes the requested fields of the GraphQL type LedgerAccount.
// The GraphQL type's documentation follows.
//
// A ledger account is a container for money
type ListLedgerAccountsLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccount struct {
	Id string `json:"id"`
	// The unique Path of the ledger account. This is a slash-delimited string containing the location of an account in its chart of accounts.
	// For accounts created with a schema, this will be composed of account keys. Else, for accounts created with the createLedgerAccounts API,
	// this will be composed of the IKs of an account and its ancestors.
	Path string `json:"path"`
	// The name of your Ledger Account
	Name    *string            `json:"name"`
	Type    LedgerAccountTypes `json:"type"`
	Created string             `json:"created"`
}

// GetId returns ListLedgerAccountsLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccount.Id, and is useful for accessing the field via an interface.
func (v *ListLedgerAccountsLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccount) GetId() string {
	return v.Id
}

// GetPath returns ListLedgerAccountsLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccount.Path, and is useful for accessing the field via an interface.
func (v *ListLedgerAccountsLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccount) GetPath() string {
	return v.Path
}

// GetName returns ListLedgerAccountsLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccount.Name, and is useful for accessing the field via an interface.
func (v *ListLedgerAccountsLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccount) GetName() *string {
	return v.Name
}

// GetType returns ListLedgerAccountsLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccount.Type, and is useful for accessing the field via an interface.
func (v *ListLedgerAccountsLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccount) GetType() LedgerAccountTypes {
	return v.Type
}

// GetCreated returns ListLedgerAccountsLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccount.Created, and is useful for accessing the field via an interface.
func (v *ListLedgerAccountsLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccount) GetCreated() string {
	return v.Created
}

// ListLedgerAccountsLedgerLedgerAccountsLedgerAccountsConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// An object containing [pagination](https://fragment.dev/docs#query-data-basics-pagination) details.
type ListLedgerAccountsLedgerLedgerAccountsLedgerAccountsConnectionPageInfo struct {
	HasNextPage     bool    `json:"hasNextPage"`
	EndCursor       *string `json:"endCursor"`
	HasPreviousPage bool    `json:"hasPreviousPage"`
	StartCursor     *string `json:"startCursor"`
}

// GetHasNextPage returns ListLedgerAccountsLedgerLedgerAccountsLedgerAccountsConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *ListLedgerAccountsLedgerLedgerAccountsLedgerAccountsConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// GetEndCursor returns ListLedgerAccountsLedgerLedgerAccountsLedgerAccountsConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *ListLedgerAccountsLedgerLedgerAccountsLedgerAccountsConnectionPageInfo) GetEndCursor() *string {
	return v.EndCursor
}

// GetHasPreviousPage returns ListLedgerAccountsLedgerLedgerAccountsLedgerAccountsConnectionPageInfo.HasPreviousPage, and is useful for accessing the field via an interface.
func (v *ListLedgerAccountsLedgerLedgerAccountsLedgerAccountsConnectionPageInfo) GetHasPreviousPage() bool {
	return v.HasPreviousPage
}

// GetStartCursor returns ListLedgerAccountsLedgerLedgerAccountsLedgerAccountsConnectionPageInfo.StartCursor, and is useful for accessing the field via an interface.
func (v *ListLedgerAccountsLedgerLedgerAccountsLedgerAccountsConnectionPageInfo) GetStartCursor() *string {
	return v.StartCursor
}

// ListLedgerAccountsResponse is returned by ListLedgerAccounts on success.
type ListLedgerAccountsResponse struct {
	// Get a Ledger by ID
	Ledger *ListLedgerAccountsLedger `json:"ledger"`
}

// GetLedger returns ListLedgerAccountsResponse.Ledger, and is useful for accessing the field via an interface.
func (v *ListLedgerAccountsResponse) GetLedger() *ListLedgerAccountsLedger { return v.Ledger }

// ListLedgerEntriesLedger includes the requested fields of the GraphQL type Ledger.
// The GraphQL type's documentation follows.
//
// Ledgers are databases designed for managing money
type ListLedgerEntriesLedger struct {
	// Query Ledger Entries in a Ledger. Ledger Entries are paginated and sorted in reverse-chronological order by posted date.
	LedgerEntries *ListLedgerEntriesLedgerLedgerEntriesLedgerEntriesConnection `json:"ledgerEntries"`
}

// GetLedgerEntries returns ListLedgerEntriesLedger.LedgerEntries, and is useful for accessing the field via an interface.
func (v *ListLedgerEntriesLedger) GetLedgerEntries() *ListLedgerEntriesLedgerLedgerEntriesLedgerEntriesConnection {
	return v.LedgerEntries
}

// ListLedgerEntriesLedgerLedgerEntriesLedgerEntriesConnection includes the requested fields of the GraphQL type LedgerEntriesConnection.
// The GraphQL type's documentation follows.
//
// A paginated list of Ledger Entries
type ListLedgerEntriesLedgerLedgerEntriesLedgerEntriesConnection struct {
	// The current page of results
	Nodes []ListLedgerEntriesLedgerLedgerEntriesLedgerEntriesConnectionNodesLedgerEntry `json:"nodes"`
	// The [pagination info](https://fragment.dev/api-reference#types-connection-types-pageinfo) for this list
	PageInfo ListLedgerEntriesLedgerLedgerEntriesLedgerEntriesConnectionPageInfo `json:"pageInfo"`
}

// GetNodes returns ListLedgerEntriesLedgerLedgerEntriesLedgerEntriesConnection.Nodes, and is useful for accessing the field via an interface.
func (v *ListLedgerEntriesLedgerLedgerEntriesLedgerEntriesConnection) GetNodes() []ListLedgerEntriesLedgerLedgerEntriesLedgerEntriesConnectionNodesLedgerEntry {
	return v.Nodes
}

// GetPageInfo returns ListLedgerEntriesLedgerLedgerEntriesLedgerEntriesConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *ListLedgerEntriesLedgerLedgerEntriesLedgerEntriesConnection) GetPageInfo() ListLedgerEntriesLedgerLedgerEntriesLedgerEntriesConnectionPageInfo {
	return v.PageInfo
}

// ListLedgerEntriesLedgerLedgerEntriesLedgerEntriesConnectionNodesLedgerEntry includes the requested fields of the GraphQL type LedgerEntry.
type ListLedgerEntriesLedgerLedgerEntriesLedgerEntriesConnectionNodesLedgerEntry struct {
	// The idempotency key used to post this ledger entry
	Ik string `json:"ik"`
	// The type of the Ledger Entry.
	Type *string `json:"type"`
	// ISO-8601 timestamp this LedgerEntry posted to its Ledger.
	Posted string `json:"posted"`
	// Lines posted in this Ledger Entry.
	Lines ListLedgerEntriesLedgerLedgerEntriesLedgerEntriesConnectionNodesLedgerEntryLinesLedgerLinesConnection `json:"lines"`
}

// GetIk returns ListLedgerEntriesLedgerLedgerEntriesLedgerEntriesConnectionNodesLedgerEntry.Ik, and is useful for accessing the field via an interface.
func (v *ListLedgerEntriesLedgerLedgerEntriesLedgerEntriesConnectionNodesLedgerEntry) GetIk() string {
	return v.Ik
}

// GetType returns ListLedgerEntriesLedgerLedgerEntriesLedgerEntriesConnectionNodesLedgerEntry.Type, and is useful for accessing the field via an interface.
func (v *ListLedgerEntriesLedgerLedgerEntriesLedgerEntriesConnectionNodesLedgerEntry) GetType() *string {
	return v.Type
}

// GetPosted returns ListLedgerEntriesLedgerLedgerEntriesLedgerEntriesConnectionNodesLedgerEntry.Posted, and is useful for accessing the field via an interface.
func (v *ListLedgerEntriesLedgerLedgerEntriesLedgerEntriesConnectionNodesLedgerEntry) GetPosted() string {
	return v.Posted
}

// GetLines returns ListLedgerEntriesLedgerLedgerEntriesLedgerEntriesConnectionNodesLedgerEntry.Lines, and is useful for accessing the field via an interface.
func (v *ListLedgerEntriesLedgerLedgerEntriesLedgerEntriesConnectionNodesLedgerEntry) GetLines() ListLedgerEntriesLedgerLedgerEntriesLedgerEntriesConnectionNodesLedgerEntryLinesLedgerLinesConnection {
	return v.Lines
}

// ListLedgerEntriesLedgerLedgerEntriesLedgerEntriesConnectionNodesLedgerEntryLinesLedgerLinesConnection includes the requested fields of the GraphQL type LedgerLinesConnection.
// The GraphQL type's documentation follows.
//
// A paginated list of Ledger Lines
type ListLedgerEntriesLedgerLedgerEntriesLedgerEntriesConnectionNodesLedgerEntryLinesLedgerLinesConnection struct {
	// The current page of results
	Nodes []ListLedgerEntriesLedgerLedgerEntriesLedgerEntriesConnectionNodesLedgerEntryLinesLedgerLinesConnectionNodesLedgerLine `json:"nodes"`
}

// GetNodes returns ListLedgerEntriesLedgerLedgerEntriesLedgerEntriesConnectionNodesLedgerEntryLinesLedgerLinesConnection.Nodes, and is useful for accessing the field via an interface.
func (v *ListLedgerEntriesLedgerLedgerEntriesLedgerEntriesConnectionNodesLedgerEntryLinesLedgerLinesConnection) GetNodes() []ListLedgerEntriesLedgerLedgerEntriesLedgerEntriesConnectionNodesLedgerEntryLinesLedgerLinesConnectionNodesLedgerLine {
	return v.Nodes
}

// ListLedgerEntriesLedgerLedgerEntriesLedgerEntriesConnectionNodesLedgerEntryLinesLedgerLinesConnectionNodesLedgerLine includes the requested fields of the GraphQL type LedgerLine.
type ListLedgerEntriesLedgerLedgerEntriesLedgerEntriesConnectionNodesLedgerEntryLinesLedgerLinesConnectionNodesLedgerLine struct {
	// How much this line's LedgerAccount's balance changed in integer cents  (i.e. in USD 100 is 1 dollar, 100 cents)
	Amount string `json:"amount"`
	// LedgerAccount that contains this line
	Account ListLedgerEntriesLedgerLedgerEntriesLedgerEntriesConnectionNodesLedgerEntryLinesLedgerLinesConnectionNodesLedgerLineAccountLedgerAccount `json:"account"`
}

// GetAmount returns ListLedgerEntriesLedgerLedgerEntriesLedgerEntriesConnectionNodesLedgerEntryLinesLedgerLinesConnectionNodesLedgerLine.Amount, and is useful for accessing the field via an interface.
func (v *ListLedgerEntriesLedgerLedgerEntriesLedgerEntriesConnectionNodesLedgerEntryLinesLedgerLinesConnectionNodesLedgerLine) GetAmount() string {
	return v.Amount
}

// GetAccount returns ListLedgerEntriesLedgerLedgerEntriesLedgerEntriesConnectionNodesLedgerEntryLinesLedgerLinesConnectionNodesLedgerLine.Account, and is useful for accessing the field via an interface.
func (v *ListLedgerEntriesLedgerLedgerEntriesLedgerEntriesConnectionNodesLedgerEntryLinesLedgerLinesConnectionNodesLedgerLine) GetAccount() ListLedgerEntriesLedgerLedgerEntriesLedgerEntriesConnectionNodesLedgerEntryLinesLedgerLinesConnectionNodesLedgerLineAccountLedgerAccount {
	return v.Account
}

// ListLedgerEntriesLedgerLedgerEntriesLedgerEntriesConnectionNodesLedgerEntryLinesLedgerLinesConnectionNodesLedgerLineAccountLedgerAccount includes the requested fields of the GraphQL type LedgerAccount.
// The GraphQL type's documentation follows.
//
// A ledger account is a container for money
type ListLedgerEntriesLedgerLedgerEntriesLedgerEntriesConnectionNodesLedgerEntryLinesLedgerLinesConnectionNodesLedgerLineAccountLedgerAccount struct {
	// The unique Path of the ledger account. This is a slash-delimited string containing the location of an account in its chart of accounts.
	// For accounts created with a schema, this will be composed of account keys. Else, for accounts created with the createLedgerAccounts API,
	// this will be composed of the IKs of an account and its ancestors.
	Path string `json:"path"`
}

// GetPath returns ListLedgerEntriesLedgerLedgerEntriesLedgerEntriesConnectionNodesLedgerEntryLinesLedgerLinesConnectionNodesLedgerLineAccountLedgerAccount.Path, and is useful for accessing the field via an interface.
func (v *ListLedgerEntriesLedgerLedgerEntriesLedgerEntriesConnectionNodesLedgerEntryLinesLedgerLinesConnectionNodesLedgerLineAccountLedgerAccount) GetPath() string {
	return v.Path
}

// ListLedgerEntriesLedgerLedgerEntriesLedgerEntriesConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// An object containing [pagination](https://fragment.dev/docs#query-data-basics-pagination) details.
type ListLedgerEntriesLedgerLedgerEntriesLedgerEntriesConnectionPageInfo struct {
	HasNextPage     bool    `json:"hasNextPage"`
	EndCursor       *string `json:"endCursor"`
	HasPreviousPage bool    `json:"hasPreviousPage"`
	StartCursor     *string `json:"startCursor"`
}

// GetHasNextPage returns ListLedgerEntriesLedgerLedgerEntriesLedgerEntriesConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *ListLedgerEntriesLedgerLedgerEntriesLedgerEntriesConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// GetEndCursor returns ListLedgerEntriesLedgerLedgerEntriesLedgerEntriesConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *ListLedgerEntriesLedgerLedgerEntriesLedgerEntriesConnectionPageInfo) GetEndCursor() *string {
	return v.EndCursor
}

// GetHasPreviousPage returns ListLedgerEntriesLedgerLedgerEntriesLedgerEntriesConnectionPageInfo.HasPreviousPage, and is useful for accessing the field via an interface.
func (v *ListLedgerEntriesLedgerLedgerEntriesLedgerEntriesConnectionPageInfo) GetHasPreviousPage() bool {
	return v.HasPreviousPage
}

// GetStartCursor returns ListLedgerEntriesLedgerLedgerEntriesLedgerEntriesConnectionPageInfo.StartCursor, and is useful for accessing the field via an interface.
func (v *ListLedgerEntriesLedgerLedgerEntriesLedgerEntriesConnectionPageInfo) GetStartCursor() *string {
	return v.StartCursor
}

// ListLedgerEntriesResponse is returned by ListLedgerEntries on success.
type ListLedgerEntriesResponse struct {
	// Get a Ledger by ID
	Ledger *ListLedgerEntriesLedger `json:"ledger"`
}

// GetLedger returns ListLedgerEntriesResponse.Ledger, and is useful for accessing the field via an interface.
func (v *ListLedgerEntriesResponse) GetLedger() *ListLedgerEntriesLedger { return v.Ledger }

// ListMultiCurrencyLedgerAccountBalancesLedger includes the requested fields of the GraphQL type Ledger.
// The GraphQL type's documentation follows.
//
// Ledgers are databases designed for managing money
type ListMultiCurrencyLedgerAccountBalancesLedger struct {
	Id string `json:"id"`
	// The IK passed into the [createLedger](/api-reference#mutations-createledger) mutation. This is treated as a unique identifier for this ledger.
	Ik string `json:"ik"`
	// The name of the ledger. Can be updated with the [updateLedger](/api-reference#mutations-updateledger) mutation.
	Name    string `json:"name"`
	Created string `json:"created"`
	// Query LedgerAccounts in Ledger. Ledger Accounts are paginated and returned in reverse-chronological order by their created date.
	LedgerAccounts *ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnection `json:"ledgerAccounts"`
}

// GetId returns ListMultiCurrencyLedgerAccountBalancesLedger.Id, and is useful for accessing the field via an interface.
func (v *ListMultiCurrencyLedgerAccountBalancesLedger) GetId() string { return v.Id }

// GetIk returns ListMultiCurrencyLedgerAccountBalancesLedger.Ik, and is useful for accessing the field via an interface.
func (v *ListMultiCurrencyLedgerAccountBalancesLedger) GetIk() string { return v.Ik }

// GetName returns ListMultiCurrencyLedgerAccountBalancesLedger.Name, and is useful for accessing the field via an interface.
func (v *ListMultiCurrencyLedgerAccountBalancesLedger) GetName() string { return v.Name }

// GetCreated returns ListMultiCurrencyLedgerAccountBalancesLedger.Created, and is useful for accessing the field via an interface.
func (v *ListMultiCurrencyLedgerAccountBalancesLedger) GetCreated() string { return v.Created }

// GetLedgerAccounts returns ListMultiCurrencyLedgerAccountBalancesLedger.LedgerAccounts, and is useful for accessing the field via an interface.
func (v *ListMultiCurrencyLedgerAccountBalancesLedger) GetLedgerAccounts() *ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnection {
	return v.LedgerAccounts
}

// ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnection includes the requested fields of the GraphQL type LedgerAccountsConnection.
// The GraphQL type's documentation follows.
//
// A paginated list of Ledger Accounts
type ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnection struct {
	// The current page of results
	Nodes []ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccount `json:"nodes"`
	// The [pagination info](https://fragment.dev/api-reference#types-connection-types-pageinfo) for this list
	PageInfo ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionPageInfo `json:"pageInfo"`
}

// GetNodes returns ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnection.Nodes, and is useful for accessing the field via an interface.
func (v *ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnection) GetNodes() []ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccount {
	return v.Nodes
}

// GetPageInfo returns ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnection) GetPageInfo() ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionPageInfo {
	return v.PageInfo
}

// ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccount includes the requested fields of the GraphQL type LedgerAccount.
// The GraphQL type's documentation follows.
//
// A ledger account is a container for money
type ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccount struct {
	Id string `json:"id"`
	// The unique Path of the ledger account. This is a slash-delimited string containing the location of an account in its chart of accounts.
	// For accounts created with a schema, this will be composed of account keys. Else, for accounts created with the createLedgerAccounts API,
	// this will be composed of the IKs of an account and its ancestors.
	Path string `json:"path"`
	// The name of your Ledger Account
	Name    *string            `json:"name"`
	Type    LedgerAccountTypes `json:"type"`
	Created string             `json:"created"`
	// Total of all lines across all currencies in this ledger account, excluding all child ledger accounts
	OwnBalances ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccountOwnBalancesCurrencyAmountConnection `json:"ownBalances"`
	// Total of all lines in child ledger accounts of this ledger in all currencies
	ChildBalances ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccountChildBalancesCurrencyAmountConnection `json:"childBalances"`
	// Total of all lines in this ledger account and child ledger accounts in all currencies
	Balances ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccountBalancesCurrencyAmountConnection `json:"balances"`
}

// GetId returns ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccount.Id, and is useful for accessing the field via an interface.
func (v *ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccount) GetId() string {
	return v.Id
}

// GetPath returns ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccount.Path, and is useful for accessing the field via an interface.
func (v *ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccount) GetPath() string {
	return v.Path
}

// GetName returns ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccount.Name, and is useful for accessing the field via an interface.
func (v *ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccount) GetName() *string {
	return v.Name
}

// GetType returns ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccount.Type, and is useful for accessing the field via an interface.
func (v *ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccount) GetType() LedgerAccountTypes {
	return v.Type
}

// GetCreated returns ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccount.Created, and is useful for accessing the field via an interface.
func (v *ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccount) GetCreated() string {
	return v.Created
}

// GetOwnBalances returns ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccount.OwnBalances, and is useful for accessing the field via an interface.
func (v *ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccount) GetOwnBalances() ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccountOwnBalancesCurrencyAmountConnection {
	return v.OwnBalances
}

// GetChildBalances returns ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccount.ChildBalances, and is useful for accessing the field via an interface.
func (v *ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccount) GetChildBalances() ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccountChildBalancesCurrencyAmountConnection {
	return v.ChildBalances
}

// GetBalances returns ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccount.Balances, and is useful for accessing the field via an interface.
func (v *ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccount) GetBalances() ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccountBalancesCurrencyAmountConnection {
	return v.Balances
}

// ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccountBalancesCurrencyAmountConnection includes the requested fields of the GraphQL type CurrencyAmountConnection.
// The GraphQL type's documentation follows.
//
// A paginated list of amounts with their currencies
type ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccountBalancesCurrencyAmountConnection struct {
	// The current page of results
	Nodes []ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccountBalancesCurrencyAmountConnectionNodesCurrencyAmount `json:"nodes"`
}

// GetNodes returns ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccountBalancesCurrencyAmountConnection.Nodes, and is useful for accessing the field via an interface.
func (v *ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccountBalancesCurrencyAmountConnection) GetNodes() []ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccountBalancesCurrencyAmountConnectionNodesCurrencyAmount {
	return v.Nodes
}

// ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccountBalancesCurrencyAmountConnectionNodesCurrencyAmount includes the requested fields of the GraphQL type CurrencyAmount.
// The GraphQL type's documentation follows.
//
// A single amount accompanied by its currency
type ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccountBalancesCurrencyAmountConnectionNodesCurrencyAmount struct {
	// The currency this amount is in
	Currency ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccountBalancesCurrencyAmountConnectionNodesCurrencyAmountCurrency `json:"currency"`
	// Numerical integer value, serialized as a string
	Amount string `json:"amount"`
}

// GetCurrency returns ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccountBalancesCurrencyAmountConnectionNodesCurrencyAmount.Currency, and is useful for accessing the field via an interface.
func (v *ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccountBalancesCurrencyAmountConnectionNodesCurrencyAmount) GetCurrency() ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccountBalancesCurrencyAmountConnectionNodesCurrencyAmountCurrency {
	return v.Currency
}

// GetAmount returns ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccountBalancesCurrencyAmountConnectionNodesCurrencyAmount.Amount, and is useful for accessing the field via an interface.
func (v *ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccountBalancesCurrencyAmountConnectionNodesCurrencyAmount) GetAmount() string {
	return v.Amount
}

// ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccountBalancesCurrencyAmountConnectionNodesCurrencyAmountCurrency includes the requested fields of the GraphQL type Currency.
type ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccountBalancesCurrencyAmountConnectionNodesCurrencyAmountCurrency struct {
	// The currency code. This is an [enum type](https://fragment.dev/api-reference#types-scalars-and-enums-currencycode) .
	Code CurrencyCode `json:"code"`
	// The ID for a custom currency. This is specified when creating the custom currency using the [createCustomCurrency](https://fragment.dev/api-reference#mutations-createcustomcurrency) mutation.
	CustomCurrencyId *string `json:"customCurrencyId"`
}

// GetCode returns ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccountBalancesCurrencyAmountConnectionNodesCurrencyAmountCurrency.Code, and is useful for accessing the field via an interface.
func (v *ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccountBalancesCurrencyAmountConnectionNodesCurrencyAmountCurrency) GetCode() CurrencyCode {
	return v.Code
}

// GetCustomCurrencyId returns ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccountBalancesCurrencyAmountConnectionNodesCurrencyAmountCurrency.CustomCurrencyId, and is useful for accessing the field via an interface.
func (v *ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccountBalancesCurrencyAmountConnectionNodesCurrencyAmountCurrency) GetCustomCurrencyId() *string {
	return v.CustomCurrencyId
}

// ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccountChildBalancesCurrencyAmountConnection includes the requested fields of the GraphQL type CurrencyAmountConnection.
// The GraphQL type's documentation follows.
//
// A paginated list of amounts with their currencies
type ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccountChildBalancesCurrencyAmountConnection struct {
	// The current page of results
	Nodes []ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccountChildBalancesCurrencyAmountConnectionNodesCurrencyAmount `json:"nodes"`
}

// GetNodes returns ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccountChildBalancesCurrencyAmountConnection.Nodes, and is useful for accessing the field via an interface.
func (v *ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccountChildBalancesCurrencyAmountConnection) GetNodes() []ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccountChildBalancesCurrencyAmountConnectionNodesCurrencyAmount {
	return v.Nodes
}

// ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccountChildBalancesCurrencyAmountConnectionNodesCurrencyAmount includes the requested fields of the GraphQL type CurrencyAmount.
// The GraphQL type's documentation follows.
//
// A single amount accompanied by its currency
type ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccountChildBalancesCurrencyAmountConnectionNodesCurrencyAmount struct {
	// The currency this amount is in
	Currency ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccountChildBalancesCurrencyAmountConnectionNodesCurrencyAmountCurrency `json:"currency"`
	// Numerical integer value, serialized as a string
	Amount string `json:"amount"`
}

// GetCurrency returns ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccountChildBalancesCurrencyAmountConnectionNodesCurrencyAmount.Currency, and is useful for accessing the field via an interface.
func (v *ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccountChildBalancesCurrencyAmountConnectionNodesCurrencyAmount) GetCurrency() ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccountChildBalancesCurrencyAmountConnectionNodesCurrencyAmountCurrency {
	return v.Currency
}

// GetAmount returns ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccountChildBalancesCurrencyAmountConnectionNodesCurrencyAmount.Amount, and is useful for accessing the field via an interface.
func (v *ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccountChildBalancesCurrencyAmountConnectionNodesCurrencyAmount) GetAmount() string {
	return v.Amount
}

// ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccountChildBalancesCurrencyAmountConnectionNodesCurrencyAmountCurrency includes the requested fields of the GraphQL type Currency.
type ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccountChildBalancesCurrencyAmountConnectionNodesCurrencyAmountCurrency struct {
	// The currency code. This is an [enum type](https://fragment.dev/api-reference#types-scalars-and-enums-currencycode) .
	Code CurrencyCode `json:"code"`
	// The ID for a custom currency. This is specified when creating the custom currency using the [createCustomCurrency](https://fragment.dev/api-reference#mutations-createcustomcurrency) mutation.
	CustomCurrencyId *string `json:"customCurrencyId"`
}

// GetCode returns ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccountChildBalancesCurrencyAmountConnectionNodesCurrencyAmountCurrency.Code, and is useful for accessing the field via an interface.
func (v *ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccountChildBalancesCurrencyAmountConnectionNodesCurrencyAmountCurrency) GetCode() CurrencyCode {
	return v.Code
}

// GetCustomCurrencyId returns ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccountChildBalancesCurrencyAmountConnectionNodesCurrencyAmountCurrency.CustomCurrencyId, and is useful for accessing the field via an interface.
func (v *ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccountChildBalancesCurrencyAmountConnectionNodesCurrencyAmountCurrency) GetCustomCurrencyId() *string {
	return v.CustomCurrencyId
}

// ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccountOwnBalancesCurrencyAmountConnection includes the requested fields of the GraphQL type CurrencyAmountConnection.
// The GraphQL type's documentation follows.
//
// A paginated list of amounts with their currencies
type ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccountOwnBalancesCurrencyAmountConnection struct {
	// The current page of results
	Nodes []ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccountOwnBalancesCurrencyAmountConnectionNodesCurrencyAmount `json:"nodes"`
}

// GetNodes returns ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccountOwnBalancesCurrencyAmountConnection.Nodes, and is useful for accessing the field via an interface.
func (v *ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccountOwnBalancesCurrencyAmountConnection) GetNodes() []ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccountOwnBalancesCurrencyAmountConnectionNodesCurrencyAmount {
	return v.Nodes
}

// ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccountOwnBalancesCurrencyAmountConnectionNodesCurrencyAmount includes the requested fields of the GraphQL type CurrencyAmount.
// The GraphQL type's documentation follows.
//
// A single amount accompanied by its currency
type ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccountOwnBalancesCurrencyAmountConnectionNodesCurrencyAmount struct {
	// The currency this amount is in
	Currency ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccountOwnBalancesCurrencyAmountConnectionNodesCurrencyAmountCurrency `json:"currency"`
	// Numerical integer value, serialized as a string
	Amount string `json:"amount"`
}

// GetCurrency returns ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccountOwnBalancesCurrencyAmountConnectionNodesCurrencyAmount.Currency, and is useful for accessing the field via an interface.
func (v *ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccountOwnBalancesCurrencyAmountConnectionNodesCurrencyAmount) GetCurrency() ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccountOwnBalancesCurrencyAmountConnectionNodesCurrencyAmountCurrency {
	return v.Currency
}

// GetAmount returns ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccountOwnBalancesCurrencyAmountConnectionNodesCurrencyAmount.Amount, and is useful for accessing the field via an interface.
func (v *ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccountOwnBalancesCurrencyAmountConnectionNodesCurrencyAmount) GetAmount() string {
	return v.Amount
}

// ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccountOwnBalancesCurrencyAmountConnectionNodesCurrencyAmountCurrency includes the requested fields of the GraphQL type Currency.
type ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccountOwnBalancesCurrencyAmountConnectionNodesCurrencyAmountCurrency struct {
	// The currency code. This is an [enum type](https://fragment.dev/api-reference#types-scalars-and-enums-currencycode) .
	Code CurrencyCode `json:"code"`
	// The ID for a custom currency. This is specified when creating the custom currency using the [createCustomCurrency](https://fragment.dev/api-reference#mutations-createcustomcurrency) mutation.
	CustomCurrencyId *string `json:"customCurrencyId"`
}

// GetCode returns ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccountOwnBalancesCurrencyAmountConnectionNodesCurrencyAmountCurrency.Code, and is useful for accessing the field via an interface.
func (v *ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccountOwnBalancesCurrencyAmountConnectionNodesCurrencyAmountCurrency) GetCode() CurrencyCode {
	return v.Code
}

// GetCustomCurrencyId returns ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccountOwnBalancesCurrencyAmountConnectionNodesCurrencyAmountCurrency.CustomCurrencyId, and is useful for accessing the field via an interface.
func (v *ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionNodesLedgerAccountOwnBalancesCurrencyAmountConnectionNodesCurrencyAmountCurrency) GetCustomCurrencyId() *string {
	return v.CustomCurrencyId
}

// ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// An object containing [pagination](https://fragment.dev/docs#query-data-basics-pagination) details.
type ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionPageInfo struct {
	HasNextPage     bool    `json:"hasNextPage"`
	EndCursor       *string `json:"endCursor"`
	HasPreviousPage bool    `json:"hasPreviousPage"`
	StartCursor     *string `json:"startCursor"`
}

// GetHasNextPage returns ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// GetEndCursor returns ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionPageInfo) GetEndCursor() *string {
	return v.EndCursor
}

// GetHasPreviousPage returns ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionPageInfo.HasPreviousPage, and is useful for accessing the field via an interface.
func (v *ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionPageInfo) GetHasPreviousPage() bool {
	return v.HasPreviousPage
}

// GetStartCursor returns ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionPageInfo.StartCursor, and is useful for accessing the field via an interface.
func (v *ListMultiCurrencyLedgerAccountBalancesLedgerLedgerAccountsLedgerAccountsConnectionPageInfo) GetStartCursor() *string {
	return v.StartCursor
}

// ListMultiCurrencyLedgerAccountBalancesResponse is returned by ListMultiCurrencyLedgerAccountBalances on success.
type ListMultiCurrencyLedgerAccountBalancesResponse struct {
	// Get a Ledger by ID
	Ledger *ListMultiCurrencyLedgerAccountBalancesLedger `json:"ledger"`
}

// GetLedger returns ListMultiCurrencyLedgerAccountBalancesResponse.Ledger, and is useful for accessing the field via an interface.
func (v *ListMultiCurrencyLedgerAccountBalancesResponse) GetLedger() *ListMultiCurrencyLedgerAccountBalancesLedger {
	return v.Ledger
}

// The consistency configuration of a Ledger Account's balance queries.
// If not provided as an argument to a balance query, the default behavior is to read eventually consistent balances.
// See [Configure consistency](https://fragment.dev/docs#configure-consistency).
type ReadBalanceConsistencyMode string

const (
	// Balance queries will read eventually consistent balances. This is the default behavior if `ReadBalanceConsistencyMode` is not provided as an argument to the balance field.
	// Both Ledger Accounts configured with strongly and eventually consistent balance updates support this enum.
	ReadBalanceConsistencyModeEventual ReadBalanceConsistencyMode = "eventual"
	// Balance queries will read strongly consistent balances. This is only allowed if the Ledger Account's `ownBalanceUpdates` in its `consistencyConfig` is `strong`.
	ReadBalanceConsistencyModeStrong ReadBalanceConsistencyMode = "strong"
	// Balance queries will use the value from the Ledger Account's `ownBalanceUpdates` in its `consistencyConfig`.
	ReadBalanceConsistencyModeUseAccount ReadBalanceConsistencyMode = "use_account"
)

// ReconcileTxReconcileTxBadRequestError includes the requested fields of the GraphQL type BadRequestError.
// The GraphQL type's documentation follows.
//
// Equivalent to an HTTP 400 - request either has missing or incorrect data
type ReconcileTxReconcileTxBadRequestError struct {
	Typename *string `json:"__typename"`
	// The HTTP status code corresponding to the error
	Code string `json:"code"`
	// The error message
	Message string `json:"message"`
}

// GetTypename returns ReconcileTxReconcileTxBadRequestError.Typename, and is useful for accessing the field via an interface.
func (v *ReconcileTxReconcileTxBadRequestError) GetTypename() *string { return v.Typename }

// GetCode returns ReconcileTxReconcileTxBadRequestError.Code, and is useful for accessing the field via an interface.
func (v *ReconcileTxReconcileTxBadRequestError) GetCode() string { return v.Code }

// GetMessage returns ReconcileTxReconcileTxBadRequestError.Message, and is useful for accessing the field via an interface.
func (v *ReconcileTxReconcileTxBadRequestError) GetMessage() string { return v.Message }

// ReconcileTxReconcileTxInternalError includes the requested fields of the GraphQL type InternalError.
// The GraphQL type's documentation follows.
//
// Equivalent to an HTTP 5XX - something went wrong with our API.
type ReconcileTxReconcileTxInternalError struct {
	Typename *string `json:"__typename"`
	// The HTTP status code corresponding to the error
	Code string `json:"code"`
	// The error message
	Message string `json:"message"`
}

// GetTypename returns ReconcileTxReconcileTxInternalError.Typename, and is useful for accessing the field via an interface.
func (v *ReconcileTxReconcileTxInternalError) GetTypename() *string { return v.Typename }

// GetCode returns ReconcileTxReconcileTxInternalError.Code, and is useful for accessing the field via an interface.
func (v *ReconcileTxReconcileTxInternalError) GetCode() string { return v.Code }

// GetMessage returns ReconcileTxReconcileTxInternalError.Message, and is useful for accessing the field via an interface.
func (v *ReconcileTxReconcileTxInternalError) GetMessage() string { return v.Message }

// ReconcileTxReconcileTxReconcileTxResponse includes the requested fields of the GraphQL interface ReconcileTxResponse.
//
// ReconcileTxReconcileTxReconcileTxResponse is implemented by the following types:
// ReconcileTxReconcileTxBadRequestError
// ReconcileTxReconcileTxInternalError
// ReconcileTxReconcileTxReconcileTxResult
type ReconcileTxReconcileTxReconcileTxResponse interface {
	implementsGraphQLInterfaceReconcileTxReconcileTxReconcileTxResponse()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *ReconcileTxReconcileTxBadRequestError) implementsGraphQLInterfaceReconcileTxReconcileTxReconcileTxResponse() {
}
func (v *ReconcileTxReconcileTxInternalError) implementsGraphQLInterfaceReconcileTxReconcileTxReconcileTxResponse() {
}
func (v *ReconcileTxReconcileTxReconcileTxResult) implementsGraphQLInterfaceReconcileTxReconcileTxReconcileTxResponse() {
}

func __unmarshalReconcileTxReconcileTxReconcileTxResponse(b []byte, v *ReconcileTxReconcileTxReconcileTxResponse) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "BadRequestError":
		*v = new(ReconcileTxReconcileTxBadRequestError)
		return json.Unmarshal(b, *v)
	case "InternalError":
		*v = new(ReconcileTxReconcileTxInternalError)
		return json.Unmarshal(b, *v)
	case "ReconcileTxResult":
		*v = new(ReconcileTxReconcileTxReconcileTxResult)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing ReconcileTxResponse.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for ReconcileTxReconcileTxReconcileTxResponse: "%v"`, tn.TypeName)
	}
}

func __marshalReconcileTxReconcileTxReconcileTxResponse(v *ReconcileTxReconcileTxReconcileTxResponse) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *ReconcileTxReconcileTxBadRequestError:
		typename = "BadRequestError"

		result := struct {
			TypeName string `json:"__typename"`
			*ReconcileTxReconcileTxBadRequestError
		}{typename, v}
		return json.Marshal(result)
	case *ReconcileTxReconcileTxInternalError:
		typename = "InternalError"

		result := struct {
			TypeName string `json:"__typename"`
			*ReconcileTxReconcileTxInternalError
		}{typename, v}
		return json.Marshal(result)
	case *ReconcileTxReconcileTxReconcileTxResult:
		typename = "ReconcileTxResult"

		result := struct {
			TypeName string `json:"__typename"`
			*ReconcileTxReconcileTxReconcileTxResult
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for ReconcileTxReconcileTxReconcileTxResponse: "%T"`, v)
	}
}

// ReconcileTxReconcileTxReconcileTxResult includes the requested fields of the GraphQL type ReconcileTxResult.
type ReconcileTxReconcileTxReconcileTxResult struct {
	Typename *string `json:"__typename"`
	// The ledger entry that was posted
	Entry ReconcileTxReconcileTxReconcileTxResultEntryLedgerEntry `json:"entry"`
	// The ledger lines that were created in that entry
	Lines []ReconcileTxReconcileTxReconcileTxResultLinesLedgerLine `json:"lines"`
}

// GetTypename returns ReconcileTxReconcileTxReconcileTxResult.Typename, and is useful for accessing the field via an interface.
func (v *ReconcileTxReconcileTxReconcileTxResult) GetTypename() *string { return v.Typename }

// GetEntry returns ReconcileTxReconcileTxReconcileTxResult.Entry, and is useful for accessing the field via an interface.
func (v *ReconcileTxReconcileTxReconcileTxResult) GetEntry() ReconcileTxReconcileTxReconcileTxResultEntryLedgerEntry {
	return v.Entry
}

// GetLines returns ReconcileTxReconcileTxReconcileTxResult.Lines, and is useful for accessing the field via an interface.
func (v *ReconcileTxReconcileTxReconcileTxResult) GetLines() []ReconcileTxReconcileTxReconcileTxResultLinesLedgerLine {
	return v.Lines
}

// ReconcileTxReconcileTxReconcileTxResultEntryLedgerEntry includes the requested fields of the GraphQL type LedgerEntry.
type ReconcileTxReconcileTxReconcileTxResultEntryLedgerEntry struct {
	// The ID of this LedgerEntry.
	Id string `json:"id"`
	// The idempotency key used to post this ledger entry
	Ik string `json:"ik"`
	// Date this LedgerEntry posted to its Ledger e.g. "2021-01-01".
	Date string `json:"date"`
	// ISO-8601 timestamp this LedgerEntry posted to its Ledger.
	Posted string `json:"posted"`
	// ISO-8601 timestamp this LedgerEntry was created in Fragment.
	Created string `json:"created"`
	// Description posted for this Ledger Entry.
	Description *string `json:"description"`
}

// GetId returns ReconcileTxReconcileTxReconcileTxResultEntryLedgerEntry.Id, and is useful for accessing the field via an interface.
func (v *ReconcileTxReconcileTxReconcileTxResultEntryLedgerEntry) GetId() string { return v.Id }

// GetIk returns ReconcileTxReconcileTxReconcileTxResultEntryLedgerEntry.Ik, and is useful for accessing the field via an interface.
func (v *ReconcileTxReconcileTxReconcileTxResultEntryLedgerEntry) GetIk() string { return v.Ik }

// GetDate returns ReconcileTxReconcileTxReconcileTxResultEntryLedgerEntry.Date, and is useful for accessing the field via an interface.
func (v *ReconcileTxReconcileTxReconcileTxResultEntryLedgerEntry) GetDate() string { return v.Date }

// GetPosted returns ReconcileTxReconcileTxReconcileTxResultEntryLedgerEntry.Posted, and is useful for accessing the field via an interface.
func (v *ReconcileTxReconcileTxReconcileTxResultEntryLedgerEntry) GetPosted() string { return v.Posted }

// GetCreated returns ReconcileTxReconcileTxReconcileTxResultEntryLedgerEntry.Created, and is useful for accessing the field via an interface.
func (v *ReconcileTxReconcileTxReconcileTxResultEntryLedgerEntry) GetCreated() string {
	return v.Created
}

// GetDescription returns ReconcileTxReconcileTxReconcileTxResultEntryLedgerEntry.Description, and is useful for accessing the field via an interface.
func (v *ReconcileTxReconcileTxReconcileTxResultEntryLedgerEntry) GetDescription() *string {
	return v.Description
}

// ReconcileTxReconcileTxReconcileTxResultLinesLedgerLine includes the requested fields of the GraphQL type LedgerLine.
type ReconcileTxReconcileTxReconcileTxResultLinesLedgerLine struct {
	Id string `json:"id"`
	// How much this line's LedgerAccount's balance changed in integer cents  (i.e. in USD 100 is 1 dollar, 100 cents)
	Amount string `json:"amount"`
	// LedgerAccount that contains this line
	Account ReconcileTxReconcileTxReconcileTxResultLinesLedgerLineAccountLedgerAccount `json:"account"`
	// ID in the external system of the transaction linked to this LedgerLine
	ExternalTxId *string `json:"externalTxId"`
}

// GetId returns ReconcileTxReconcileTxReconcileTxResultLinesLedgerLine.Id, and is useful for accessing the field via an interface.
func (v *ReconcileTxReconcileTxReconcileTxResultLinesLedgerLine) GetId() string { return v.Id }

// GetAmount returns ReconcileTxReconcileTxReconcileTxResultLinesLedgerLine.Amount, and is useful for accessing the field via an interface.
func (v *ReconcileTxReconcileTxReconcileTxResultLinesLedgerLine) GetAmount() string { return v.Amount }

// GetAccount returns ReconcileTxReconcileTxReconcileTxResultLinesLedgerLine.Account, and is useful for accessing the field via an interface.
func (v *ReconcileTxReconcileTxReconcileTxResultLinesLedgerLine) GetAccount() ReconcileTxReconcileTxReconcileTxResultLinesLedgerLineAccountLedgerAccount {
	return v.Account
}

// GetExternalTxId returns ReconcileTxReconcileTxReconcileTxResultLinesLedgerLine.ExternalTxId, and is useful for accessing the field via an interface.
func (v *ReconcileTxReconcileTxReconcileTxResultLinesLedgerLine) GetExternalTxId() *string {
	return v.ExternalTxId
}

// ReconcileTxReconcileTxReconcileTxResultLinesLedgerLineAccountLedgerAccount includes the requested fields of the GraphQL type LedgerAccount.
// The GraphQL type's documentation follows.
//
// A ledger account is a container for money
type ReconcileTxReconcileTxReconcileTxResultLinesLedgerLineAccountLedgerAccount struct {
	// The unique Path of the ledger account. This is a slash-delimited string containing the location of an account in its chart of accounts.
	// For accounts created with a schema, this will be composed of account keys. Else, for accounts created with the createLedgerAccounts API,
	// this will be composed of the IKs of an account and its ancestors.
	Path string `json:"path"`
}

// GetPath returns ReconcileTxReconcileTxReconcileTxResultLinesLedgerLineAccountLedgerAccount.Path, and is useful for accessing the field via an interface.
func (v *ReconcileTxReconcileTxReconcileTxResultLinesLedgerLineAccountLedgerAccount) GetPath() string {
	return v.Path
}

// ReconcileTxResponse is returned by ReconcileTx on success.
type ReconcileTxResponse struct {
	// This mutation is used to [reconcile](https://fragment.dev/docs#reconcile-transactions) transactions from an external system into a Ledger Entry. This mutation does not require an idempotency key since a transaction can only be reconciled once per Linked Ledger Account.  If you are reconciling a transfer between two Link Accounts which are both linked to the same Ledger, use a transit account in between to split the transfer into two `reconcileTx` calls.
	ReconcileTx ReconcileTxReconcileTxReconcileTxResponse `json:"-"`
}

// GetReconcileTx returns ReconcileTxResponse.ReconcileTx, and is useful for accessing the field via an interface.
func (v *ReconcileTxResponse) GetReconcileTx() ReconcileTxReconcileTxReconcileTxResponse {
	return v.ReconcileTx
}

func (v *ReconcileTxResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ReconcileTxResponse
		ReconcileTx json.RawMessage `json:"reconcileTx"`
		graphql.NoUnmarshalJSON
	}
	firstPass.ReconcileTxResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.ReconcileTx
		src := firstPass.ReconcileTx
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalReconcileTxReconcileTxReconcileTxResponse(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal ReconcileTxResponse.ReconcileTx: %w", err)
			}
		}
	}
	return nil
}

type __premarshalReconcileTxResponse struct {
	ReconcileTx json.RawMessage `json:"reconcileTx"`
}

func (v *ReconcileTxResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ReconcileTxResponse) __premarshalJSON() (*__premarshalReconcileTxResponse, error) {
	var retval __premarshalReconcileTxResponse

	{

		dst := &retval.ReconcileTx
		src := v.ReconcileTx
		var err error
		*dst, err = __marshalReconcileTxReconcileTxReconcileTxResponse(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal ReconcileTxResponse.ReconcileTx: %w", err)
		}
	}
	return &retval, nil
}

// ReconcileTxRuntimeReconcileTxBadRequestError includes the requested fields of the GraphQL type BadRequestError.
// The GraphQL type's documentation follows.
//
// Equivalent to an HTTP 400 - request either has missing or incorrect data
type ReconcileTxRuntimeReconcileTxBadRequestError struct {
	Typename *string `json:"__typename"`
	// The HTTP status code corresponding to the error
	Code string `json:"code"`
	// The error message
	Message string `json:"message"`
}

// GetTypename returns ReconcileTxRuntimeReconcileTxBadRequestError.Typename, and is useful for accessing the field via an interface.
func (v *ReconcileTxRuntimeReconcileTxBadRequestError) GetTypename() *string { return v.Typename }

// GetCode returns ReconcileTxRuntimeReconcileTxBadRequestError.Code, and is useful for accessing the field via an interface.
func (v *ReconcileTxRuntimeReconcileTxBadRequestError) GetCode() string { return v.Code }

// GetMessage returns ReconcileTxRuntimeReconcileTxBadRequestError.Message, and is useful for accessing the field via an interface.
func (v *ReconcileTxRuntimeReconcileTxBadRequestError) GetMessage() string { return v.Message }

// ReconcileTxRuntimeReconcileTxInternalError includes the requested fields of the GraphQL type InternalError.
// The GraphQL type's documentation follows.
//
// Equivalent to an HTTP 5XX - something went wrong with our API.
type ReconcileTxRuntimeReconcileTxInternalError struct {
	Typename *string `json:"__typename"`
	// The HTTP status code corresponding to the error
	Code string `json:"code"`
	// The error message
	Message string `json:"message"`
}

// GetTypename returns ReconcileTxRuntimeReconcileTxInternalError.Typename, and is useful for accessing the field via an interface.
func (v *ReconcileTxRuntimeReconcileTxInternalError) GetTypename() *string { return v.Typename }

// GetCode returns ReconcileTxRuntimeReconcileTxInternalError.Code, and is useful for accessing the field via an interface.
func (v *ReconcileTxRuntimeReconcileTxInternalError) GetCode() string { return v.Code }

// GetMessage returns ReconcileTxRuntimeReconcileTxInternalError.Message, and is useful for accessing the field via an interface.
func (v *ReconcileTxRuntimeReconcileTxInternalError) GetMessage() string { return v.Message }

// ReconcileTxRuntimeReconcileTxReconcileTxResponse includes the requested fields of the GraphQL interface ReconcileTxResponse.
//
// ReconcileTxRuntimeReconcileTxReconcileTxResponse is implemented by the following types:
// ReconcileTxRuntimeReconcileTxBadRequestError
// ReconcileTxRuntimeReconcileTxInternalError
// ReconcileTxRuntimeReconcileTxReconcileTxResult
type ReconcileTxRuntimeReconcileTxReconcileTxResponse interface {
	implementsGraphQLInterfaceReconcileTxRuntimeReconcileTxReconcileTxResponse()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *ReconcileTxRuntimeReconcileTxBadRequestError) implementsGraphQLInterfaceReconcileTxRuntimeReconcileTxReconcileTxResponse() {
}
func (v *ReconcileTxRuntimeReconcileTxInternalError) implementsGraphQLInterfaceReconcileTxRuntimeReconcileTxReconcileTxResponse() {
}
func (v *ReconcileTxRuntimeReconcileTxReconcileTxResult) implementsGraphQLInterfaceReconcileTxRuntimeReconcileTxReconcileTxResponse() {
}

func __unmarshalReconcileTxRuntimeReconcileTxReconcileTxResponse(b []byte, v *ReconcileTxRuntimeReconcileTxReconcileTxResponse) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "BadRequestError":
		*v = new(ReconcileTxRuntimeReconcileTxBadRequestError)
		return json.Unmarshal(b, *v)
	case "InternalError":
		*v = new(ReconcileTxRuntimeReconcileTxInternalError)
		return json.Unmarshal(b, *v)
	case "ReconcileTxResult":
		*v = new(ReconcileTxRuntimeReconcileTxReconcileTxResult)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing ReconcileTxResponse.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for ReconcileTxRuntimeReconcileTxReconcileTxResponse: "%v"`, tn.TypeName)
	}
}

func __marshalReconcileTxRuntimeReconcileTxReconcileTxResponse(v *ReconcileTxRuntimeReconcileTxReconcileTxResponse) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *ReconcileTxRuntimeReconcileTxBadRequestError:
		typename = "BadRequestError"

		result := struct {
			TypeName string `json:"__typename"`
			*ReconcileTxRuntimeReconcileTxBadRequestError
		}{typename, v}
		return json.Marshal(result)
	case *ReconcileTxRuntimeReconcileTxInternalError:
		typename = "InternalError"

		result := struct {
			TypeName string `json:"__typename"`
			*ReconcileTxRuntimeReconcileTxInternalError
		}{typename, v}
		return json.Marshal(result)
	case *ReconcileTxRuntimeReconcileTxReconcileTxResult:
		typename = "ReconcileTxResult"

		result := struct {
			TypeName string `json:"__typename"`
			*ReconcileTxRuntimeReconcileTxReconcileTxResult
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for ReconcileTxRuntimeReconcileTxReconcileTxResponse: "%T"`, v)
	}
}

// ReconcileTxRuntimeReconcileTxReconcileTxResult includes the requested fields of the GraphQL type ReconcileTxResult.
type ReconcileTxRuntimeReconcileTxReconcileTxResult struct {
	Typename *string `json:"__typename"`
	// The ledger entry that was posted
	Entry ReconcileTxRuntimeReconcileTxReconcileTxResultEntryLedgerEntry `json:"entry"`
	// The ledger lines that were created in that entry
	Lines []ReconcileTxRuntimeReconcileTxReconcileTxResultLinesLedgerLine `json:"lines"`
}

// GetTypename returns ReconcileTxRuntimeReconcileTxReconcileTxResult.Typename, and is useful for accessing the field via an interface.
func (v *ReconcileTxRuntimeReconcileTxReconcileTxResult) GetTypename() *string { return v.Typename }

// GetEntry returns ReconcileTxRuntimeReconcileTxReconcileTxResult.Entry, and is useful for accessing the field via an interface.
func (v *ReconcileTxRuntimeReconcileTxReconcileTxResult) GetEntry() ReconcileTxRuntimeReconcileTxReconcileTxResultEntryLedgerEntry {
	return v.Entry
}

// GetLines returns ReconcileTxRuntimeReconcileTxReconcileTxResult.Lines, and is useful for accessing the field via an interface.
func (v *ReconcileTxRuntimeReconcileTxReconcileTxResult) GetLines() []ReconcileTxRuntimeReconcileTxReconcileTxResultLinesLedgerLine {
	return v.Lines
}

// ReconcileTxRuntimeReconcileTxReconcileTxResultEntryLedgerEntry includes the requested fields of the GraphQL type LedgerEntry.
type ReconcileTxRuntimeReconcileTxReconcileTxResultEntryLedgerEntry struct {
	// The ID of this LedgerEntry.
	Id string `json:"id"`
	// The idempotency key used to post this ledger entry
	Ik string `json:"ik"`
	// Date this LedgerEntry posted to its Ledger e.g. "2021-01-01".
	Date string `json:"date"`
	// ISO-8601 timestamp this LedgerEntry posted to its Ledger.
	Posted string `json:"posted"`
	// ISO-8601 timestamp this LedgerEntry was created in Fragment.
	Created string `json:"created"`
	// Description posted for this Ledger Entry.
	Description *string `json:"description"`
}

// GetId returns ReconcileTxRuntimeReconcileTxReconcileTxResultEntryLedgerEntry.Id, and is useful for accessing the field via an interface.
func (v *ReconcileTxRuntimeReconcileTxReconcileTxResultEntryLedgerEntry) GetId() string { return v.Id }

// GetIk returns ReconcileTxRuntimeReconcileTxReconcileTxResultEntryLedgerEntry.Ik, and is useful for accessing the field via an interface.
func (v *ReconcileTxRuntimeReconcileTxReconcileTxResultEntryLedgerEntry) GetIk() string { return v.Ik }

// GetDate returns ReconcileTxRuntimeReconcileTxReconcileTxResultEntryLedgerEntry.Date, and is useful for accessing the field via an interface.
func (v *ReconcileTxRuntimeReconcileTxReconcileTxResultEntryLedgerEntry) GetDate() string {
	return v.Date
}

// GetPosted returns ReconcileTxRuntimeReconcileTxReconcileTxResultEntryLedgerEntry.Posted, and is useful for accessing the field via an interface.
func (v *ReconcileTxRuntimeReconcileTxReconcileTxResultEntryLedgerEntry) GetPosted() string {
	return v.Posted
}

// GetCreated returns ReconcileTxRuntimeReconcileTxReconcileTxResultEntryLedgerEntry.Created, and is useful for accessing the field via an interface.
func (v *ReconcileTxRuntimeReconcileTxReconcileTxResultEntryLedgerEntry) GetCreated() string {
	return v.Created
}

// GetDescription returns ReconcileTxRuntimeReconcileTxReconcileTxResultEntryLedgerEntry.Description, and is useful for accessing the field via an interface.
func (v *ReconcileTxRuntimeReconcileTxReconcileTxResultEntryLedgerEntry) GetDescription() *string {
	return v.Description
}

// ReconcileTxRuntimeReconcileTxReconcileTxResultLinesLedgerLine includes the requested fields of the GraphQL type LedgerLine.
type ReconcileTxRuntimeReconcileTxReconcileTxResultLinesLedgerLine struct {
	Id string `json:"id"`
	// How much this line's LedgerAccount's balance changed in integer cents  (i.e. in USD 100 is 1 dollar, 100 cents)
	Amount string `json:"amount"`
	// LedgerAccount that contains this line
	Account ReconcileTxRuntimeReconcileTxReconcileTxResultLinesLedgerLineAccountLedgerAccount `json:"account"`
	// ID in the external system of the transaction linked to this LedgerLine
	ExternalTxId *string `json:"externalTxId"`
}

// GetId returns ReconcileTxRuntimeReconcileTxReconcileTxResultLinesLedgerLine.Id, and is useful for accessing the field via an interface.
func (v *ReconcileTxRuntimeReconcileTxReconcileTxResultLinesLedgerLine) GetId() string { return v.Id }

// GetAmount returns ReconcileTxRuntimeReconcileTxReconcileTxResultLinesLedgerLine.Amount, and is useful for accessing the field via an interface.
func (v *ReconcileTxRuntimeReconcileTxReconcileTxResultLinesLedgerLine) GetAmount() string {
	return v.Amount
}

// GetAccount returns ReconcileTxRuntimeReconcileTxReconcileTxResultLinesLedgerLine.Account, and is useful for accessing the field via an interface.
func (v *ReconcileTxRuntimeReconcileTxReconcileTxResultLinesLedgerLine) GetAccount() ReconcileTxRuntimeReconcileTxReconcileTxResultLinesLedgerLineAccountLedgerAccount {
	return v.Account
}

// GetExternalTxId returns ReconcileTxRuntimeReconcileTxReconcileTxResultLinesLedgerLine.ExternalTxId, and is useful for accessing the field via an interface.
func (v *ReconcileTxRuntimeReconcileTxReconcileTxResultLinesLedgerLine) GetExternalTxId() *string {
	return v.ExternalTxId
}

// ReconcileTxRuntimeReconcileTxReconcileTxResultLinesLedgerLineAccountLedgerAccount includes the requested fields of the GraphQL type LedgerAccount.
// The GraphQL type's documentation follows.
//
// A ledger account is a container for money
type ReconcileTxRuntimeReconcileTxReconcileTxResultLinesLedgerLineAccountLedgerAccount struct {
	// The unique Path of the ledger account. This is a slash-delimited string containing the location of an account in its chart of accounts.
	// For accounts created with a schema, this will be composed of account keys. Else, for accounts created with the createLedgerAccounts API,
	// this will be composed of the IKs of an account and its ancestors.
	Path string `json:"path"`
}

// GetPath returns ReconcileTxRuntimeReconcileTxReconcileTxResultLinesLedgerLineAccountLedgerAccount.Path, and is useful for accessing the field via an interface.
func (v *ReconcileTxRuntimeReconcileTxReconcileTxResultLinesLedgerLineAccountLedgerAccount) GetPath() string {
	return v.Path
}

// ReconcileTxRuntimeResponse is returned by ReconcileTxRuntime on success.
type ReconcileTxRuntimeResponse struct {
	// This mutation is used to [reconcile](https://fragment.dev/docs#reconcile-transactions) transactions from an external system into a Ledger Entry. This mutation does not require an idempotency key since a transaction can only be reconciled once per Linked Ledger Account.  If you are reconciling a transfer between two Link Accounts which are both linked to the same Ledger, use a transit account in between to split the transfer into two `reconcileTx` calls.
	ReconcileTx ReconcileTxRuntimeReconcileTxReconcileTxResponse `json:"-"`
}

// GetReconcileTx returns ReconcileTxRuntimeResponse.ReconcileTx, and is useful for accessing the field via an interface.
func (v *ReconcileTxRuntimeResponse) GetReconcileTx() ReconcileTxRuntimeReconcileTxReconcileTxResponse {
	return v.ReconcileTx
}

func (v *ReconcileTxRuntimeResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ReconcileTxRuntimeResponse
		ReconcileTx json.RawMessage `json:"reconcileTx"`
		graphql.NoUnmarshalJSON
	}
	firstPass.ReconcileTxRuntimeResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.ReconcileTx
		src := firstPass.ReconcileTx
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalReconcileTxRuntimeReconcileTxReconcileTxResponse(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal ReconcileTxRuntimeResponse.ReconcileTx: %w", err)
			}
		}
	}
	return nil
}

type __premarshalReconcileTxRuntimeResponse struct {
	ReconcileTx json.RawMessage `json:"reconcileTx"`
}

func (v *ReconcileTxRuntimeResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ReconcileTxRuntimeResponse) __premarshalJSON() (*__premarshalReconcileTxRuntimeResponse, error) {
	var retval __premarshalReconcileTxRuntimeResponse

	{

		dst := &retval.ReconcileTx
		src := v.ReconcileTx
		var err error
		*dst, err = __marshalReconcileTxRuntimeReconcileTxReconcileTxResponse(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal ReconcileTxRuntimeResponse.ReconcileTx: %w", err)
		}
	}
	return &retval, nil
}

// A simulated Ledger Entry posted as a part of a Scene.
type SceneEntryInput struct {
	// Any parameters to be used as inputs to this simulated Ledger Entry.
	Parameters *json.RawMessage `json:"parameters"`
	// The type of the simulated Ledger Entry. Must match one of the types provided in schema.ledgerEntries.types.
	Type string `json:"type"`
}

// GetParameters returns SceneEntryInput.Parameters, and is useful for accessing the field via an interface.
func (v *SceneEntryInput) GetParameters() *json.RawMessage { return v.Parameters }

// GetType returns SceneEntryInput.Type, and is useful for accessing the field via an interface.
func (v *SceneEntryInput) GetType() string { return v.Type }

type SceneEventInput struct {
	// The simulated Ledger Entry.
	Entry SceneEntryInput `json:"entry"`
	// The type of the Scene Event. Currently, only entries are supported.
	EventType SceneEventType `json:"eventType"`
}

// GetEntry returns SceneEventInput.Entry, and is useful for accessing the field via an interface.
func (v *SceneEventInput) GetEntry() SceneEntryInput { return v.Entry }

// GetEventType returns SceneEventInput.EventType, and is useful for accessing the field via an interface.
func (v *SceneEventInput) GetEventType() SceneEventType { return v.EventType }

type SceneEventType string

const (
	SceneEventTypeEntry SceneEventType = "entry"
)

type SceneInput struct {
	// A list of simulated ledger entries that make up the Scene.
	Events []SceneEventInput `json:"events"`
	// The human-readable name of the Scene.
	Name string `json:"name"`
}

// GetEvents returns SceneInput.Events, and is useful for accessing the field via an interface.
func (v *SceneInput) GetEvents() []SceneEventInput { return v.Events }

// GetName returns SceneInput.Name, and is useful for accessing the field via an interface.
func (v *SceneInput) GetName() string { return v.Name }

// A condition that must be met on a Ledger Account balance. The condition can be
// either a `precondition` or `postcondition`.
type SchemaConditionInput struct {
	// A condition on the `ownBalance` of the Ledger Account.
	OwnBalance *SchemaInt96ConditionInput `json:"ownBalance"`
}

// GetOwnBalance returns SchemaConditionInput.OwnBalance, and is useful for accessing the field via an interface.
func (v *SchemaConditionInput) GetOwnBalance() *SchemaInt96ConditionInput { return v.OwnBalance }

// The consistency configuration for entities created within Ledgers created by this Schema.
//
// See [Configure consistency](https://fragment.dev/docs#configure-consistency).
type SchemaConsistencyConfigInput struct {
	// The consistency mode for the Ledger Entries list query within Ledgers created by this Schema.
	//
	// See [Configure consistency](https://fragment.dev/docs#configure-consistency).
	Entries *SchemaConsistencyMode `json:"entries"`
}

// GetEntries returns SchemaConsistencyConfigInput.Entries, and is useful for accessing the field via an interface.
func (v *SchemaConsistencyConfigInput) GetEntries() *SchemaConsistencyMode { return v.Entries }

// The consistency modes available for entities created within this Schema.
//
// See [Configure consistency](https://fragment.dev/docs#configure-consistency).
type SchemaConsistencyMode string

const (
	// Eventually consistent entity updates
	SchemaConsistencyModeEventual SchemaConsistencyMode = "eventual"
	// Strongly consistent entity updates
	SchemaConsistencyModeStrong SchemaConsistencyMode = "strong"
)

// Matches a Currency. Can be a built-in [CurrencyCode](https://fragment.dev/api-reference#types-scalars-and-enums-currencycode), custom Currency, or a parameterized string.
// If you supply a parameterized string, you must pass in a valid CurrencyCode as a parameter when posting a Ledger Entry.
type SchemaCurrencyMatchInput struct {
	// The currency code. This must either be a [CurrencyCode](https://fragment.dev/api-reference#types-scalars-and-enums-currencycode) or a parameterized string that resolves to a CurrencyCode .
	Code string `json:"code"`
	// The ID for a custom currency. This is specified when creating the custom currency using the [createCustomCurrency](https://fragment.dev/api-reference#mutations-createcustomcurrency) mutation.
	CustomCurrencyId *string `json:"customCurrencyId"`
}

// GetCode returns SchemaCurrencyMatchInput.Code, and is useful for accessing the field via an interface.
func (v *SchemaCurrencyMatchInput) GetCode() string { return v.Code }

// GetCustomCurrencyId returns SchemaCurrencyMatchInput.CustomCurrencyId, and is useful for accessing the field via an interface.
func (v *SchemaCurrencyMatchInput) GetCustomCurrencyId() *string { return v.CustomCurrencyId }

type SchemaExternalAccountMatchInput struct {
	// The External systems's ID of the account
	ExternalId *string `json:"externalId"`
	// The FRAGMENT ID of the external account
	Id *string `json:"id"`
	// The FRAGMENT ID of the link
	LinkId *string `json:"linkId"`
}

// GetExternalId returns SchemaExternalAccountMatchInput.ExternalId, and is useful for accessing the field via an interface.
func (v *SchemaExternalAccountMatchInput) GetExternalId() *string { return v.ExternalId }

// GetId returns SchemaExternalAccountMatchInput.Id, and is useful for accessing the field via an interface.
func (v *SchemaExternalAccountMatchInput) GetId() *string { return v.Id }

// GetLinkId returns SchemaExternalAccountMatchInput.LinkId, and is useful for accessing the field via an interface.
func (v *SchemaExternalAccountMatchInput) GetLinkId() *string { return v.LinkId }

// Input to the API for creating a Schema.
type SchemaInput struct {
	// The Chart of Accounts for the Schema.
	ChartOfAccounts ChartOfAccountsInput `json:"chartOfAccounts"`
	// The consistency configuration for this Schema.
	ConsistencyConfig *SchemaConsistencyConfigInput `json:"consistencyConfig"`
	// The key of the Schema. This is a stable, unique identifier for the Schema. Uniqueness is enforced at the Workspace level.
	Key string `json:"key"`
	// The Ledger Entries to add to the Schema.
	LedgerEntries *SchemaLedgerEntriesInput `json:"ledgerEntries"`
	// The human-readable name of the Schema.
	Name *string `json:"name"`
	// Any scenes associated with this Schema.
	Scenes []SceneInput `json:"scenes"`
}

// GetChartOfAccounts returns SchemaInput.ChartOfAccounts, and is useful for accessing the field via an interface.
func (v *SchemaInput) GetChartOfAccounts() ChartOfAccountsInput { return v.ChartOfAccounts }

// GetConsistencyConfig returns SchemaInput.ConsistencyConfig, and is useful for accessing the field via an interface.
func (v *SchemaInput) GetConsistencyConfig() *SchemaConsistencyConfigInput {
	return v.ConsistencyConfig
}

// GetKey returns SchemaInput.Key, and is useful for accessing the field via an interface.
func (v *SchemaInput) GetKey() string { return v.Key }

// GetLedgerEntries returns SchemaInput.LedgerEntries, and is useful for accessing the field via an interface.
func (v *SchemaInput) GetLedgerEntries() *SchemaLedgerEntriesInput { return v.LedgerEntries }

// GetName returns SchemaInput.Name, and is useful for accessing the field via an interface.
func (v *SchemaInput) GetName() *string { return v.Name }

// GetScenes returns SchemaInput.Scenes, and is useful for accessing the field via an interface.
func (v *SchemaInput) GetScenes() []SceneInput { return v.Scenes }

// A condition that must be met on a field.
type SchemaInt96ConditionInput struct {
	// Amount must be exactly equal to this value. You may not specify this alongside `gte` or `lte`.
	Eq *string `json:"eq"`
	// Amount must be greater than or equal to this value.
	Gte *string `json:"gte"`
	// Amount must be less than or equal to this value.
	Lte *string `json:"lte"`
}

// GetEq returns SchemaInt96ConditionInput.Eq, and is useful for accessing the field via an interface.
func (v *SchemaInt96ConditionInput) GetEq() *string { return v.Eq }

// GetGte returns SchemaInt96ConditionInput.Gte, and is useful for accessing the field via an interface.
func (v *SchemaInt96ConditionInput) GetGte() *string { return v.Gte }

// GetLte returns SchemaInt96ConditionInput.Lte, and is useful for accessing the field via an interface.
func (v *SchemaInt96ConditionInput) GetLte() *string { return v.Lte }

// Models a Ledger Account in a Schema.
// Upon successfully storing a [Schema](https://fragment.dev/api-reference#types-core-types-schema), a [LedgerAccount](https://fragment.dev/api-reference#types-core-types-ledgeraccount) will be created for
// each corresponding non-templated `SchemaLedgerAccountInput` in your Chart of Accounts.
type SchemaLedgerAccountInput struct {
	// Ledger Accounts to create as children of this Ledger Account. Ledger Accounts may be nested up to a maximum depth of 10.
	Children []SchemaLedgerAccountInput `json:"children"`
	// The consistency configuration for this ledger account. See [Configure consistency](https://fragment.dev/docs#configure-consistency).
	ConsistencyConfig *LedgerAccountConsistencyConfigInput `json:"consistencyConfig"`
	// The currency of this Ledger Account. If this is not set, and `currencyMode` is
	// not set to `multi`, it is derived from the Chart of Accounts' default.
	Currency *SchemaCurrencyMatchInput `json:"currency"`
	// If set to `multi`, creates a multi-currency Ledger Account. If set to `single`, creates a single-currency Ledger Account.
	CurrencyMode *CurrencyMode `json:"currencyMode"`
	// The key of this Ledger Account. Keys are used to formulate the unique path of the Ledger Account in your Chart of Accounts.
	// Siblings must have unique keys.
	Key string `json:"key"`
	// The External Account to link to this Ledger Account.
	// It must be provided of `linked` is true.
	LinkedAccount *SchemaExternalAccountMatchInput `json:"linkedAccount"`
	// The human-readable name of this Ledger Account.
	Name *string `json:"name"`
	// Whether or not this Ledger Account should be templated.
	Template *bool `json:"template"`
	// The type of ledger account to create. Required if this is a top-level Ledger Account. If not provided, the type will be inferred from the parent.
	Type *LedgerAccountTypes `json:"type"`
}

// GetChildren returns SchemaLedgerAccountInput.Children, and is useful for accessing the field via an interface.
func (v *SchemaLedgerAccountInput) GetChildren() []SchemaLedgerAccountInput { return v.Children }

// GetConsistencyConfig returns SchemaLedgerAccountInput.ConsistencyConfig, and is useful for accessing the field via an interface.
func (v *SchemaLedgerAccountInput) GetConsistencyConfig() *LedgerAccountConsistencyConfigInput {
	return v.ConsistencyConfig
}

// GetCurrency returns SchemaLedgerAccountInput.Currency, and is useful for accessing the field via an interface.
func (v *SchemaLedgerAccountInput) GetCurrency() *SchemaCurrencyMatchInput { return v.Currency }

// GetCurrencyMode returns SchemaLedgerAccountInput.CurrencyMode, and is useful for accessing the field via an interface.
func (v *SchemaLedgerAccountInput) GetCurrencyMode() *CurrencyMode { return v.CurrencyMode }

// GetKey returns SchemaLedgerAccountInput.Key, and is useful for accessing the field via an interface.
func (v *SchemaLedgerAccountInput) GetKey() string { return v.Key }

// GetLinkedAccount returns SchemaLedgerAccountInput.LinkedAccount, and is useful for accessing the field via an interface.
func (v *SchemaLedgerAccountInput) GetLinkedAccount() *SchemaExternalAccountMatchInput {
	return v.LinkedAccount
}

// GetName returns SchemaLedgerAccountInput.Name, and is useful for accessing the field via an interface.
func (v *SchemaLedgerAccountInput) GetName() *string { return v.Name }

// GetTemplate returns SchemaLedgerAccountInput.Template, and is useful for accessing the field via an interface.
func (v *SchemaLedgerAccountInput) GetTemplate() *bool { return v.Template }

// GetType returns SchemaLedgerAccountInput.Type, and is useful for accessing the field via an interface.
func (v *SchemaLedgerAccountInput) GetType() *LedgerAccountTypes { return v.Type }

// Matches a Ledger Account in a Schema.
type SchemaLedgerAccountMatchInput struct {
	// The unique path of the Ledger Account in the Schema.
	// This is a slash-delimited string containing the keys of a Ledger Account and all its direct ancestors.
	// ex: expense-root/subscriptions/netflix
	// For Templated Ledger Accounts, you must supply a parameter in the path that will be used to name an instance of the template.
	// ex: `"expense-root/subscriptions/vendor:{{vendor_name}}"`
	Path string `json:"path"`
}

// GetPath returns SchemaLedgerAccountMatchInput.Path, and is useful for accessing the field via an interface.
func (v *SchemaLedgerAccountMatchInput) GetPath() string { return v.Path }

// The Ledger Entries in your Schema.
type SchemaLedgerEntriesInput struct {
	// A list of Ledger Entry definitions.
	Types []SchemaLedgerEntryInput `json:"types"`
}

// GetTypes returns SchemaLedgerEntriesInput.Types, and is useful for accessing the field via an interface.
func (v *SchemaLedgerEntriesInput) GetTypes() []SchemaLedgerEntryInput { return v.Types }

// A condition that must be met on a Ledger Account when a Ledger Entry is posted.
type SchemaLedgerEntryConditionInput struct {
	// The Ledger Account to apply the condition to.
	Account SchemaLedgerAccountMatchInput `json:"account"`
	// The currency of the balance to apply the condition to. Required if the Ledger Account matched is a multi-currency Ledger Account.
	// Otherwise, this field is defaults to the Ledger Account's currency.
	Currency *SchemaCurrencyMatchInput `json:"currency"`
	// A `postcondition` must be met after the Ledger Entry updates are applied.
	Postcondition *SchemaConditionInput `json:"postcondition"`
	// A `precondition` must be met before any Ledger Entry updates are applied.
	Precondition *SchemaConditionInput `json:"precondition"`
}

// GetAccount returns SchemaLedgerEntryConditionInput.Account, and is useful for accessing the field via an interface.
func (v *SchemaLedgerEntryConditionInput) GetAccount() SchemaLedgerAccountMatchInput {
	return v.Account
}

// GetCurrency returns SchemaLedgerEntryConditionInput.Currency, and is useful for accessing the field via an interface.
func (v *SchemaLedgerEntryConditionInput) GetCurrency() *SchemaCurrencyMatchInput { return v.Currency }

// GetPostcondition returns SchemaLedgerEntryConditionInput.Postcondition, and is useful for accessing the field via an interface.
func (v *SchemaLedgerEntryConditionInput) GetPostcondition() *SchemaConditionInput {
	return v.Postcondition
}

// GetPrecondition returns SchemaLedgerEntryConditionInput.Precondition, and is useful for accessing the field via an interface.
func (v *SchemaLedgerEntryConditionInput) GetPrecondition() *SchemaConditionInput {
	return v.Precondition
}

// A Ledger Entry Group associated with a Ledger Entry type.
type SchemaLedgerEntryGroupInput struct {
	// The key for this Ledger Entry Group.
	Key string `json:"key"`
	// The value associated with this Ledger Entry Group.
	Value string `json:"value"`
}

// GetKey returns SchemaLedgerEntryGroupInput.Key, and is useful for accessing the field via an interface.
func (v *SchemaLedgerEntryGroupInput) GetKey() string { return v.Key }

// GetValue returns SchemaLedgerEntryGroupInput.Value, and is useful for accessing the field via an interface.
func (v *SchemaLedgerEntryGroupInput) GetValue() string { return v.Value }

// A Ledger Entry in a Schema. All Ledger Entries defined in a Schema must have a unique `type`.
type SchemaLedgerEntryInput struct {
	// Conditions that must be satisfied to post this Ledger Entry. The Ledger Entry will reject with a BadRequestError if any condition is not met. You can only add a condition on a Ledger Account containing a Line in this Ledger Entry.
	Conditions []SchemaLedgerEntryConditionInput `json:"conditions"`
	// Human-readable description of the Ledger Entry.
	Description *string `json:"description"`
	// Ledger Entries posted with this type will be in these Ledger Entry Groups.
	Groups []SchemaLedgerEntryGroupInput `json:"groups"`
	// The Ledger Lines in the Ledger Entry.
	// If provided, when posting a Typed Entry, a [LedgerEntry](https://fragment.dev/api-reference#types-core-types-ledgerline) will be posted containing [LedgerLines](https://fragment.dev/api-reference#types-core-types-ledgerline) corresponding
	// to the values you provide here. If your lines contain parameters, you must supply values for those parameters that balance out the Ledger Entry. If not provided, lines will be required when posting a Typed Entry.
	Lines []SchemaLedgerLineInput `json:"lines"`
	// Fixed partial set of parameters to be included in a templated Ledger Entry.
	Parameters *json.RawMessage `json:"parameters"`
	// Ledger Entries posted with this type will be associated with these tags.
	Tags []SchemaLedgerEntryTagInput `json:"tags"`
	// The type of this Ledger Entry. This is a stable, unique identifier for this entry. Uniqueness is enforced at the Schema level.
	// You can filter on this field when querying for Ledger Entries. See the docs on [LedgerEntryFilterSet](https://fragment.dev/api-reference#types-filter-types-ledgerentriesfilterset)
	Type string `json:"type"`
}

// GetConditions returns SchemaLedgerEntryInput.Conditions, and is useful for accessing the field via an interface.
func (v *SchemaLedgerEntryInput) GetConditions() []SchemaLedgerEntryConditionInput {
	return v.Conditions
}

// GetDescription returns SchemaLedgerEntryInput.Description, and is useful for accessing the field via an interface.
func (v *SchemaLedgerEntryInput) GetDescription() *string { return v.Description }

// GetGroups returns SchemaLedgerEntryInput.Groups, and is useful for accessing the field via an interface.
func (v *SchemaLedgerEntryInput) GetGroups() []SchemaLedgerEntryGroupInput { return v.Groups }

// GetLines returns SchemaLedgerEntryInput.Lines, and is useful for accessing the field via an interface.
func (v *SchemaLedgerEntryInput) GetLines() []SchemaLedgerLineInput { return v.Lines }

// GetParameters returns SchemaLedgerEntryInput.Parameters, and is useful for accessing the field via an interface.
func (v *SchemaLedgerEntryInput) GetParameters() *json.RawMessage { return v.Parameters }

// GetTags returns SchemaLedgerEntryInput.Tags, and is useful for accessing the field via an interface.
func (v *SchemaLedgerEntryInput) GetTags() []SchemaLedgerEntryTagInput { return v.Tags }

// GetType returns SchemaLedgerEntryInput.Type, and is useful for accessing the field via an interface.
func (v *SchemaLedgerEntryInput) GetType() string { return v.Type }

// A tag associated with a Ledger Entry type.
type SchemaLedgerEntryTagInput struct {
	// The key for this tag.
	Key string `json:"key"`
	// The value associated with the given key for this tag.
	Value string `json:"value"`
}

// GetKey returns SchemaLedgerEntryTagInput.Key, and is useful for accessing the field via an interface.
func (v *SchemaLedgerEntryTagInput) GetKey() string { return v.Key }

// GetValue returns SchemaLedgerEntryTagInput.Value, and is useful for accessing the field via an interface.
func (v *SchemaLedgerEntryTagInput) GetValue() string { return v.Value }

// A Ledger Line in a Ledger Entry.
type SchemaLedgerLineInput struct {
	// The Ledger Account this Ledger Line will be posted to.
	// It supports parameters in its attributes via handlebars syntax.
	Account SchemaLedgerAccountMatchInput `json:"account"`
	// The amount of the Ledger Line. It supports parameters via the handlebars syntax and addition (+) and subtraction (-).
	Amount *string `json:"amount"`
	// The currency of the Ledger Line. This is required if the Ledger Account has currencyMode multi.
	// It supports parameters in its attributes via handlebars syntax.
	Currency *SchemaCurrencyMatchInput `json:"currency"`
	// Human-readable description of the line.
	Description *string `json:"description"`
	// The key for the Ledger Line. Ledger Line keys must be unique within a Ledger Entry. Key can be filtered on as part of the LedgerLinesFilterSet.
	Key string `json:"key"`
	// The external transaction to reconcile.
	// This field is required if the Ledger Account being posted to is a Linked Ledger Account. Otherwise, this field is disallowed.
	// It supports parameters in its attributes via handlebars syntax.
	//
	// See the docs on [reconciliation and Linked Ledger Accounts](https://fragment.dev/docs#reconcile-transactions).
	Tx *SchemaTxMatchInput `json:"tx"`
}

// GetAccount returns SchemaLedgerLineInput.Account, and is useful for accessing the field via an interface.
func (v *SchemaLedgerLineInput) GetAccount() SchemaLedgerAccountMatchInput { return v.Account }

// GetAmount returns SchemaLedgerLineInput.Amount, and is useful for accessing the field via an interface.
func (v *SchemaLedgerLineInput) GetAmount() *string { return v.Amount }

// GetCurrency returns SchemaLedgerLineInput.Currency, and is useful for accessing the field via an interface.
func (v *SchemaLedgerLineInput) GetCurrency() *SchemaCurrencyMatchInput { return v.Currency }

// GetDescription returns SchemaLedgerLineInput.Description, and is useful for accessing the field via an interface.
func (v *SchemaLedgerLineInput) GetDescription() *string { return v.Description }

// GetKey returns SchemaLedgerLineInput.Key, and is useful for accessing the field via an interface.
func (v *SchemaLedgerLineInput) GetKey() string { return v.Key }

// GetTx returns SchemaLedgerLineInput.Tx, and is useful for accessing the field via an interface.
func (v *SchemaLedgerLineInput) GetTx() *SchemaTxMatchInput { return v.Tx }

// Matches a transaction at an external system.
// This is used to specify the transaction being reconciled into a Linked Ledger Account
type SchemaTxMatchInput struct {
	// The external system's ID for the transaction.
	ExternalId *string `json:"externalId"`
	// The FRAGMENT ID for the transaction.
	Id *string `json:"id"`
}

// GetExternalId returns SchemaTxMatchInput.ExternalId, and is useful for accessing the field via an interface.
func (v *SchemaTxMatchInput) GetExternalId() *string { return v.ExternalId }

// GetId returns SchemaTxMatchInput.Id, and is useful for accessing the field via an interface.
func (v *SchemaTxMatchInput) GetId() *string { return v.Id }

// StoreSchemaResponse is returned by StoreSchema on success.
type StoreSchemaResponse struct {
	// Stores a Schema in your workspace. If no Schema with the same key exists in your worksapce, a new Schema is created.
	// Else, the Schema is updated, and every Ledger associated with it is migrated to the latest version.
	StoreSchema StoreSchemaStoreSchemaStoreSchemaResponse `json:"-"`
}

// GetStoreSchema returns StoreSchemaResponse.StoreSchema, and is useful for accessing the field via an interface.
func (v *StoreSchemaResponse) GetStoreSchema() StoreSchemaStoreSchemaStoreSchemaResponse {
	return v.StoreSchema
}

func (v *StoreSchemaResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*StoreSchemaResponse
		StoreSchema json.RawMessage `json:"storeSchema"`
		graphql.NoUnmarshalJSON
	}
	firstPass.StoreSchemaResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.StoreSchema
		src := firstPass.StoreSchema
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalStoreSchemaStoreSchemaStoreSchemaResponse(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal StoreSchemaResponse.StoreSchema: %w", err)
			}
		}
	}
	return nil
}

type __premarshalStoreSchemaResponse struct {
	StoreSchema json.RawMessage `json:"storeSchema"`
}

func (v *StoreSchemaResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *StoreSchemaResponse) __premarshalJSON() (*__premarshalStoreSchemaResponse, error) {
	var retval __premarshalStoreSchemaResponse

	{

		dst := &retval.StoreSchema
		src := v.StoreSchema
		var err error
		*dst, err = __marshalStoreSchemaStoreSchemaStoreSchemaResponse(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal StoreSchemaResponse.StoreSchema: %w", err)
		}
	}
	return &retval, nil
}

// StoreSchemaStoreSchemaBadRequestError includes the requested fields of the GraphQL type BadRequestError.
// The GraphQL type's documentation follows.
//
// Equivalent to an HTTP 400 - request either has missing or incorrect data
type StoreSchemaStoreSchemaBadRequestError struct {
	Typename *string `json:"__typename"`
	// The HTTP status code corresponding to the error
	Code string `json:"code"`
	// The error message
	Message string `json:"message"`
}

// GetTypename returns StoreSchemaStoreSchemaBadRequestError.Typename, and is useful for accessing the field via an interface.
func (v *StoreSchemaStoreSchemaBadRequestError) GetTypename() *string { return v.Typename }

// GetCode returns StoreSchemaStoreSchemaBadRequestError.Code, and is useful for accessing the field via an interface.
func (v *StoreSchemaStoreSchemaBadRequestError) GetCode() string { return v.Code }

// GetMessage returns StoreSchemaStoreSchemaBadRequestError.Message, and is useful for accessing the field via an interface.
func (v *StoreSchemaStoreSchemaBadRequestError) GetMessage() string { return v.Message }

// StoreSchemaStoreSchemaInternalError includes the requested fields of the GraphQL type InternalError.
// The GraphQL type's documentation follows.
//
// Equivalent to an HTTP 5XX - something went wrong with our API.
type StoreSchemaStoreSchemaInternalError struct {
	Typename *string `json:"__typename"`
	// The HTTP status code corresponding to the error
	Code string `json:"code"`
	// The error message
	Message string `json:"message"`
}

// GetTypename returns StoreSchemaStoreSchemaInternalError.Typename, and is useful for accessing the field via an interface.
func (v *StoreSchemaStoreSchemaInternalError) GetTypename() *string { return v.Typename }

// GetCode returns StoreSchemaStoreSchemaInternalError.Code, and is useful for accessing the field via an interface.
func (v *StoreSchemaStoreSchemaInternalError) GetCode() string { return v.Code }

// GetMessage returns StoreSchemaStoreSchemaInternalError.Message, and is useful for accessing the field via an interface.
func (v *StoreSchemaStoreSchemaInternalError) GetMessage() string { return v.Message }

// StoreSchemaStoreSchemaStoreSchemaResponse includes the requested fields of the GraphQL interface StoreSchemaResponse.
//
// StoreSchemaStoreSchemaStoreSchemaResponse is implemented by the following types:
// StoreSchemaStoreSchemaBadRequestError
// StoreSchemaStoreSchemaInternalError
// StoreSchemaStoreSchemaStoreSchemaResult
// The GraphQL type's documentation follows.
//
// Returned by the [storeSchema](https://fragment.dev/api-reference#mutations-storeschema) mutation.
type StoreSchemaStoreSchemaStoreSchemaResponse interface {
	implementsGraphQLInterfaceStoreSchemaStoreSchemaStoreSchemaResponse()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *StoreSchemaStoreSchemaBadRequestError) implementsGraphQLInterfaceStoreSchemaStoreSchemaStoreSchemaResponse() {
}
func (v *StoreSchemaStoreSchemaInternalError) implementsGraphQLInterfaceStoreSchemaStoreSchemaStoreSchemaResponse() {
}
func (v *StoreSchemaStoreSchemaStoreSchemaResult) implementsGraphQLInterfaceStoreSchemaStoreSchemaStoreSchemaResponse() {
}

func __unmarshalStoreSchemaStoreSchemaStoreSchemaResponse(b []byte, v *StoreSchemaStoreSchemaStoreSchemaResponse) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "BadRequestError":
		*v = new(StoreSchemaStoreSchemaBadRequestError)
		return json.Unmarshal(b, *v)
	case "InternalError":
		*v = new(StoreSchemaStoreSchemaInternalError)
		return json.Unmarshal(b, *v)
	case "StoreSchemaResult":
		*v = new(StoreSchemaStoreSchemaStoreSchemaResult)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing StoreSchemaResponse.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for StoreSchemaStoreSchemaStoreSchemaResponse: "%v"`, tn.TypeName)
	}
}

func __marshalStoreSchemaStoreSchemaStoreSchemaResponse(v *StoreSchemaStoreSchemaStoreSchemaResponse) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *StoreSchemaStoreSchemaBadRequestError:
		typename = "BadRequestError"

		result := struct {
			TypeName string `json:"__typename"`
			*StoreSchemaStoreSchemaBadRequestError
		}{typename, v}
		return json.Marshal(result)
	case *StoreSchemaStoreSchemaInternalError:
		typename = "InternalError"

		result := struct {
			TypeName string `json:"__typename"`
			*StoreSchemaStoreSchemaInternalError
		}{typename, v}
		return json.Marshal(result)
	case *StoreSchemaStoreSchemaStoreSchemaResult:
		typename = "StoreSchemaResult"

		result := struct {
			TypeName string `json:"__typename"`
			*StoreSchemaStoreSchemaStoreSchemaResult
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for StoreSchemaStoreSchemaStoreSchemaResponse: "%T"`, v)
	}
}

// StoreSchemaStoreSchemaStoreSchemaResult includes the requested fields of the GraphQL type StoreSchemaResult.
// The GraphQL type's documentation follows.
//
// `StoreSchemaResult` represents a successful execution of `storeSchema`.
type StoreSchemaStoreSchemaStoreSchemaResult struct {
	Typename *string `json:"__typename"`
	// The Schema that was stored as a result of calling `storeSchema`.
	Schema StoreSchemaStoreSchemaStoreSchemaResultSchema `json:"schema"`
}

// GetTypename returns StoreSchemaStoreSchemaStoreSchemaResult.Typename, and is useful for accessing the field via an interface.
func (v *StoreSchemaStoreSchemaStoreSchemaResult) GetTypename() *string { return v.Typename }

// GetSchema returns StoreSchemaStoreSchemaStoreSchemaResult.Schema, and is useful for accessing the field via an interface.
func (v *StoreSchemaStoreSchemaStoreSchemaResult) GetSchema() StoreSchemaStoreSchemaStoreSchemaResultSchema {
	return v.Schema
}

// StoreSchemaStoreSchemaStoreSchemaResultSchema includes the requested fields of the GraphQL type Schema.
type StoreSchemaStoreSchemaStoreSchemaResultSchema struct {
	// The identifier for a Schema.
	// `key` is unique to a Workspace.
	Key string `json:"key"`
	// The name of a Schema. It defaults to the `key` if not provided in your SchemaInput.
	Name string `json:"name"`
	// The metadata for a specific SchemaVersion.
	Version StoreSchemaStoreSchemaStoreSchemaResultSchemaVersion `json:"version"`
}

// GetKey returns StoreSchemaStoreSchemaStoreSchemaResultSchema.Key, and is useful for accessing the field via an interface.
func (v *StoreSchemaStoreSchemaStoreSchemaResultSchema) GetKey() string { return v.Key }

// GetName returns StoreSchemaStoreSchemaStoreSchemaResultSchema.Name, and is useful for accessing the field via an interface.
func (v *StoreSchemaStoreSchemaStoreSchemaResultSchema) GetName() string { return v.Name }

// GetVersion returns StoreSchemaStoreSchemaStoreSchemaResultSchema.Version, and is useful for accessing the field via an interface.
func (v *StoreSchemaStoreSchemaStoreSchemaResultSchema) GetVersion() StoreSchemaStoreSchemaStoreSchemaResultSchemaVersion {
	return v.Version
}

// StoreSchemaStoreSchemaStoreSchemaResultSchemaVersion includes the requested fields of the GraphQL type SchemaVersion.
// The GraphQL type's documentation follows.
//
// An instance of a Schema stored in a Workspace.
// A new SchemaVersion is created each time a Schema is stored.
// It stores the Chart of Accounts and list of Ledger Entries as well as a history of its Ledger migrations.
type StoreSchemaStoreSchemaStoreSchemaResultSchemaVersion struct {
	Created string `json:"created"`
	// The version of the schema.
	Version int `json:"version"`
}

// GetCreated returns StoreSchemaStoreSchemaStoreSchemaResultSchemaVersion.Created, and is useful for accessing the field via an interface.
func (v *StoreSchemaStoreSchemaStoreSchemaResultSchemaVersion) GetCreated() string { return v.Created }

// GetVersion returns StoreSchemaStoreSchemaStoreSchemaResultSchemaVersion.Version, and is useful for accessing the field via an interface.
func (v *StoreSchemaStoreSchemaStoreSchemaResultSchemaVersion) GetVersion() int { return v.Version }

type StringFilter struct {
	EqualTo *string  `json:"equalTo"`
	In      []string `json:"in"`
}

// GetEqualTo returns StringFilter.EqualTo, and is useful for accessing the field via an interface.
func (v *StringFilter) GetEqualTo() *string { return v.EqualTo }

// GetIn returns StringFilter.In, and is useful for accessing the field via an interface.
func (v *StringFilter) GetIn() []string { return v.In }

// SyncCustomAccountsResponse is returned by SyncCustomAccounts on success.
type SyncCustomAccountsResponse struct {
	// Once you've created a [Custom Link](https://fragment.dev/docs#reconcile-transactions-link-any-system), create accounts under it using this mutation. Each Custom Account is an immutable, single-entry view of all the transactions in the external account. You can sync up to 100 Custom Accounts in one API call.
	SyncCustomAccounts SyncCustomAccountsSyncCustomAccountsSyncCustomAccountsResponse `json:"-"`
}

// GetSyncCustomAccounts returns SyncCustomAccountsResponse.SyncCustomAccounts, and is useful for accessing the field via an interface.
func (v *SyncCustomAccountsResponse) GetSyncCustomAccounts() SyncCustomAccountsSyncCustomAccountsSyncCustomAccountsResponse {
	return v.SyncCustomAccounts
}

func (v *SyncCustomAccountsResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*SyncCustomAccountsResponse
		SyncCustomAccounts json.RawMessage `json:"syncCustomAccounts"`
		graphql.NoUnmarshalJSON
	}
	firstPass.SyncCustomAccountsResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.SyncCustomAccounts
		src := firstPass.SyncCustomAccounts
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalSyncCustomAccountsSyncCustomAccountsSyncCustomAccountsResponse(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal SyncCustomAccountsResponse.SyncCustomAccounts: %w", err)
			}
		}
	}
	return nil
}

type __premarshalSyncCustomAccountsResponse struct {
	SyncCustomAccounts json.RawMessage `json:"syncCustomAccounts"`
}

func (v *SyncCustomAccountsResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *SyncCustomAccountsResponse) __premarshalJSON() (*__premarshalSyncCustomAccountsResponse, error) {
	var retval __premarshalSyncCustomAccountsResponse

	{

		dst := &retval.SyncCustomAccounts
		src := v.SyncCustomAccounts
		var err error
		*dst, err = __marshalSyncCustomAccountsSyncCustomAccountsSyncCustomAccountsResponse(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal SyncCustomAccountsResponse.SyncCustomAccounts: %w", err)
		}
	}
	return &retval, nil
}

// SyncCustomAccountsSyncCustomAccountsBadRequestError includes the requested fields of the GraphQL type BadRequestError.
// The GraphQL type's documentation follows.
//
// Equivalent to an HTTP 400 - request either has missing or incorrect data
type SyncCustomAccountsSyncCustomAccountsBadRequestError struct {
	Typename *string `json:"__typename"`
	// The HTTP status code corresponding to the error
	Code string `json:"code"`
	// The error message
	Message string `json:"message"`
}

// GetTypename returns SyncCustomAccountsSyncCustomAccountsBadRequestError.Typename, and is useful for accessing the field via an interface.
func (v *SyncCustomAccountsSyncCustomAccountsBadRequestError) GetTypename() *string {
	return v.Typename
}

// GetCode returns SyncCustomAccountsSyncCustomAccountsBadRequestError.Code, and is useful for accessing the field via an interface.
func (v *SyncCustomAccountsSyncCustomAccountsBadRequestError) GetCode() string { return v.Code }

// GetMessage returns SyncCustomAccountsSyncCustomAccountsBadRequestError.Message, and is useful for accessing the field via an interface.
func (v *SyncCustomAccountsSyncCustomAccountsBadRequestError) GetMessage() string { return v.Message }

// SyncCustomAccountsSyncCustomAccountsInternalError includes the requested fields of the GraphQL type InternalError.
// The GraphQL type's documentation follows.
//
// Equivalent to an HTTP 5XX - something went wrong with our API.
type SyncCustomAccountsSyncCustomAccountsInternalError struct {
	Typename *string `json:"__typename"`
	// The HTTP status code corresponding to the error
	Code string `json:"code"`
	// The error message
	Message string `json:"message"`
}

// GetTypename returns SyncCustomAccountsSyncCustomAccountsInternalError.Typename, and is useful for accessing the field via an interface.
func (v *SyncCustomAccountsSyncCustomAccountsInternalError) GetTypename() *string { return v.Typename }

// GetCode returns SyncCustomAccountsSyncCustomAccountsInternalError.Code, and is useful for accessing the field via an interface.
func (v *SyncCustomAccountsSyncCustomAccountsInternalError) GetCode() string { return v.Code }

// GetMessage returns SyncCustomAccountsSyncCustomAccountsInternalError.Message, and is useful for accessing the field via an interface.
func (v *SyncCustomAccountsSyncCustomAccountsInternalError) GetMessage() string { return v.Message }

// SyncCustomAccountsSyncCustomAccountsSyncCustomAccountsResponse includes the requested fields of the GraphQL interface SyncCustomAccountsResponse.
//
// SyncCustomAccountsSyncCustomAccountsSyncCustomAccountsResponse is implemented by the following types:
// SyncCustomAccountsSyncCustomAccountsBadRequestError
// SyncCustomAccountsSyncCustomAccountsInternalError
// SyncCustomAccountsSyncCustomAccountsSyncCustomAccountsResult
type SyncCustomAccountsSyncCustomAccountsSyncCustomAccountsResponse interface {
	implementsGraphQLInterfaceSyncCustomAccountsSyncCustomAccountsSyncCustomAccountsResponse()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *SyncCustomAccountsSyncCustomAccountsBadRequestError) implementsGraphQLInterfaceSyncCustomAccountsSyncCustomAccountsSyncCustomAccountsResponse() {
}
func (v *SyncCustomAccountsSyncCustomAccountsInternalError) implementsGraphQLInterfaceSyncCustomAccountsSyncCustomAccountsSyncCustomAccountsResponse() {
}
func (v *SyncCustomAccountsSyncCustomAccountsSyncCustomAccountsResult) implementsGraphQLInterfaceSyncCustomAccountsSyncCustomAccountsSyncCustomAccountsResponse() {
}

func __unmarshalSyncCustomAccountsSyncCustomAccountsSyncCustomAccountsResponse(b []byte, v *SyncCustomAccountsSyncCustomAccountsSyncCustomAccountsResponse) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "BadRequestError":
		*v = new(SyncCustomAccountsSyncCustomAccountsBadRequestError)
		return json.Unmarshal(b, *v)
	case "InternalError":
		*v = new(SyncCustomAccountsSyncCustomAccountsInternalError)
		return json.Unmarshal(b, *v)
	case "SyncCustomAccountsResult":
		*v = new(SyncCustomAccountsSyncCustomAccountsSyncCustomAccountsResult)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing SyncCustomAccountsResponse.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for SyncCustomAccountsSyncCustomAccountsSyncCustomAccountsResponse: "%v"`, tn.TypeName)
	}
}

func __marshalSyncCustomAccountsSyncCustomAccountsSyncCustomAccountsResponse(v *SyncCustomAccountsSyncCustomAccountsSyncCustomAccountsResponse) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *SyncCustomAccountsSyncCustomAccountsBadRequestError:
		typename = "BadRequestError"

		result := struct {
			TypeName string `json:"__typename"`
			*SyncCustomAccountsSyncCustomAccountsBadRequestError
		}{typename, v}
		return json.Marshal(result)
	case *SyncCustomAccountsSyncCustomAccountsInternalError:
		typename = "InternalError"

		result := struct {
			TypeName string `json:"__typename"`
			*SyncCustomAccountsSyncCustomAccountsInternalError
		}{typename, v}
		return json.Marshal(result)
	case *SyncCustomAccountsSyncCustomAccountsSyncCustomAccountsResult:
		typename = "SyncCustomAccountsResult"

		result := struct {
			TypeName string `json:"__typename"`
			*SyncCustomAccountsSyncCustomAccountsSyncCustomAccountsResult
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for SyncCustomAccountsSyncCustomAccountsSyncCustomAccountsResponse: "%T"`, v)
	}
}

// SyncCustomAccountsSyncCustomAccountsSyncCustomAccountsResult includes the requested fields of the GraphQL type SyncCustomAccountsResult.
type SyncCustomAccountsSyncCustomAccountsSyncCustomAccountsResult struct {
	Typename *string `json:"__typename"`
	// The external accounts that were synced.
	Accounts []SyncCustomAccountsSyncCustomAccountsSyncCustomAccountsResultAccountsExternalAccount `json:"accounts"`
}

// GetTypename returns SyncCustomAccountsSyncCustomAccountsSyncCustomAccountsResult.Typename, and is useful for accessing the field via an interface.
func (v *SyncCustomAccountsSyncCustomAccountsSyncCustomAccountsResult) GetTypename() *string {
	return v.Typename
}

// GetAccounts returns SyncCustomAccountsSyncCustomAccountsSyncCustomAccountsResult.Accounts, and is useful for accessing the field via an interface.
func (v *SyncCustomAccountsSyncCustomAccountsSyncCustomAccountsResult) GetAccounts() []SyncCustomAccountsSyncCustomAccountsSyncCustomAccountsResultAccountsExternalAccount {
	return v.Accounts
}

// SyncCustomAccountsSyncCustomAccountsSyncCustomAccountsResultAccountsExternalAccount includes the requested fields of the GraphQL type ExternalAccount.
type SyncCustomAccountsSyncCustomAccountsSyncCustomAccountsResultAccountsExternalAccount struct {
	// FRAGMENT ID of External Account
	Id string `json:"id"`
	// ID used for the external account
	ExternalId string `json:"externalId"`
	Name       string `json:"name"`
	// The currency of this external account.
	Currency *SyncCustomAccountsSyncCustomAccountsSyncCustomAccountsResultAccountsExternalAccountCurrency `json:"currency"`
}

// GetId returns SyncCustomAccountsSyncCustomAccountsSyncCustomAccountsResultAccountsExternalAccount.Id, and is useful for accessing the field via an interface.
func (v *SyncCustomAccountsSyncCustomAccountsSyncCustomAccountsResultAccountsExternalAccount) GetId() string {
	return v.Id
}

// GetExternalId returns SyncCustomAccountsSyncCustomAccountsSyncCustomAccountsResultAccountsExternalAccount.ExternalId, and is useful for accessing the field via an interface.
func (v *SyncCustomAccountsSyncCustomAccountsSyncCustomAccountsResultAccountsExternalAccount) GetExternalId() string {
	return v.ExternalId
}

// GetName returns SyncCustomAccountsSyncCustomAccountsSyncCustomAccountsResultAccountsExternalAccount.Name, and is useful for accessing the field via an interface.
func (v *SyncCustomAccountsSyncCustomAccountsSyncCustomAccountsResultAccountsExternalAccount) GetName() string {
	return v.Name
}

// GetCurrency returns SyncCustomAccountsSyncCustomAccountsSyncCustomAccountsResultAccountsExternalAccount.Currency, and is useful for accessing the field via an interface.
func (v *SyncCustomAccountsSyncCustomAccountsSyncCustomAccountsResultAccountsExternalAccount) GetCurrency() *SyncCustomAccountsSyncCustomAccountsSyncCustomAccountsResultAccountsExternalAccountCurrency {
	return v.Currency
}

// SyncCustomAccountsSyncCustomAccountsSyncCustomAccountsResultAccountsExternalAccountCurrency includes the requested fields of the GraphQL type Currency.
type SyncCustomAccountsSyncCustomAccountsSyncCustomAccountsResultAccountsExternalAccountCurrency struct {
	// The currency code. This is an [enum type](https://fragment.dev/api-reference#types-scalars-and-enums-currencycode) .
	Code CurrencyCode `json:"code"`
	// The ID for a custom currency. This is specified when creating the custom currency using the [createCustomCurrency](https://fragment.dev/api-reference#mutations-createcustomcurrency) mutation.
	CustomCurrencyId *string `json:"customCurrencyId"`
}

// GetCode returns SyncCustomAccountsSyncCustomAccountsSyncCustomAccountsResultAccountsExternalAccountCurrency.Code, and is useful for accessing the field via an interface.
func (v *SyncCustomAccountsSyncCustomAccountsSyncCustomAccountsResultAccountsExternalAccountCurrency) GetCode() CurrencyCode {
	return v.Code
}

// GetCustomCurrencyId returns SyncCustomAccountsSyncCustomAccountsSyncCustomAccountsResultAccountsExternalAccountCurrency.CustomCurrencyId, and is useful for accessing the field via an interface.
func (v *SyncCustomAccountsSyncCustomAccountsSyncCustomAccountsResultAccountsExternalAccountCurrency) GetCustomCurrencyId() *string {
	return v.CustomCurrencyId
}

// SyncCustomTxsResponse is returned by SyncCustomTxs on success.
type SyncCustomTxsResponse struct {
	// You can create transactions under a Custom Account in a [Custom Link](https://fragment.dev/docs#reconcile-transactions-link-any-system) using this mutation. Once you've imported transactions, you can use the reconcileTx mutation to add them to a Ledger via the Linked Ledger Account. You can sync up to 100 Custom Transactions in one API call.
	SyncCustomTxs SyncCustomTxsSyncCustomTxsSyncCustomTxsResponse `json:"-"`
}

// GetSyncCustomTxs returns SyncCustomTxsResponse.SyncCustomTxs, and is useful for accessing the field via an interface.
func (v *SyncCustomTxsResponse) GetSyncCustomTxs() SyncCustomTxsSyncCustomTxsSyncCustomTxsResponse {
	return v.SyncCustomTxs
}

func (v *SyncCustomTxsResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*SyncCustomTxsResponse
		SyncCustomTxs json.RawMessage `json:"syncCustomTxs"`
		graphql.NoUnmarshalJSON
	}
	firstPass.SyncCustomTxsResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.SyncCustomTxs
		src := firstPass.SyncCustomTxs
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalSyncCustomTxsSyncCustomTxsSyncCustomTxsResponse(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal SyncCustomTxsResponse.SyncCustomTxs: %w", err)
			}
		}
	}
	return nil
}

type __premarshalSyncCustomTxsResponse struct {
	SyncCustomTxs json.RawMessage `json:"syncCustomTxs"`
}

func (v *SyncCustomTxsResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *SyncCustomTxsResponse) __premarshalJSON() (*__premarshalSyncCustomTxsResponse, error) {
	var retval __premarshalSyncCustomTxsResponse

	{

		dst := &retval.SyncCustomTxs
		src := v.SyncCustomTxs
		var err error
		*dst, err = __marshalSyncCustomTxsSyncCustomTxsSyncCustomTxsResponse(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal SyncCustomTxsResponse.SyncCustomTxs: %w", err)
		}
	}
	return &retval, nil
}

// SyncCustomTxsSyncCustomTxsBadRequestError includes the requested fields of the GraphQL type BadRequestError.
// The GraphQL type's documentation follows.
//
// Equivalent to an HTTP 400 - request either has missing or incorrect data
type SyncCustomTxsSyncCustomTxsBadRequestError struct {
	Typename *string `json:"__typename"`
	// The HTTP status code corresponding to the error
	Code string `json:"code"`
	// The error message
	Message string `json:"message"`
}

// GetTypename returns SyncCustomTxsSyncCustomTxsBadRequestError.Typename, and is useful for accessing the field via an interface.
func (v *SyncCustomTxsSyncCustomTxsBadRequestError) GetTypename() *string { return v.Typename }

// GetCode returns SyncCustomTxsSyncCustomTxsBadRequestError.Code, and is useful for accessing the field via an interface.
func (v *SyncCustomTxsSyncCustomTxsBadRequestError) GetCode() string { return v.Code }

// GetMessage returns SyncCustomTxsSyncCustomTxsBadRequestError.Message, and is useful for accessing the field via an interface.
func (v *SyncCustomTxsSyncCustomTxsBadRequestError) GetMessage() string { return v.Message }

// SyncCustomTxsSyncCustomTxsInternalError includes the requested fields of the GraphQL type InternalError.
// The GraphQL type's documentation follows.
//
// Equivalent to an HTTP 5XX - something went wrong with our API.
type SyncCustomTxsSyncCustomTxsInternalError struct {
	Typename *string `json:"__typename"`
	// The HTTP status code corresponding to the error
	Code string `json:"code"`
	// The error message
	Message string `json:"message"`
}

// GetTypename returns SyncCustomTxsSyncCustomTxsInternalError.Typename, and is useful for accessing the field via an interface.
func (v *SyncCustomTxsSyncCustomTxsInternalError) GetTypename() *string { return v.Typename }

// GetCode returns SyncCustomTxsSyncCustomTxsInternalError.Code, and is useful for accessing the field via an interface.
func (v *SyncCustomTxsSyncCustomTxsInternalError) GetCode() string { return v.Code }

// GetMessage returns SyncCustomTxsSyncCustomTxsInternalError.Message, and is useful for accessing the field via an interface.
func (v *SyncCustomTxsSyncCustomTxsInternalError) GetMessage() string { return v.Message }

// SyncCustomTxsSyncCustomTxsSyncCustomTxsResponse includes the requested fields of the GraphQL interface SyncCustomTxsResponse.
//
// SyncCustomTxsSyncCustomTxsSyncCustomTxsResponse is implemented by the following types:
// SyncCustomTxsSyncCustomTxsBadRequestError
// SyncCustomTxsSyncCustomTxsInternalError
// SyncCustomTxsSyncCustomTxsSyncCustomTxsResult
type SyncCustomTxsSyncCustomTxsSyncCustomTxsResponse interface {
	implementsGraphQLInterfaceSyncCustomTxsSyncCustomTxsSyncCustomTxsResponse()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *SyncCustomTxsSyncCustomTxsBadRequestError) implementsGraphQLInterfaceSyncCustomTxsSyncCustomTxsSyncCustomTxsResponse() {
}
func (v *SyncCustomTxsSyncCustomTxsInternalError) implementsGraphQLInterfaceSyncCustomTxsSyncCustomTxsSyncCustomTxsResponse() {
}
func (v *SyncCustomTxsSyncCustomTxsSyncCustomTxsResult) implementsGraphQLInterfaceSyncCustomTxsSyncCustomTxsSyncCustomTxsResponse() {
}

func __unmarshalSyncCustomTxsSyncCustomTxsSyncCustomTxsResponse(b []byte, v *SyncCustomTxsSyncCustomTxsSyncCustomTxsResponse) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "BadRequestError":
		*v = new(SyncCustomTxsSyncCustomTxsBadRequestError)
		return json.Unmarshal(b, *v)
	case "InternalError":
		*v = new(SyncCustomTxsSyncCustomTxsInternalError)
		return json.Unmarshal(b, *v)
	case "SyncCustomTxsResult":
		*v = new(SyncCustomTxsSyncCustomTxsSyncCustomTxsResult)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing SyncCustomTxsResponse.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for SyncCustomTxsSyncCustomTxsSyncCustomTxsResponse: "%v"`, tn.TypeName)
	}
}

func __marshalSyncCustomTxsSyncCustomTxsSyncCustomTxsResponse(v *SyncCustomTxsSyncCustomTxsSyncCustomTxsResponse) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *SyncCustomTxsSyncCustomTxsBadRequestError:
		typename = "BadRequestError"

		result := struct {
			TypeName string `json:"__typename"`
			*SyncCustomTxsSyncCustomTxsBadRequestError
		}{typename, v}
		return json.Marshal(result)
	case *SyncCustomTxsSyncCustomTxsInternalError:
		typename = "InternalError"

		result := struct {
			TypeName string `json:"__typename"`
			*SyncCustomTxsSyncCustomTxsInternalError
		}{typename, v}
		return json.Marshal(result)
	case *SyncCustomTxsSyncCustomTxsSyncCustomTxsResult:
		typename = "SyncCustomTxsResult"

		result := struct {
			TypeName string `json:"__typename"`
			*SyncCustomTxsSyncCustomTxsSyncCustomTxsResult
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for SyncCustomTxsSyncCustomTxsSyncCustomTxsResponse: "%T"`, v)
	}
}

// SyncCustomTxsSyncCustomTxsSyncCustomTxsResult includes the requested fields of the GraphQL type SyncCustomTxsResult.
type SyncCustomTxsSyncCustomTxsSyncCustomTxsResult struct {
	Typename *string                                              `json:"__typename"`
	Txs      []SyncCustomTxsSyncCustomTxsSyncCustomTxsResultTxsTx `json:"txs"`
}

// GetTypename returns SyncCustomTxsSyncCustomTxsSyncCustomTxsResult.Typename, and is useful for accessing the field via an interface.
func (v *SyncCustomTxsSyncCustomTxsSyncCustomTxsResult) GetTypename() *string { return v.Typename }

// GetTxs returns SyncCustomTxsSyncCustomTxsSyncCustomTxsResult.Txs, and is useful for accessing the field via an interface.
func (v *SyncCustomTxsSyncCustomTxsSyncCustomTxsResult) GetTxs() []SyncCustomTxsSyncCustomTxsSyncCustomTxsResultTxsTx {
	return v.Txs
}

// SyncCustomTxsSyncCustomTxsSyncCustomTxsResultTxsTx includes the requested fields of the GraphQL type Tx.
type SyncCustomTxsSyncCustomTxsSyncCustomTxsResultTxsTx struct {
	Typename *string `json:"__typename"`
	// FRAGMENT ID of this transaction's Link
	LinkId string `json:"linkId"`
	Id     string `json:"id"`
	// ID of this transaction in the external system
	ExternalId string `json:"externalId"`
	// ID in the external system of this transaction's external account
	ExternalAccountId string `json:"externalAccountId"`
	// Integer amount in cents. Positive indicates money entering the external account, negative indicates money leaving
	Amount string `json:"amount"`
	// Description at the external account (can be overridden within the Fragment Dashboard)
	Description string `json:"description"`
	// ISO-8601 timestamp this Tx posted to the external account
	Posted string `json:"posted"`
}

// GetTypename returns SyncCustomTxsSyncCustomTxsSyncCustomTxsResultTxsTx.Typename, and is useful for accessing the field via an interface.
func (v *SyncCustomTxsSyncCustomTxsSyncCustomTxsResultTxsTx) GetTypename() *string { return v.Typename }

// GetLinkId returns SyncCustomTxsSyncCustomTxsSyncCustomTxsResultTxsTx.LinkId, and is useful for accessing the field via an interface.
func (v *SyncCustomTxsSyncCustomTxsSyncCustomTxsResultTxsTx) GetLinkId() string { return v.LinkId }

// GetId returns SyncCustomTxsSyncCustomTxsSyncCustomTxsResultTxsTx.Id, and is useful for accessing the field via an interface.
func (v *SyncCustomTxsSyncCustomTxsSyncCustomTxsResultTxsTx) GetId() string { return v.Id }

// GetExternalId returns SyncCustomTxsSyncCustomTxsSyncCustomTxsResultTxsTx.ExternalId, and is useful for accessing the field via an interface.
func (v *SyncCustomTxsSyncCustomTxsSyncCustomTxsResultTxsTx) GetExternalId() string {
	return v.ExternalId
}

// GetExternalAccountId returns SyncCustomTxsSyncCustomTxsSyncCustomTxsResultTxsTx.ExternalAccountId, and is useful for accessing the field via an interface.
func (v *SyncCustomTxsSyncCustomTxsSyncCustomTxsResultTxsTx) GetExternalAccountId() string {
	return v.ExternalAccountId
}

// GetAmount returns SyncCustomTxsSyncCustomTxsSyncCustomTxsResultTxsTx.Amount, and is useful for accessing the field via an interface.
func (v *SyncCustomTxsSyncCustomTxsSyncCustomTxsResultTxsTx) GetAmount() string { return v.Amount }

// GetDescription returns SyncCustomTxsSyncCustomTxsSyncCustomTxsResultTxsTx.Description, and is useful for accessing the field via an interface.
func (v *SyncCustomTxsSyncCustomTxsSyncCustomTxsResultTxsTx) GetDescription() string {
	return v.Description
}

// GetPosted returns SyncCustomTxsSyncCustomTxsSyncCustomTxsResultTxsTx.Posted, and is useful for accessing the field via an interface.
func (v *SyncCustomTxsSyncCustomTxsSyncCustomTxsResultTxsTx) GetPosted() string { return v.Posted }

// Filters a result set based on the tags it contains.
type TagFilter struct {
	EqualTo *TagMatchInput  `json:"equalTo"`
	In      []TagMatchInput `json:"in"`
}

// GetEqualTo returns TagFilter.EqualTo, and is useful for accessing the field via an interface.
func (v *TagFilter) GetEqualTo() *TagMatchInput { return v.EqualTo }

// GetIn returns TagFilter.In, and is useful for accessing the field via an interface.
func (v *TagFilter) GetIn() []TagMatchInput { return v.In }

// Specifies a single tag that an entity is expected to have. You must specify both the key and the value.
type TagMatchInput struct {
	// The key of this tag.
	Key string `json:"key"`
	// The value associated with this tag's key.
	Value string `json:"value"`
}

// GetKey returns TagMatchInput.Key, and is useful for accessing the field via an interface.
func (v *TagMatchInput) GetKey() string { return v.Key }

// GetValue returns TagMatchInput.Value, and is useful for accessing the field via an interface.
func (v *TagMatchInput) GetValue() string { return v.Value }

// Specify a Tx by using `id` or `externalId`, the Link it belongs to by `linkId`, and the External Account it is a part of by `accountId` or `externalAccountId`.
type TxMatchInput struct {
	// The FRAGMENT ID of the external account
	AccountId *string `json:"accountId"`
	// The external system's ID for the account
	ExternalAccountId *string `json:"externalAccountId"`
	// The external system's ID for the transaction
	ExternalId *string `json:"externalId"`
	// The FRAGMENT ID of the transaction
	Id *string `json:"id"`
	// The FRAGMENT ID of the link
	LinkId *string `json:"linkId"`
}

// GetAccountId returns TxMatchInput.AccountId, and is useful for accessing the field via an interface.
func (v *TxMatchInput) GetAccountId() *string { return v.AccountId }

// GetExternalAccountId returns TxMatchInput.ExternalAccountId, and is useful for accessing the field via an interface.
func (v *TxMatchInput) GetExternalAccountId() *string { return v.ExternalAccountId }

// GetExternalId returns TxMatchInput.ExternalId, and is useful for accessing the field via an interface.
func (v *TxMatchInput) GetExternalId() *string { return v.ExternalId }

// GetId returns TxMatchInput.Id, and is useful for accessing the field via an interface.
func (v *TxMatchInput) GetId() *string { return v.Id }

// GetLinkId returns TxMatchInput.LinkId, and is useful for accessing the field via an interface.
func (v *TxMatchInput) GetLinkId() *string { return v.LinkId }

type TxType string

const (
	TxTypeCredit TxType = "credit"
	TxTypeDebit  TxType = "debit"
)

type TxTypeFilter struct {
	EqualTo *TxType  `json:"equalTo"`
	In      []TxType `json:"in"`
}

// GetEqualTo returns TxTypeFilter.EqualTo, and is useful for accessing the field via an interface.
func (v *TxTypeFilter) GetEqualTo() *TxType { return v.EqualTo }

// GetIn returns TxTypeFilter.In, and is useful for accessing the field via an interface.
func (v *TxTypeFilter) GetIn() []TxType { return v.In }

type UpdateLedgerInput struct {
	// The new Ledger name.
	Name *string `json:"name"`
}

// GetName returns UpdateLedgerInput.Name, and is useful for accessing the field via an interface.
func (v *UpdateLedgerInput) GetName() *string { return v.Name }

// UpdateLedgerResponse is returned by UpdateLedger on success.
type UpdateLedgerResponse struct {
	// Updates a Ledger. Currently, you can change only the Ledger 'name'.
	UpdateLedger UpdateLedgerUpdateLedgerUpdateLedgerResponse `json:"-"`
}

// GetUpdateLedger returns UpdateLedgerResponse.UpdateLedger, and is useful for accessing the field via an interface.
func (v *UpdateLedgerResponse) GetUpdateLedger() UpdateLedgerUpdateLedgerUpdateLedgerResponse {
	return v.UpdateLedger
}

func (v *UpdateLedgerResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateLedgerResponse
		UpdateLedger json.RawMessage `json:"updateLedger"`
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateLedgerResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.UpdateLedger
		src := firstPass.UpdateLedger
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalUpdateLedgerUpdateLedgerUpdateLedgerResponse(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal UpdateLedgerResponse.UpdateLedger: %w", err)
			}
		}
	}
	return nil
}

type __premarshalUpdateLedgerResponse struct {
	UpdateLedger json.RawMessage `json:"updateLedger"`
}

func (v *UpdateLedgerResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateLedgerResponse) __premarshalJSON() (*__premarshalUpdateLedgerResponse, error) {
	var retval __premarshalUpdateLedgerResponse

	{

		dst := &retval.UpdateLedger
		src := v.UpdateLedger
		var err error
		*dst, err = __marshalUpdateLedgerUpdateLedgerUpdateLedgerResponse(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal UpdateLedgerResponse.UpdateLedger: %w", err)
		}
	}
	return &retval, nil
}

// UpdateLedgerUpdateLedgerBadRequestError includes the requested fields of the GraphQL type BadRequestError.
// The GraphQL type's documentation follows.
//
// Equivalent to an HTTP 400 - request either has missing or incorrect data
type UpdateLedgerUpdateLedgerBadRequestError struct {
	Typename *string `json:"__typename"`
	// The HTTP status code corresponding to the error
	Code string `json:"code"`
	// The error message
	Message string `json:"message"`
}

// GetTypename returns UpdateLedgerUpdateLedgerBadRequestError.Typename, and is useful for accessing the field via an interface.
func (v *UpdateLedgerUpdateLedgerBadRequestError) GetTypename() *string { return v.Typename }

// GetCode returns UpdateLedgerUpdateLedgerBadRequestError.Code, and is useful for accessing the field via an interface.
func (v *UpdateLedgerUpdateLedgerBadRequestError) GetCode() string { return v.Code }

// GetMessage returns UpdateLedgerUpdateLedgerBadRequestError.Message, and is useful for accessing the field via an interface.
func (v *UpdateLedgerUpdateLedgerBadRequestError) GetMessage() string { return v.Message }

// UpdateLedgerUpdateLedgerInternalError includes the requested fields of the GraphQL type InternalError.
// The GraphQL type's documentation follows.
//
// Equivalent to an HTTP 5XX - something went wrong with our API.
type UpdateLedgerUpdateLedgerInternalError struct {
	Typename *string `json:"__typename"`
	// The HTTP status code corresponding to the error
	Code string `json:"code"`
	// The error message
	Message string `json:"message"`
}

// GetTypename returns UpdateLedgerUpdateLedgerInternalError.Typename, and is useful for accessing the field via an interface.
func (v *UpdateLedgerUpdateLedgerInternalError) GetTypename() *string { return v.Typename }

// GetCode returns UpdateLedgerUpdateLedgerInternalError.Code, and is useful for accessing the field via an interface.
func (v *UpdateLedgerUpdateLedgerInternalError) GetCode() string { return v.Code }

// GetMessage returns UpdateLedgerUpdateLedgerInternalError.Message, and is useful for accessing the field via an interface.
func (v *UpdateLedgerUpdateLedgerInternalError) GetMessage() string { return v.Message }

// UpdateLedgerUpdateLedgerUpdateLedgerResponse includes the requested fields of the GraphQL interface UpdateLedgerResponse.
//
// UpdateLedgerUpdateLedgerUpdateLedgerResponse is implemented by the following types:
// UpdateLedgerUpdateLedgerBadRequestError
// UpdateLedgerUpdateLedgerInternalError
// UpdateLedgerUpdateLedgerUpdateLedgerResult
type UpdateLedgerUpdateLedgerUpdateLedgerResponse interface {
	implementsGraphQLInterfaceUpdateLedgerUpdateLedgerUpdateLedgerResponse()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *UpdateLedgerUpdateLedgerBadRequestError) implementsGraphQLInterfaceUpdateLedgerUpdateLedgerUpdateLedgerResponse() {
}
func (v *UpdateLedgerUpdateLedgerInternalError) implementsGraphQLInterfaceUpdateLedgerUpdateLedgerUpdateLedgerResponse() {
}
func (v *UpdateLedgerUpdateLedgerUpdateLedgerResult) implementsGraphQLInterfaceUpdateLedgerUpdateLedgerUpdateLedgerResponse() {
}

func __unmarshalUpdateLedgerUpdateLedgerUpdateLedgerResponse(b []byte, v *UpdateLedgerUpdateLedgerUpdateLedgerResponse) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "BadRequestError":
		*v = new(UpdateLedgerUpdateLedgerBadRequestError)
		return json.Unmarshal(b, *v)
	case "InternalError":
		*v = new(UpdateLedgerUpdateLedgerInternalError)
		return json.Unmarshal(b, *v)
	case "UpdateLedgerResult":
		*v = new(UpdateLedgerUpdateLedgerUpdateLedgerResult)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing UpdateLedgerResponse.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for UpdateLedgerUpdateLedgerUpdateLedgerResponse: "%v"`, tn.TypeName)
	}
}

func __marshalUpdateLedgerUpdateLedgerUpdateLedgerResponse(v *UpdateLedgerUpdateLedgerUpdateLedgerResponse) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *UpdateLedgerUpdateLedgerBadRequestError:
		typename = "BadRequestError"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateLedgerUpdateLedgerBadRequestError
		}{typename, v}
		return json.Marshal(result)
	case *UpdateLedgerUpdateLedgerInternalError:
		typename = "InternalError"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateLedgerUpdateLedgerInternalError
		}{typename, v}
		return json.Marshal(result)
	case *UpdateLedgerUpdateLedgerUpdateLedgerResult:
		typename = "UpdateLedgerResult"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateLedgerUpdateLedgerUpdateLedgerResult
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for UpdateLedgerUpdateLedgerUpdateLedgerResponse: "%T"`, v)
	}
}

// UpdateLedgerUpdateLedgerUpdateLedgerResult includes the requested fields of the GraphQL type UpdateLedgerResult.
type UpdateLedgerUpdateLedgerUpdateLedgerResult struct {
	Typename *string `json:"__typename"`
	// The updated Ledger.
	Ledger UpdateLedgerUpdateLedgerUpdateLedgerResultLedger `json:"ledger"`
}

// GetTypename returns UpdateLedgerUpdateLedgerUpdateLedgerResult.Typename, and is useful for accessing the field via an interface.
func (v *UpdateLedgerUpdateLedgerUpdateLedgerResult) GetTypename() *string { return v.Typename }

// GetLedger returns UpdateLedgerUpdateLedgerUpdateLedgerResult.Ledger, and is useful for accessing the field via an interface.
func (v *UpdateLedgerUpdateLedgerUpdateLedgerResult) GetLedger() UpdateLedgerUpdateLedgerUpdateLedgerResultLedger {
	return v.Ledger
}

// UpdateLedgerUpdateLedgerUpdateLedgerResultLedger includes the requested fields of the GraphQL type Ledger.
// The GraphQL type's documentation follows.
//
// Ledgers are databases designed for managing money
type UpdateLedgerUpdateLedgerUpdateLedgerResultLedger struct {
	Id string `json:"id"`
	// The IK passed into the [createLedger](/api-reference#mutations-createledger) mutation. This is treated as a unique identifier for this ledger.
	Ik string `json:"ik"`
	// The name of the ledger. Can be updated with the [updateLedger](/api-reference#mutations-updateledger) mutation.
	Name string `json:"name"`
}

// GetId returns UpdateLedgerUpdateLedgerUpdateLedgerResultLedger.Id, and is useful for accessing the field via an interface.
func (v *UpdateLedgerUpdateLedgerUpdateLedgerResultLedger) GetId() string { return v.Id }

// GetIk returns UpdateLedgerUpdateLedgerUpdateLedgerResultLedger.Ik, and is useful for accessing the field via an interface.
func (v *UpdateLedgerUpdateLedgerUpdateLedgerResultLedger) GetIk() string { return v.Ik }

// GetName returns UpdateLedgerUpdateLedgerUpdateLedgerResultLedger.Name, and is useful for accessing the field via an interface.
func (v *UpdateLedgerUpdateLedgerUpdateLedgerResultLedger) GetName() string { return v.Name }

// __AddLedgerEntryInput is used internally by genqlient
type __AddLedgerEntryInput struct {
	Ik         string                  `json:"ik"`
	LedgerIk   string                  `json:"ledgerIk"`
	EntryType  string                  `json:"entryType"`
	Posted     *string                 `json:"posted"`
	Parameters json.RawMessage         `json:"parameters"`
	Tags       []LedgerEntryTagInput   `json:"tags"`
	Groups     []LedgerEntryGroupInput `json:"groups"`
}

// GetIk returns __AddLedgerEntryInput.Ik, and is useful for accessing the field via an interface.
func (v *__AddLedgerEntryInput) GetIk() string { return v.Ik }

// GetLedgerIk returns __AddLedgerEntryInput.LedgerIk, and is useful for accessing the field via an interface.
func (v *__AddLedgerEntryInput) GetLedgerIk() string { return v.LedgerIk }

// GetEntryType returns __AddLedgerEntryInput.EntryType, and is useful for accessing the field via an interface.
func (v *__AddLedgerEntryInput) GetEntryType() string { return v.EntryType }

// GetPosted returns __AddLedgerEntryInput.Posted, and is useful for accessing the field via an interface.
func (v *__AddLedgerEntryInput) GetPosted() *string { return v.Posted }

// GetParameters returns __AddLedgerEntryInput.Parameters, and is useful for accessing the field via an interface.
func (v *__AddLedgerEntryInput) GetParameters() json.RawMessage { return v.Parameters }

// GetTags returns __AddLedgerEntryInput.Tags, and is useful for accessing the field via an interface.
func (v *__AddLedgerEntryInput) GetTags() []LedgerEntryTagInput { return v.Tags }

// GetGroups returns __AddLedgerEntryInput.Groups, and is useful for accessing the field via an interface.
func (v *__AddLedgerEntryInput) GetGroups() []LedgerEntryGroupInput { return v.Groups }

// __AddLedgerEntryRuntimeInput is used internally by genqlient
type __AddLedgerEntryRuntimeInput struct {
	Ik        string                  `json:"ik"`
	EntryType string                  `json:"entryType"`
	LedgerIk  string                  `json:"ledgerIk"`
	Posted    *string                 `json:"posted"`
	Lines     []LedgerLineInput       `json:"lines"`
	Tags      []LedgerEntryTagInput   `json:"tags"`
	Groups    []LedgerEntryGroupInput `json:"groups"`
}

// GetIk returns __AddLedgerEntryRuntimeInput.Ik, and is useful for accessing the field via an interface.
func (v *__AddLedgerEntryRuntimeInput) GetIk() string { return v.Ik }

// GetEntryType returns __AddLedgerEntryRuntimeInput.EntryType, and is useful for accessing the field via an interface.
func (v *__AddLedgerEntryRuntimeInput) GetEntryType() string { return v.EntryType }

// GetLedgerIk returns __AddLedgerEntryRuntimeInput.LedgerIk, and is useful for accessing the field via an interface.
func (v *__AddLedgerEntryRuntimeInput) GetLedgerIk() string { return v.LedgerIk }

// GetPosted returns __AddLedgerEntryRuntimeInput.Posted, and is useful for accessing the field via an interface.
func (v *__AddLedgerEntryRuntimeInput) GetPosted() *string { return v.Posted }

// GetLines returns __AddLedgerEntryRuntimeInput.Lines, and is useful for accessing the field via an interface.
func (v *__AddLedgerEntryRuntimeInput) GetLines() []LedgerLineInput { return v.Lines }

// GetTags returns __AddLedgerEntryRuntimeInput.Tags, and is useful for accessing the field via an interface.
func (v *__AddLedgerEntryRuntimeInput) GetTags() []LedgerEntryTagInput { return v.Tags }

// GetGroups returns __AddLedgerEntryRuntimeInput.Groups, and is useful for accessing the field via an interface.
func (v *__AddLedgerEntryRuntimeInput) GetGroups() []LedgerEntryGroupInput { return v.Groups }

// __CreateCustomLinkInput is used internally by genqlient
type __CreateCustomLinkInput struct {
	Name string `json:"name"`
	Ik   string `json:"ik"`
}

// GetName returns __CreateCustomLinkInput.Name, and is useful for accessing the field via an interface.
func (v *__CreateCustomLinkInput) GetName() string { return v.Name }

// GetIk returns __CreateCustomLinkInput.Ik, and is useful for accessing the field via an interface.
func (v *__CreateCustomLinkInput) GetIk() string { return v.Ik }

// __CreateLedgerInput is used internally by genqlient
type __CreateLedgerInput struct {
	Ik        string            `json:"ik"`
	Ledger    CreateLedgerInput `json:"ledger"`
	SchemaKey string            `json:"schemaKey"`
}

// GetIk returns __CreateLedgerInput.Ik, and is useful for accessing the field via an interface.
func (v *__CreateLedgerInput) GetIk() string { return v.Ik }

// GetLedger returns __CreateLedgerInput.Ledger, and is useful for accessing the field via an interface.
func (v *__CreateLedgerInput) GetLedger() CreateLedgerInput { return v.Ledger }

// GetSchemaKey returns __CreateLedgerInput.SchemaKey, and is useful for accessing the field via an interface.
func (v *__CreateLedgerInput) GetSchemaKey() string { return v.SchemaKey }

// __GetLedgerAccountBalanceInput is used internally by genqlient
type __GetLedgerAccountBalanceInput struct {
	Path                      string                      `json:"path"`
	LedgerIk                  string                      `json:"ledgerIk"`
	BalanceCurrency           *CurrencyMatchInput         `json:"balanceCurrency"`
	BalanceAt                 *string                     `json:"balanceAt"`
	OwnBalanceConsistencyMode *ReadBalanceConsistencyMode `json:"ownBalanceConsistencyMode"`
}

// GetPath returns __GetLedgerAccountBalanceInput.Path, and is useful for accessing the field via an interface.
func (v *__GetLedgerAccountBalanceInput) GetPath() string { return v.Path }

// GetLedgerIk returns __GetLedgerAccountBalanceInput.LedgerIk, and is useful for accessing the field via an interface.
func (v *__GetLedgerAccountBalanceInput) GetLedgerIk() string { return v.LedgerIk }

// GetBalanceCurrency returns __GetLedgerAccountBalanceInput.BalanceCurrency, and is useful for accessing the field via an interface.
func (v *__GetLedgerAccountBalanceInput) GetBalanceCurrency() *CurrencyMatchInput {
	return v.BalanceCurrency
}

// GetBalanceAt returns __GetLedgerAccountBalanceInput.BalanceAt, and is useful for accessing the field via an interface.
func (v *__GetLedgerAccountBalanceInput) GetBalanceAt() *string { return v.BalanceAt }

// GetOwnBalanceConsistencyMode returns __GetLedgerAccountBalanceInput.OwnBalanceConsistencyMode, and is useful for accessing the field via an interface.
func (v *__GetLedgerAccountBalanceInput) GetOwnBalanceConsistencyMode() *ReadBalanceConsistencyMode {
	return v.OwnBalanceConsistencyMode
}

// __GetLedgerAccountLinesInput is used internally by genqlient
type __GetLedgerAccountLinesInput struct {
	Path     string                `json:"path"`
	LedgerIk string                `json:"ledgerIk"`
	After    *string               `json:"after"`
	First    *int                  `json:"first"`
	Before   *string               `json:"before"`
	Filter   *LedgerLinesFilterSet `json:"filter"`
}

// GetPath returns __GetLedgerAccountLinesInput.Path, and is useful for accessing the field via an interface.
func (v *__GetLedgerAccountLinesInput) GetPath() string { return v.Path }

// GetLedgerIk returns __GetLedgerAccountLinesInput.LedgerIk, and is useful for accessing the field via an interface.
func (v *__GetLedgerAccountLinesInput) GetLedgerIk() string { return v.LedgerIk }

// GetAfter returns __GetLedgerAccountLinesInput.After, and is useful for accessing the field via an interface.
func (v *__GetLedgerAccountLinesInput) GetAfter() *string { return v.After }

// GetFirst returns __GetLedgerAccountLinesInput.First, and is useful for accessing the field via an interface.
func (v *__GetLedgerAccountLinesInput) GetFirst() *int { return v.First }

// GetBefore returns __GetLedgerAccountLinesInput.Before, and is useful for accessing the field via an interface.
func (v *__GetLedgerAccountLinesInput) GetBefore() *string { return v.Before }

// GetFilter returns __GetLedgerAccountLinesInput.Filter, and is useful for accessing the field via an interface.
func (v *__GetLedgerAccountLinesInput) GetFilter() *LedgerLinesFilterSet { return v.Filter }

// __GetLedgerEntryInput is used internally by genqlient
type __GetLedgerEntryInput struct {
	Ik       string `json:"ik"`
	LedgerIk string `json:"ledgerIk"`
}

// GetIk returns __GetLedgerEntryInput.Ik, and is useful for accessing the field via an interface.
func (v *__GetLedgerEntryInput) GetIk() string { return v.Ik }

// GetLedgerIk returns __GetLedgerEntryInput.LedgerIk, and is useful for accessing the field via an interface.
func (v *__GetLedgerEntryInput) GetLedgerIk() string { return v.LedgerIk }

// __GetLedgerInput is used internally by genqlient
type __GetLedgerInput struct {
	Ik string `json:"ik"`
}

// GetIk returns __GetLedgerInput.Ik, and is useful for accessing the field via an interface.
func (v *__GetLedgerInput) GetIk() string { return v.Ik }

// __GetSchemaInput is used internally by genqlient
type __GetSchemaInput struct {
	Key     string `json:"key"`
	Version *int   `json:"version"`
}

// GetKey returns __GetSchemaInput.Key, and is useful for accessing the field via an interface.
func (v *__GetSchemaInput) GetKey() string { return v.Key }

// GetVersion returns __GetSchemaInput.Version, and is useful for accessing the field via an interface.
func (v *__GetSchemaInput) GetVersion() *int { return v.Version }

// __ListLedgerAccountBalancesInput is used internally by genqlient
type __ListLedgerAccountBalancesInput struct {
	LedgerIk                  string                      `json:"ledgerIk"`
	After                     *string                     `json:"after"`
	First                     *int                        `json:"first"`
	Before                    *string                     `json:"before"`
	BalanceCurrency           *CurrencyMatchInput         `json:"balanceCurrency"`
	BalanceAt                 *string                     `json:"balanceAt"`
	OwnBalanceConsistencyMode *ReadBalanceConsistencyMode `json:"ownBalanceConsistencyMode"`
}

// GetLedgerIk returns __ListLedgerAccountBalancesInput.LedgerIk, and is useful for accessing the field via an interface.
func (v *__ListLedgerAccountBalancesInput) GetLedgerIk() string { return v.LedgerIk }

// GetAfter returns __ListLedgerAccountBalancesInput.After, and is useful for accessing the field via an interface.
func (v *__ListLedgerAccountBalancesInput) GetAfter() *string { return v.After }

// GetFirst returns __ListLedgerAccountBalancesInput.First, and is useful for accessing the field via an interface.
func (v *__ListLedgerAccountBalancesInput) GetFirst() *int { return v.First }

// GetBefore returns __ListLedgerAccountBalancesInput.Before, and is useful for accessing the field via an interface.
func (v *__ListLedgerAccountBalancesInput) GetBefore() *string { return v.Before }

// GetBalanceCurrency returns __ListLedgerAccountBalancesInput.BalanceCurrency, and is useful for accessing the field via an interface.
func (v *__ListLedgerAccountBalancesInput) GetBalanceCurrency() *CurrencyMatchInput {
	return v.BalanceCurrency
}

// GetBalanceAt returns __ListLedgerAccountBalancesInput.BalanceAt, and is useful for accessing the field via an interface.
func (v *__ListLedgerAccountBalancesInput) GetBalanceAt() *string { return v.BalanceAt }

// GetOwnBalanceConsistencyMode returns __ListLedgerAccountBalancesInput.OwnBalanceConsistencyMode, and is useful for accessing the field via an interface.
func (v *__ListLedgerAccountBalancesInput) GetOwnBalanceConsistencyMode() *ReadBalanceConsistencyMode {
	return v.OwnBalanceConsistencyMode
}

// __ListLedgerAccountsInput is used internally by genqlient
type __ListLedgerAccountsInput struct {
	LedgerIk string  `json:"ledgerIk"`
	After    *string `json:"after"`
	First    *int    `json:"first"`
	Before   *string `json:"before"`
}

// GetLedgerIk returns __ListLedgerAccountsInput.LedgerIk, and is useful for accessing the field via an interface.
func (v *__ListLedgerAccountsInput) GetLedgerIk() string { return v.LedgerIk }

// GetAfter returns __ListLedgerAccountsInput.After, and is useful for accessing the field via an interface.
func (v *__ListLedgerAccountsInput) GetAfter() *string { return v.After }

// GetFirst returns __ListLedgerAccountsInput.First, and is useful for accessing the field via an interface.
func (v *__ListLedgerAccountsInput) GetFirst() *int { return v.First }

// GetBefore returns __ListLedgerAccountsInput.Before, and is useful for accessing the field via an interface.
func (v *__ListLedgerAccountsInput) GetBefore() *string { return v.Before }

// __ListLedgerEntriesInput is used internally by genqlient
type __ListLedgerEntriesInput struct {
	LedgerIk string                  `json:"ledgerIk"`
	After    *string                 `json:"after"`
	First    *int                    `json:"first"`
	Before   *string                 `json:"before"`
	Filter   *LedgerEntriesFilterSet `json:"filter"`
}

// GetLedgerIk returns __ListLedgerEntriesInput.LedgerIk, and is useful for accessing the field via an interface.
func (v *__ListLedgerEntriesInput) GetLedgerIk() string { return v.LedgerIk }

// GetAfter returns __ListLedgerEntriesInput.After, and is useful for accessing the field via an interface.
func (v *__ListLedgerEntriesInput) GetAfter() *string { return v.After }

// GetFirst returns __ListLedgerEntriesInput.First, and is useful for accessing the field via an interface.
func (v *__ListLedgerEntriesInput) GetFirst() *int { return v.First }

// GetBefore returns __ListLedgerEntriesInput.Before, and is useful for accessing the field via an interface.
func (v *__ListLedgerEntriesInput) GetBefore() *string { return v.Before }

// GetFilter returns __ListLedgerEntriesInput.Filter, and is useful for accessing the field via an interface.
func (v *__ListLedgerEntriesInput) GetFilter() *LedgerEntriesFilterSet { return v.Filter }

// __ListMultiCurrencyLedgerAccountBalancesInput is used internally by genqlient
type __ListMultiCurrencyLedgerAccountBalancesInput struct {
	LedgerIk                   string                      `json:"ledgerIk"`
	After                      *string                     `json:"after"`
	First                      *int                        `json:"first"`
	Before                     *string                     `json:"before"`
	BalanceAt                  *string                     `json:"balanceAt"`
	OwnBalancesConsistencyMode *ReadBalanceConsistencyMode `json:"ownBalancesConsistencyMode"`
}

// GetLedgerIk returns __ListMultiCurrencyLedgerAccountBalancesInput.LedgerIk, and is useful for accessing the field via an interface.
func (v *__ListMultiCurrencyLedgerAccountBalancesInput) GetLedgerIk() string { return v.LedgerIk }

// GetAfter returns __ListMultiCurrencyLedgerAccountBalancesInput.After, and is useful for accessing the field via an interface.
func (v *__ListMultiCurrencyLedgerAccountBalancesInput) GetAfter() *string { return v.After }

// GetFirst returns __ListMultiCurrencyLedgerAccountBalancesInput.First, and is useful for accessing the field via an interface.
func (v *__ListMultiCurrencyLedgerAccountBalancesInput) GetFirst() *int { return v.First }

// GetBefore returns __ListMultiCurrencyLedgerAccountBalancesInput.Before, and is useful for accessing the field via an interface.
func (v *__ListMultiCurrencyLedgerAccountBalancesInput) GetBefore() *string { return v.Before }

// GetBalanceAt returns __ListMultiCurrencyLedgerAccountBalancesInput.BalanceAt, and is useful for accessing the field via an interface.
func (v *__ListMultiCurrencyLedgerAccountBalancesInput) GetBalanceAt() *string { return v.BalanceAt }

// GetOwnBalancesConsistencyMode returns __ListMultiCurrencyLedgerAccountBalancesInput.OwnBalancesConsistencyMode, and is useful for accessing the field via an interface.
func (v *__ListMultiCurrencyLedgerAccountBalancesInput) GetOwnBalancesConsistencyMode() *ReadBalanceConsistencyMode {
	return v.OwnBalancesConsistencyMode
}

// __ReconcileTxInput is used internally by genqlient
type __ReconcileTxInput struct {
	LedgerIk   string                  `json:"ledgerIk"`
	EntryType  string                  `json:"entryType"`
	Parameters json.RawMessage         `json:"parameters"`
	Tags       []LedgerEntryTagInput   `json:"tags"`
	Groups     []LedgerEntryGroupInput `json:"groups"`
}

// GetLedgerIk returns __ReconcileTxInput.LedgerIk, and is useful for accessing the field via an interface.
func (v *__ReconcileTxInput) GetLedgerIk() string { return v.LedgerIk }

// GetEntryType returns __ReconcileTxInput.EntryType, and is useful for accessing the field via an interface.
func (v *__ReconcileTxInput) GetEntryType() string { return v.EntryType }

// GetParameters returns __ReconcileTxInput.Parameters, and is useful for accessing the field via an interface.
func (v *__ReconcileTxInput) GetParameters() json.RawMessage { return v.Parameters }

// GetTags returns __ReconcileTxInput.Tags, and is useful for accessing the field via an interface.
func (v *__ReconcileTxInput) GetTags() []LedgerEntryTagInput { return v.Tags }

// GetGroups returns __ReconcileTxInput.Groups, and is useful for accessing the field via an interface.
func (v *__ReconcileTxInput) GetGroups() []LedgerEntryGroupInput { return v.Groups }

// __ReconcileTxRuntimeInput is used internally by genqlient
type __ReconcileTxRuntimeInput struct {
	LedgerIk  string                  `json:"ledgerIk"`
	EntryType string                  `json:"entryType"`
	Lines     []LedgerLineInput       `json:"lines"`
	Tags      []LedgerEntryTagInput   `json:"tags"`
	Groups    []LedgerEntryGroupInput `json:"groups"`
}

// GetLedgerIk returns __ReconcileTxRuntimeInput.LedgerIk, and is useful for accessing the field via an interface.
func (v *__ReconcileTxRuntimeInput) GetLedgerIk() string { return v.LedgerIk }

// GetEntryType returns __ReconcileTxRuntimeInput.EntryType, and is useful for accessing the field via an interface.
func (v *__ReconcileTxRuntimeInput) GetEntryType() string { return v.EntryType }

// GetLines returns __ReconcileTxRuntimeInput.Lines, and is useful for accessing the field via an interface.
func (v *__ReconcileTxRuntimeInput) GetLines() []LedgerLineInput { return v.Lines }

// GetTags returns __ReconcileTxRuntimeInput.Tags, and is useful for accessing the field via an interface.
func (v *__ReconcileTxRuntimeInput) GetTags() []LedgerEntryTagInput { return v.Tags }

// GetGroups returns __ReconcileTxRuntimeInput.Groups, and is useful for accessing the field via an interface.
func (v *__ReconcileTxRuntimeInput) GetGroups() []LedgerEntryGroupInput { return v.Groups }

// __StoreSchemaInput is used internally by genqlient
type __StoreSchemaInput struct {
	Schema SchemaInput `json:"schema"`
}

// GetSchema returns __StoreSchemaInput.Schema, and is useful for accessing the field via an interface.
func (v *__StoreSchemaInput) GetSchema() SchemaInput { return v.Schema }

// __SyncCustomAccountsInput is used internally by genqlient
type __SyncCustomAccountsInput struct {
	LinkId   string               `json:"linkId"`
	Accounts []CustomAccountInput `json:"accounts"`
}

// GetLinkId returns __SyncCustomAccountsInput.LinkId, and is useful for accessing the field via an interface.
func (v *__SyncCustomAccountsInput) GetLinkId() string { return v.LinkId }

// GetAccounts returns __SyncCustomAccountsInput.Accounts, and is useful for accessing the field via an interface.
func (v *__SyncCustomAccountsInput) GetAccounts() []CustomAccountInput { return v.Accounts }

// __SyncCustomTxsInput is used internally by genqlient
type __SyncCustomTxsInput struct {
	LinkId string          `json:"linkId"`
	Txs    []CustomTxInput `json:"txs"`
}

// GetLinkId returns __SyncCustomTxsInput.LinkId, and is useful for accessing the field via an interface.
func (v *__SyncCustomTxsInput) GetLinkId() string { return v.LinkId }

// GetTxs returns __SyncCustomTxsInput.Txs, and is useful for accessing the field via an interface.
func (v *__SyncCustomTxsInput) GetTxs() []CustomTxInput { return v.Txs }

// __UpdateLedgerInput is used internally by genqlient
type __UpdateLedgerInput struct {
	LedgerIk string            `json:"ledgerIk"`
	Update   UpdateLedgerInput `json:"update"`
}

// GetLedgerIk returns __UpdateLedgerInput.LedgerIk, and is useful for accessing the field via an interface.
func (v *__UpdateLedgerInput) GetLedgerIk() string { return v.LedgerIk }

// GetUpdate returns __UpdateLedgerInput.Update, and is useful for accessing the field via an interface.
func (v *__UpdateLedgerInput) GetUpdate() UpdateLedgerInput { return v.Update }

// The query or mutation executed by AddLedgerEntry.
const AddLedgerEntry_Operation = `
mutation AddLedgerEntry ($ik: SafeString!, $ledgerIk: SafeString!, $entryType: String!, $posted: DateTime, $parameters: JSON!, $tags: [LedgerEntryTagInput!], $groups: [LedgerEntryGroupInput!]) {
	addLedgerEntry(ik: $ik, entry: {ledger:{ik:$ledgerIk},type:$entryType,posted:$posted,parameters:$parameters,tags:$tags,groups:$groups}) {
		__typename
		... on AddLedgerEntryResult {
			isIkReplay
			entry {
				type
				id
				ik
				posted
				created
			}
			lines {
				id
				amount
				account {
					path
				}
			}
		}
		... on Error {
			code
			message
		}
	}
}
`

func AddLedgerEntry(
	ctx_ auth.AuthenticatedContext,
	ik string,
	ledgerIk string,
	entryType string,
	posted *string,
	parameters json.RawMessage,
	tags []LedgerEntryTagInput,
	groups []LedgerEntryGroupInput,
) (*AddLedgerEntryResponse, error) {
	req_ := &graphql.Request{
		OpName: "AddLedgerEntry",
		Query:  AddLedgerEntry_Operation,
		Variables: &__AddLedgerEntryInput{
			Ik:         ik,
			LedgerIk:   ledgerIk,
			EntryType:  entryType,
			Posted:     posted,
			Parameters: parameters,
			Tags:       tags,
			Groups:     groups,
		},
	}
	var err_ error
	var client_ graphql.Client

	client_, err_ = client.NewClient(ctx_)
	if err_ != nil {
		return nil, err_
	}

	var data_ AddLedgerEntryResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by AddLedgerEntryRuntime.
const AddLedgerEntryRuntime_Operation = `
mutation AddLedgerEntryRuntime ($ik: SafeString!, $entryType: String!, $ledgerIk: SafeString!, $posted: DateTime, $lines: [LedgerLineInput!]!, $tags: [LedgerEntryTagInput!], $groups: [LedgerEntryGroupInput!]) {
	addLedgerEntry(ik: $ik, entry: {type:$entryType,ledger:{ik:$ledgerIk},posted:$posted,lines:$lines,tags:$tags,groups:$groups}) {
		__typename
		... on AddLedgerEntryResult {
			isIkReplay
			entry {
				type
				id
				ik
				posted
				created
			}
			lines {
				id
				amount
				account {
					path
				}
			}
		}
		... on Error {
			code
			message
		}
	}
}
`

func AddLedgerEntryRuntime(
	ctx_ auth.AuthenticatedContext,
	ik string,
	entryType string,
	ledgerIk string,
	posted *string,
	lines []LedgerLineInput,
	tags []LedgerEntryTagInput,
	groups []LedgerEntryGroupInput,
) (*AddLedgerEntryRuntimeResponse, error) {
	req_ := &graphql.Request{
		OpName: "AddLedgerEntryRuntime",
		Query:  AddLedgerEntryRuntime_Operation,
		Variables: &__AddLedgerEntryRuntimeInput{
			Ik:        ik,
			EntryType: entryType,
			LedgerIk:  ledgerIk,
			Posted:    posted,
			Lines:     lines,
			Tags:      tags,
			Groups:    groups,
		},
	}
	var err_ error
	var client_ graphql.Client

	client_, err_ = client.NewClient(ctx_)
	if err_ != nil {
		return nil, err_
	}

	var data_ AddLedgerEntryRuntimeResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by CreateCustomLink.
const CreateCustomLink_Operation = `
mutation CreateCustomLink ($name: String!, $ik: SafeString!) {
	createCustomLink(name: $name, ik: $ik) {
		__typename
		... on CreateCustomLinkResult {
			link {
				__typename
				id
				name
				created
			}
			isIkReplay
		}
		... on Error {
			code
			message
		}
	}
}
`

func CreateCustomLink(
	ctx_ auth.AuthenticatedContext,
	name string,
	ik string,
) (*CreateCustomLinkResponse, error) {
	req_ := &graphql.Request{
		OpName: "CreateCustomLink",
		Query:  CreateCustomLink_Operation,
		Variables: &__CreateCustomLinkInput{
			Name: name,
			Ik:   ik,
		},
	}
	var err_ error
	var client_ graphql.Client

	client_, err_ = client.NewClient(ctx_)
	if err_ != nil {
		return nil, err_
	}

	var data_ CreateCustomLinkResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by CreateLedger.
const CreateLedger_Operation = `
mutation CreateLedger ($ik: SafeString!, $ledger: CreateLedgerInput!, $schemaKey: SafeString!) {
	createLedger(ik: $ik, ledger: $ledger, schema: {key:$schemaKey}) {
		__typename
		... on CreateLedgerResult {
			ledger {
				id
				ik
				name
				created
				schema {
					key
				}
			}
			isIkReplay
		}
		... on Error {
			code
			message
		}
	}
}
`

func CreateLedger(
	ctx_ auth.AuthenticatedContext,
	ik string,
	ledger CreateLedgerInput,
	schemaKey string,
) (*CreateLedgerResponse, error) {
	req_ := &graphql.Request{
		OpName: "CreateLedger",
		Query:  CreateLedger_Operation,
		Variables: &__CreateLedgerInput{
			Ik:        ik,
			Ledger:    ledger,
			SchemaKey: schemaKey,
		},
	}
	var err_ error
	var client_ graphql.Client

	client_, err_ = client.NewClient(ctx_)
	if err_ != nil {
		return nil, err_
	}

	var data_ CreateLedgerResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by GetLedger.
const GetLedger_Operation = `
query GetLedger ($ik: SafeString!) {
	ledger(ledger: {ik:$ik}) {
		id
		ik
		name
		created
		balanceUTCOffset
	}
}
`

func GetLedger(
	ctx_ auth.AuthenticatedContext,
	ik string,
) (*GetLedgerResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetLedger",
		Query:  GetLedger_Operation,
		Variables: &__GetLedgerInput{
			Ik: ik,
		},
	}
	var err_ error
	var client_ graphql.Client

	client_, err_ = client.NewClient(ctx_)
	if err_ != nil {
		return nil, err_
	}

	var data_ GetLedgerResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by GetLedgerAccountBalance.
const GetLedgerAccountBalance_Operation = `
query GetLedgerAccountBalance ($path: String!, $ledgerIk: SafeString!, $balanceCurrency: CurrencyMatchInput, $balanceAt: LastMoment, $ownBalanceConsistencyMode: ReadBalanceConsistencyMode) {
	ledgerAccount(ledgerAccount: {ledger:{ik:$ledgerIk},path:$path}) {
		id
		path
		ownBalance(currency: $balanceCurrency, at: $balanceAt, consistencyMode: $ownBalanceConsistencyMode)
	}
}
`

func GetLedgerAccountBalance(
	ctx_ auth.AuthenticatedContext,
	path string,
	ledgerIk string,
	balanceCurrency *CurrencyMatchInput,
	balanceAt *string,
	ownBalanceConsistencyMode *ReadBalanceConsistencyMode,
) (*GetLedgerAccountBalanceResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetLedgerAccountBalance",
		Query:  GetLedgerAccountBalance_Operation,
		Variables: &__GetLedgerAccountBalanceInput{
			Path:                      path,
			LedgerIk:                  ledgerIk,
			BalanceCurrency:           balanceCurrency,
			BalanceAt:                 balanceAt,
			OwnBalanceConsistencyMode: ownBalanceConsistencyMode,
		},
	}
	var err_ error
	var client_ graphql.Client

	client_, err_ = client.NewClient(ctx_)
	if err_ != nil {
		return nil, err_
	}

	var data_ GetLedgerAccountBalanceResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by GetLedgerAccountLines.
const GetLedgerAccountLines_Operation = `
query GetLedgerAccountLines ($path: String!, $ledgerIk: SafeString!, $after: String, $first: Int, $before: String, $filter: LedgerLinesFilterSet) {
	ledgerAccount(ledgerAccount: {ledger:{ik:$ledgerIk},path:$path}) {
		id
		path
		lines(after: $after, first: $first, before: $before, filter: $filter) {
			nodes {
				id
				posted
				created
				amount
				description
			}
			pageInfo {
				hasNextPage
				endCursor
				hasPreviousPage
				startCursor
			}
		}
	}
}
`

func GetLedgerAccountLines(
	ctx_ auth.AuthenticatedContext,
	path string,
	ledgerIk string,
	after *string,
	first *int,
	before *string,
	filter *LedgerLinesFilterSet,
) (*GetLedgerAccountLinesResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetLedgerAccountLines",
		Query:  GetLedgerAccountLines_Operation,
		Variables: &__GetLedgerAccountLinesInput{
			Path:     path,
			LedgerIk: ledgerIk,
			After:    after,
			First:    first,
			Before:   before,
			Filter:   filter,
		},
	}
	var err_ error
	var client_ graphql.Client

	client_, err_ = client.NewClient(ctx_)
	if err_ != nil {
		return nil, err_
	}

	var data_ GetLedgerAccountLinesResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by GetLedgerEntry.
const GetLedgerEntry_Operation = `
query GetLedgerEntry ($ik: SafeString!, $ledgerIk: SafeString!) {
	ledgerEntry(ledgerEntry: {ik:$ik,ledger:{ik:$ledgerIk}}) {
		id
		ik
		posted
		created
		description
		lines {
			nodes {
				id
				amount
				account {
					path
				}
			}
		}
	}
}
`

func GetLedgerEntry(
	ctx_ auth.AuthenticatedContext,
	ik string,
	ledgerIk string,
) (*GetLedgerEntryResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetLedgerEntry",
		Query:  GetLedgerEntry_Operation,
		Variables: &__GetLedgerEntryInput{
			Ik:       ik,
			LedgerIk: ledgerIk,
		},
	}
	var err_ error
	var client_ graphql.Client

	client_, err_ = client.NewClient(ctx_)
	if err_ != nil {
		return nil, err_
	}

	var data_ GetLedgerEntryResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by GetSchema.
const GetSchema_Operation = `
query GetSchema ($key: SafeString!, $version: Int) {
	schema(schema: {key:$key,version:$version}) {
		key
		name
		version {
			created
			version
			json
		}
	}
}
`

func GetSchema(
	ctx_ auth.AuthenticatedContext,
	key string,
	version *int,
) (*GetSchemaResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetSchema",
		Query:  GetSchema_Operation,
		Variables: &__GetSchemaInput{
			Key:     key,
			Version: version,
		},
	}
	var err_ error
	var client_ graphql.Client

	client_, err_ = client.NewClient(ctx_)
	if err_ != nil {
		return nil, err_
	}

	var data_ GetSchemaResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by ListLedgerAccountBalances.
const ListLedgerAccountBalances_Operation = `
query ListLedgerAccountBalances ($ledgerIk: SafeString!, $after: String, $first: Int, $before: String, $balanceCurrency: CurrencyMatchInput, $balanceAt: LastMoment, $ownBalanceConsistencyMode: ReadBalanceConsistencyMode) {
	ledger(ledger: {ik:$ledgerIk}) {
		id
		ik
		name
		created
		ledgerAccounts(after: $after, first: $first, before: $before) {
			nodes {
				id
				path
				name
				type
				created
				ownBalance(currency: $balanceCurrency, at: $balanceAt, consistencyMode: $ownBalanceConsistencyMode)
				childBalance(currency: $balanceCurrency, at: $balanceAt)
				balance(currency: $balanceCurrency, at: $balanceAt)
			}
			pageInfo {
				hasNextPage
				endCursor
				hasPreviousPage
				startCursor
			}
		}
	}
}
`

func ListLedgerAccountBalances(
	ctx_ auth.AuthenticatedContext,
	ledgerIk string,
	after *string,
	first *int,
	before *string,
	balanceCurrency *CurrencyMatchInput,
	balanceAt *string,
	ownBalanceConsistencyMode *ReadBalanceConsistencyMode,
) (*ListLedgerAccountBalancesResponse, error) {
	req_ := &graphql.Request{
		OpName: "ListLedgerAccountBalances",
		Query:  ListLedgerAccountBalances_Operation,
		Variables: &__ListLedgerAccountBalancesInput{
			LedgerIk:                  ledgerIk,
			After:                     after,
			First:                     first,
			Before:                    before,
			BalanceCurrency:           balanceCurrency,
			BalanceAt:                 balanceAt,
			OwnBalanceConsistencyMode: ownBalanceConsistencyMode,
		},
	}
	var err_ error
	var client_ graphql.Client

	client_, err_ = client.NewClient(ctx_)
	if err_ != nil {
		return nil, err_
	}

	var data_ ListLedgerAccountBalancesResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by ListLedgerAccounts.
const ListLedgerAccounts_Operation = `
query ListLedgerAccounts ($ledgerIk: SafeString!, $after: String, $first: Int, $before: String) {
	ledger(ledger: {ik:$ledgerIk}) {
		id
		ik
		name
		created
		ledgerAccounts(after: $after, first: $first, before: $before) {
			nodes {
				id
				path
				name
				type
				created
			}
			pageInfo {
				hasNextPage
				endCursor
				hasPreviousPage
				startCursor
			}
		}
	}
}
`

func ListLedgerAccounts(
	ctx_ auth.AuthenticatedContext,
	ledgerIk string,
	after *string,
	first *int,
	before *string,
) (*ListLedgerAccountsResponse, error) {
	req_ := &graphql.Request{
		OpName: "ListLedgerAccounts",
		Query:  ListLedgerAccounts_Operation,
		Variables: &__ListLedgerAccountsInput{
			LedgerIk: ledgerIk,
			After:    after,
			First:    first,
			Before:   before,
		},
	}
	var err_ error
	var client_ graphql.Client

	client_, err_ = client.NewClient(ctx_)
	if err_ != nil {
		return nil, err_
	}

	var data_ ListLedgerAccountsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by ListLedgerEntries.
const ListLedgerEntries_Operation = `
query ListLedgerEntries ($ledgerIk: SafeString!, $after: String, $first: Int, $before: String, $filter: LedgerEntriesFilterSet) {
	ledger(ledger: {ik:$ledgerIk}) {
		ledgerEntries(after: $after, first: $first, before: $before, filter: $filter) {
			nodes {
				ik
				type
				posted
				lines {
					nodes {
						amount
						account {
							path
						}
					}
				}
			}
			pageInfo {
				hasNextPage
				endCursor
				hasPreviousPage
				startCursor
			}
		}
	}
}
`

func ListLedgerEntries(
	ctx_ auth.AuthenticatedContext,
	ledgerIk string,
	after *string,
	first *int,
	before *string,
	filter *LedgerEntriesFilterSet,
) (*ListLedgerEntriesResponse, error) {
	req_ := &graphql.Request{
		OpName: "ListLedgerEntries",
		Query:  ListLedgerEntries_Operation,
		Variables: &__ListLedgerEntriesInput{
			LedgerIk: ledgerIk,
			After:    after,
			First:    first,
			Before:   before,
			Filter:   filter,
		},
	}
	var err_ error
	var client_ graphql.Client

	client_, err_ = client.NewClient(ctx_)
	if err_ != nil {
		return nil, err_
	}

	var data_ ListLedgerEntriesResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by ListMultiCurrencyLedgerAccountBalances.
const ListMultiCurrencyLedgerAccountBalances_Operation = `
query ListMultiCurrencyLedgerAccountBalances ($ledgerIk: SafeString!, $after: String, $first: Int, $before: String, $balanceAt: LastMoment, $ownBalancesConsistencyMode: ReadBalanceConsistencyMode) {
	ledger(ledger: {ik:$ledgerIk}) {
		id
		ik
		name
		created
		ledgerAccounts(after: $after, first: $first, before: $before) {
			nodes {
				id
				path
				name
				type
				created
				ownBalances(at: $balanceAt, consistencyMode: $ownBalancesConsistencyMode) {
					nodes {
						currency {
							code
							customCurrencyId
						}
						amount
					}
				}
				childBalances(at: $balanceAt) {
					nodes {
						currency {
							code
							customCurrencyId
						}
						amount
					}
				}
				balances(at: $balanceAt) {
					nodes {
						currency {
							code
							customCurrencyId
						}
						amount
					}
				}
			}
			pageInfo {
				hasNextPage
				endCursor
				hasPreviousPage
				startCursor
			}
		}
	}
}
`

func ListMultiCurrencyLedgerAccountBalances(
	ctx_ auth.AuthenticatedContext,
	ledgerIk string,
	after *string,
	first *int,
	before *string,
	balanceAt *string,
	ownBalancesConsistencyMode *ReadBalanceConsistencyMode,
) (*ListMultiCurrencyLedgerAccountBalancesResponse, error) {
	req_ := &graphql.Request{
		OpName: "ListMultiCurrencyLedgerAccountBalances",
		Query:  ListMultiCurrencyLedgerAccountBalances_Operation,
		Variables: &__ListMultiCurrencyLedgerAccountBalancesInput{
			LedgerIk:                   ledgerIk,
			After:                      after,
			First:                      first,
			Before:                     before,
			BalanceAt:                  balanceAt,
			OwnBalancesConsistencyMode: ownBalancesConsistencyMode,
		},
	}
	var err_ error
	var client_ graphql.Client

	client_, err_ = client.NewClient(ctx_)
	if err_ != nil {
		return nil, err_
	}

	var data_ ListMultiCurrencyLedgerAccountBalancesResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by ReconcileTx.
const ReconcileTx_Operation = `
mutation ReconcileTx ($ledgerIk: SafeString!, $entryType: String!, $parameters: JSON!, $tags: [LedgerEntryTagInput!], $groups: [LedgerEntryGroupInput!]) {
	reconcileTx(entry: {ledger:{ik:$ledgerIk},type:$entryType,parameters:$parameters,tags:$tags,groups:$groups}) {
		__typename
		... on ReconcileTxResult {
			entry {
				id
				ik
				date
				posted
				created
				description
			}
			lines {
				id
				amount
				account {
					path
				}
				externalTxId
			}
		}
		... on Error {
			code
			message
		}
	}
}
`

func ReconcileTx(
	ctx_ auth.AuthenticatedContext,
	ledgerIk string,
	entryType string,
	parameters json.RawMessage,
	tags []LedgerEntryTagInput,
	groups []LedgerEntryGroupInput,
) (*ReconcileTxResponse, error) {
	req_ := &graphql.Request{
		OpName: "ReconcileTx",
		Query:  ReconcileTx_Operation,
		Variables: &__ReconcileTxInput{
			LedgerIk:   ledgerIk,
			EntryType:  entryType,
			Parameters: parameters,
			Tags:       tags,
			Groups:     groups,
		},
	}
	var err_ error
	var client_ graphql.Client

	client_, err_ = client.NewClient(ctx_)
	if err_ != nil {
		return nil, err_
	}

	var data_ ReconcileTxResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by ReconcileTxRuntime.
const ReconcileTxRuntime_Operation = `
mutation ReconcileTxRuntime ($ledgerIk: SafeString!, $entryType: String!, $lines: [LedgerLineInput!]!, $tags: [LedgerEntryTagInput!], $groups: [LedgerEntryGroupInput!]) {
	reconcileTx(entry: {ledger:{ik:$ledgerIk},type:$entryType,lines:$lines,tags:$tags,groups:$groups}) {
		__typename
		... on ReconcileTxResult {
			entry {
				id
				ik
				date
				posted
				created
				description
			}
			lines {
				id
				amount
				account {
					path
				}
				externalTxId
			}
		}
		... on Error {
			code
			message
		}
	}
}
`

func ReconcileTxRuntime(
	ctx_ auth.AuthenticatedContext,
	ledgerIk string,
	entryType string,
	lines []LedgerLineInput,
	tags []LedgerEntryTagInput,
	groups []LedgerEntryGroupInput,
) (*ReconcileTxRuntimeResponse, error) {
	req_ := &graphql.Request{
		OpName: "ReconcileTxRuntime",
		Query:  ReconcileTxRuntime_Operation,
		Variables: &__ReconcileTxRuntimeInput{
			LedgerIk:  ledgerIk,
			EntryType: entryType,
			Lines:     lines,
			Tags:      tags,
			Groups:    groups,
		},
	}
	var err_ error
	var client_ graphql.Client

	client_, err_ = client.NewClient(ctx_)
	if err_ != nil {
		return nil, err_
	}

	var data_ ReconcileTxRuntimeResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by StoreSchema.
const StoreSchema_Operation = `
mutation StoreSchema ($schema: SchemaInput!) {
	storeSchema(schema: $schema) {
		__typename
		... on StoreSchemaResult {
			schema {
				key
				name
				version {
					created
					version
				}
			}
		}
		... on Error {
			code
			message
		}
	}
}
`

func StoreSchema(
	ctx_ auth.AuthenticatedContext,
	schema SchemaInput,
) (*StoreSchemaResponse, error) {
	req_ := &graphql.Request{
		OpName: "StoreSchema",
		Query:  StoreSchema_Operation,
		Variables: &__StoreSchemaInput{
			Schema: schema,
		},
	}
	var err_ error
	var client_ graphql.Client

	client_, err_ = client.NewClient(ctx_)
	if err_ != nil {
		return nil, err_
	}

	var data_ StoreSchemaResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by SyncCustomAccounts.
const SyncCustomAccounts_Operation = `
mutation SyncCustomAccounts ($linkId: ID!, $accounts: [CustomAccountInput!]!) {
	syncCustomAccounts(link: {id:$linkId}, accounts: $accounts) {
		__typename
		... on SyncCustomAccountsResult {
			accounts {
				id
				externalId
				name
				currency {
					code
					customCurrencyId
				}
			}
		}
		... on Error {
			code
			message
		}
	}
}
`

func SyncCustomAccounts(
	ctx_ auth.AuthenticatedContext,
	linkId string,
	accounts []CustomAccountInput,
) (*SyncCustomAccountsResponse, error) {
	req_ := &graphql.Request{
		OpName: "SyncCustomAccounts",
		Query:  SyncCustomAccounts_Operation,
		Variables: &__SyncCustomAccountsInput{
			LinkId:   linkId,
			Accounts: accounts,
		},
	}
	var err_ error
	var client_ graphql.Client

	client_, err_ = client.NewClient(ctx_)
	if err_ != nil {
		return nil, err_
	}

	var data_ SyncCustomAccountsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by SyncCustomTxs.
const SyncCustomTxs_Operation = `
mutation SyncCustomTxs ($linkId: ID!, $txs: [CustomTxInput!]!) {
	syncCustomTxs(link: {id:$linkId}, txs: $txs) {
		__typename
		... on SyncCustomTxsResult {
			txs {
				__typename
				linkId
				id
				externalId
				externalAccountId
				amount
				description
				posted
			}
		}
		... on Error {
			code
			message
		}
	}
}
`

func SyncCustomTxs(
	ctx_ auth.AuthenticatedContext,
	linkId string,
	txs []CustomTxInput,
) (*SyncCustomTxsResponse, error) {
	req_ := &graphql.Request{
		OpName: "SyncCustomTxs",
		Query:  SyncCustomTxs_Operation,
		Variables: &__SyncCustomTxsInput{
			LinkId: linkId,
			Txs:    txs,
		},
	}
	var err_ error
	var client_ graphql.Client

	client_, err_ = client.NewClient(ctx_)
	if err_ != nil {
		return nil, err_
	}

	var data_ SyncCustomTxsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by UpdateLedger.
const UpdateLedger_Operation = `
mutation UpdateLedger ($ledgerIk: SafeString!, $update: UpdateLedgerInput!) {
	updateLedger(ledger: {ik:$ledgerIk}, update: $update) {
		__typename
		... on UpdateLedgerResult {
			ledger {
				id
				ik
				name
			}
		}
		... on Error {
			code
			message
		}
	}
}
`

func UpdateLedger(
	ctx_ auth.AuthenticatedContext,
	ledgerIk string,
	update UpdateLedgerInput,
) (*UpdateLedgerResponse, error) {
	req_ := &graphql.Request{
		OpName: "UpdateLedger",
		Query:  UpdateLedger_Operation,
		Variables: &__UpdateLedgerInput{
			LedgerIk: ledgerIk,
			Update:   update,
		},
	}
	var err_ error
	var client_ graphql.Client

	client_, err_ = client.NewClient(ctx_)
	if err_ != nil {
		return nil, err_
	}

	var data_ UpdateLedgerResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}
